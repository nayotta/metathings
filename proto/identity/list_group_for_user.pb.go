// Code generated by protoc-gen-go. DO NOT EDIT.
// source: list_group_for_user.proto

package identity

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/mwitkow/go-proto-validators"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ListGroupForUserRequest struct {
	UserId *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *ListGroupForUserRequest) Reset()                    { *m = ListGroupForUserRequest{} }
func (m *ListGroupForUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGroupForUserRequest) ProtoMessage()               {}
func (*ListGroupForUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{0} }

func (m *ListGroupForUserRequest) GetUserId() *google_protobuf.StringValue {
	if m != nil {
		return m.UserId
	}
	return nil
}

type ListGroupForUserResponse struct {
	Groups []*Group `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *ListGroupForUserResponse) Reset()                    { *m = ListGroupForUserResponse{} }
func (m *ListGroupForUserResponse) String() string            { return proto.CompactTextString(m) }
func (*ListGroupForUserResponse) ProtoMessage()               {}
func (*ListGroupForUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{1} }

func (m *ListGroupForUserResponse) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func init() {
	proto.RegisterType((*ListGroupForUserRequest)(nil), "ai.metathings.service.identity.ListGroupForUserRequest")
	proto.RegisterType((*ListGroupForUserResponse)(nil), "ai.metathings.service.identity.ListGroupForUserResponse")
}

func init() { proto.RegisterFile("list_group_for_user.proto", fileDescriptor23) }

var fileDescriptor23 = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0x87, 0x89, 0x42, 0x84, 0xf4, 0x96, 0x8b, 0xb1, 0x48, 0x0d, 0x05, 0xa1, 0x97, 0x6e, 0xa0,
	0x82, 0xb7, 0x5e, 0x3c, 0x28, 0x82, 0xa7, 0x88, 0xa2, 0xa7, 0xb0, 0x69, 0xa6, 0xdb, 0xc1, 0x24,
	0x13, 0x77, 0x66, 0x1b, 0x7c, 0x5a, 0xc1, 0x27, 0x91, 0x6c, 0xaa, 0x17, 0xc1, 0xdb, 0xfc, 0xfb,
	0x7e, 0x7c, 0x4c, 0x74, 0x56, 0x23, 0x4b, 0x61, 0x2c, 0xb9, 0xae, 0xd8, 0x92, 0x2d, 0x1c, 0x83,
	0x55, 0x9d, 0x25, 0xa1, 0x78, 0xa6, 0x51, 0x35, 0x20, 0x5a, 0x76, 0xd8, 0x1a, 0x56, 0x0c, 0x76,
	0x8f, 0x1b, 0x50, 0x58, 0x41, 0x2b, 0x28, 0x1f, 0xd3, 0x99, 0x21, 0x32, 0x35, 0x64, 0xfe, 0xba,
	0x74, 0xdb, 0xac, 0xb7, 0xba, 0xeb, 0xc0, 0xf2, 0xc8, 0x4f, 0xaf, 0x0d, 0xca, 0xce, 0x95, 0x6a,
	0x43, 0x4d, 0xd6, 0xf4, 0x28, 0x6f, 0xd4, 0x67, 0x86, 0x96, 0x7e, 0xb9, 0xdc, 0xeb, 0x1a, 0x2b,
	0x2d, 0x64, 0x39, 0xfb, 0x2d, 0x0f, 0xdc, 0xc4, 0xdb, 0x8c, 0xcd, 0xfc, 0x25, 0x3a, 0x7d, 0x40,
	0x96, 0xbb, 0x61, 0x74, 0x4b, 0xf6, 0x89, 0xc1, 0xe6, 0xf0, 0xee, 0x80, 0x25, 0x5e, 0x47, 0x27,
	0x83, 0x6d, 0x81, 0x55, 0x12, 0xa4, 0xc1, 0x62, 0xb2, 0x3a, 0x57, 0xa3, 0x91, 0xfa, 0x31, 0x52,
	0x8f, 0x62, 0xb1, 0x35, 0xcf, 0xba, 0x76, 0x70, 0x13, 0x7e, 0x7d, 0x5e, 0x1c, 0xa5, 0x41, 0x1e,
	0x0e, 0xd0, 0x7d, 0x35, 0x7f, 0x8d, 0x92, 0xbf, 0xc9, 0xdc, 0x51, 0xcb, 0x10, 0xaf, 0xa3, 0xd0,
	0x4b, 0x70, 0x12, 0xa4, 0xc7, 0x8b, 0xc9, 0xea, 0x52, 0xfd, 0xff, 0x0b, 0xe5, 0x53, 0xf2, 0x03,
	0x54, 0x86, 0x5e, 0xe0, 0xea, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x97, 0x5d, 0xc6, 0xdd, 0x5d, 0x01,
	0x00, 0x00,
}
