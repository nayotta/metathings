// Code generated by protoc-gen-go. DO NOT EDIT.
// source: get_group.proto

package identity

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/mwitkow/go-proto-validators"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetGroupRequest struct {
	GroupId *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (m *GetGroupRequest) Reset()                    { *m = GetGroupRequest{} }
func (m *GetGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGroupRequest) ProtoMessage()               {}
func (*GetGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor17, []int{0} }

func (m *GetGroupRequest) GetGroupId() *google_protobuf.StringValue {
	if m != nil {
		return m.GroupId
	}
	return nil
}

type GetGroupResponse struct {
	Group *Group `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
}

func (m *GetGroupResponse) Reset()                    { *m = GetGroupResponse{} }
func (m *GetGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGroupResponse) ProtoMessage()               {}
func (*GetGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor17, []int{1} }

func (m *GetGroupResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func init() {
	proto.RegisterType((*GetGroupRequest)(nil), "ai.metathings.service.identity.GetGroupRequest")
	proto.RegisterType((*GetGroupResponse)(nil), "ai.metathings.service.identity.GetGroupResponse")
}

func init() { proto.RegisterFile("get_group.proto", fileDescriptor17) }

var fileDescriptor17 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x8f, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x89, 0x60, 0x95, 0xed, 0xa1, 0x92, 0x93, 0x14, 0xa9, 0xa5, 0x20, 0x78, 0xe9, 0x2c,
	0x28, 0x78, 0xf1, 0x20, 0x78, 0x29, 0x9e, 0x84, 0x08, 0x5e, 0xcb, 0xa6, 0x19, 0xb7, 0x83, 0x49,
	0x66, 0xdd, 0x9d, 0x6d, 0xf0, 0xd3, 0x0a, 0x7e, 0x12, 0x71, 0x13, 0xff, 0x9c, 0x7a, 0x1b, 0xe6,
	0xbd, 0xdf, 0x9b, 0x37, 0x6a, 0x62, 0x51, 0xd6, 0xd6, 0x73, 0x74, 0xe0, 0x3c, 0x0b, 0xe7, 0x33,
	0x43, 0xd0, 0xa0, 0x18, 0xd9, 0x52, 0x6b, 0x03, 0x04, 0xf4, 0x3b, 0xda, 0x20, 0x50, 0x85, 0xad,
	0x90, 0xbc, 0x4f, 0x67, 0x96, 0xd9, 0xd6, 0xa8, 0x93, 0xbb, 0x8c, 0x2f, 0xba, 0xf3, 0xc6, 0x39,
	0xf4, 0xa1, 0xe7, 0xa7, 0x37, 0x96, 0x64, 0x1b, 0x4b, 0xd8, 0x70, 0xa3, 0x9b, 0x8e, 0xe4, 0x95,
	0x3b, 0x6d, 0x79, 0x99, 0xc4, 0xe5, 0xce, 0xd4, 0x54, 0x19, 0x61, 0x1f, 0xf4, 0xef, 0x38, 0x70,
	0xe3, 0x7f, 0x25, 0x16, 0x85, 0x9a, 0xac, 0x50, 0x56, 0xdf, 0x9b, 0x02, 0xdf, 0x22, 0x06, 0xc9,
	0xef, 0xd4, 0x71, 0x72, 0xac, 0xa9, 0x3a, 0xcd, 0xe6, 0xd9, 0xe5, 0xf8, 0xea, 0x0c, 0xfa, 0x2a,
	0xf0, 0x53, 0x05, 0x9e, 0xc4, 0x53, 0x6b, 0x9f, 0x4d, 0x1d, 0xf1, 0x7e, 0xf4, 0xf9, 0x71, 0x7e,
	0x30, 0xcf, 0x8a, 0xa3, 0x44, 0x3d, 0x54, 0x8b, 0x47, 0x75, 0xf2, 0x97, 0x19, 0x1c, 0xb7, 0x01,
	0xf3, 0x5b, 0x75, 0x98, 0xe4, 0x21, 0xf1, 0x02, 0xf6, 0x3f, 0x0f, 0x3d, 0xdd, 0x33, 0xe5, 0x28,
	0xdd, 0xbd, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xd0, 0xaa, 0x39, 0x83, 0x43, 0x01, 0x00, 0x00,
}
