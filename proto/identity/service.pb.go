// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package identity

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IdentityService service

type IdentityServiceClient interface {
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-domain
	CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-domain
	DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#update-domain
	PatchDomain(ctx context.Context, in *PatchDomainRequest, opts ...grpc.CallOption) (*PatchDomainResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#show-domain-details
	GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*GetDomainResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-domains
	ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-project
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-project
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#update-project
	PatchProject(ctx context.Context, in *PatchProjectRequest, opts ...grpc.CallOption) (*PatchProjectResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#show-project-details
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-projects
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-projects-for-user
	ListProjectsForUser(ctx context.Context, in *ListProjectsForUserRequest, opts ...grpc.CallOption) (*ListProjectsForUserResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-user
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-user
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#update-user
	PatchUser(ctx context.Context, in *PatchUserRequest, opts ...grpc.CallOption) (*PatchUserResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#show-user-details
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-users
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#change-password-for-user
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-users-in-group
	ListUsersInGroup(ctx context.Context, in *ListUsersInGroupRequest, opts ...grpc.CallOption) (*ListUsersInGroupResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-group
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-group
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#update-group
	PatchGroup(ctx context.Context, in *PatchGroupRequest, opts ...grpc.CallOption) (*PatchGroupResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#show-group-details
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-groups
	ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#add-user-to-group
	AddUserToGroup(ctx context.Context, in *AddUserToGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#remove-user-from-group
	RemoveUserFromGroup(ctx context.Context, in *RemoveUserFromGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#check-whether-user-belongs-to-group
	CheckUserInGroup(ctx context.Context, in *CheckUserInGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-groups-to-which-a-user-belongs
	ListGroupsForUser(ctx context.Context, in *ListGroupsForUserRequest, opts ...grpc.CallOption) (*ListGroupsForUserResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-role
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-role
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#update-role
	PatchRole(ctx context.Context, in *PatchRoleRequest, opts ...grpc.CallOption) (*PatchRoleResponse, error)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-roles
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#assign-role-to-group-on-domain
	AddRoleToGroupOnDomain(ctx context.Context, in *AddRoleToGroupOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#unassign-role-from-group-on-domain
	RemoveRoleFromGroupOnDomain(ctx context.Context, in *RemoveRoleFromGroupOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#check-whether-user-has-role-assignment-on-domain
	CheckRoleInGroupOnDomain(ctx context.Context, in *CheckRoleInGroupOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-group-on-domain
	ListRolesForGroupOnDomain(ctx context.Context, in *ListRolesForGroupOnDomainRequest, opts ...grpc.CallOption) (*ListRolesForGroupOnDomainResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-group-on-domain
	AddRoleToUserOnDomain(ctx context.Context, in *AddRoleToUserOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-group-on-domain
	RemoveRoleFromUserOnDomain(ctx context.Context, in *RemoveRoleFromUserOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-group-on-domain
	CheckRoleInUserOnDomain(ctx context.Context, in *CheckRoleInUserOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-group-on-domain
	ListRolesForUserOnDomain(ctx context.Context, in *ListRolesForUserOnDomainRequest, opts ...grpc.CallOption) (*ListRolesForUserOnDomainResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#assign-role-to-group-on-project
	AddRoleToGroupOnProject(ctx context.Context, in *AddRoleToGroupOnProjectRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#assign-role-to-group-on-project
	RemoveRoleFromGroupOnProject(ctx context.Context, in *RemoveRoleFromGroupOnProjectRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#check-whether-group-has-role-assignment-on-project
	CheckRoleInGroupOnProject(ctx context.Context, in *CheckRoleInGroupOnProjectRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-user-on-project
	ListRolesForGroupOnProject(ctx context.Context, in *ListRolesForGroupOnProjectRequest, opts ...grpc.CallOption) (*ListRolesForGroupOnProjectResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#assign-role-to-user-on-project
	AddRoleToUserOnProject(ctx context.Context, in *AddRoleToUserOnProjectRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#unassign-role-from-user-on-project
	RemoveRoleFromUserOnProject(ctx context.Context, in *RemoveRoleFromUserOnProjectRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#check-whether-user-has-role-assignment-on-project
	CheckRoleInUserOnProject(ctx context.Context, in *CheckRoleInUserOnProjectRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-user-on-project
	ListRolesForUserOnProject(ctx context.Context, in *ListRolesForUserOnProjectRequest, opts ...grpc.CallOption) (*ListRolesForUserOnProjectResponse, error)
}

type identityServiceClient struct {
	cc *grpc.ClientConn
}

func NewIdentityServiceClient(cc *grpc.ClientConn) IdentityServiceClient {
	return &identityServiceClient{cc}
}

func (c *identityServiceClient) CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error) {
	out := new(CreateDomainResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/CreateDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/DeleteDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) PatchDomain(ctx context.Context, in *PatchDomainRequest, opts ...grpc.CallOption) (*PatchDomainResponse, error) {
	out := new(PatchDomainResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/PatchDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*GetDomainResponse, error) {
	out := new(GetDomainResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/GetDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error) {
	out := new(ListDomainsResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListDomains", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/CreateProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/DeleteProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) PatchProject(ctx context.Context, in *PatchProjectRequest, opts ...grpc.CallOption) (*PatchProjectResponse, error) {
	out := new(PatchProjectResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/PatchProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/GetProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListProjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListProjectsForUser(ctx context.Context, in *ListProjectsForUserRequest, opts ...grpc.CallOption) (*ListProjectsForUserResponse, error) {
	out := new(ListProjectsForUserResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListProjectsForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) PatchUser(ctx context.Context, in *PatchUserRequest, opts ...grpc.CallOption) (*PatchUserResponse, error) {
	out := new(PatchUserResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/PatchUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ChangePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListUsersInGroup(ctx context.Context, in *ListUsersInGroupRequest, opts ...grpc.CallOption) (*ListUsersInGroupResponse, error) {
	out := new(ListUsersInGroupResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListUsersInGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/DeleteGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) PatchGroup(ctx context.Context, in *PatchGroupRequest, opts ...grpc.CallOption) (*PatchGroupResponse, error) {
	out := new(PatchGroupResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/PatchGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/GetGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	out := new(ListGroupsResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) AddUserToGroup(ctx context.Context, in *AddUserToGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/AddUserToGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RemoveUserFromGroup(ctx context.Context, in *RemoveUserFromGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/RemoveUserFromGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CheckUserInGroup(ctx context.Context, in *CheckUserInGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/CheckUserInGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListGroupsForUser(ctx context.Context, in *ListGroupsForUserRequest, opts ...grpc.CallOption) (*ListGroupsForUserResponse, error) {
	out := new(ListGroupsForUserResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListGroupsForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/CreateRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/DeleteRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) PatchRole(ctx context.Context, in *PatchRoleRequest, opts ...grpc.CallOption) (*PatchRoleResponse, error) {
	out := new(PatchRoleResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/PatchRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/GetRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListRoles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) AddRoleToGroupOnDomain(ctx context.Context, in *AddRoleToGroupOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/AddRoleToGroupOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RemoveRoleFromGroupOnDomain(ctx context.Context, in *RemoveRoleFromGroupOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/RemoveRoleFromGroupOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CheckRoleInGroupOnDomain(ctx context.Context, in *CheckRoleInGroupOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/CheckRoleInGroupOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListRolesForGroupOnDomain(ctx context.Context, in *ListRolesForGroupOnDomainRequest, opts ...grpc.CallOption) (*ListRolesForGroupOnDomainResponse, error) {
	out := new(ListRolesForGroupOnDomainResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListRolesForGroupOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) AddRoleToUserOnDomain(ctx context.Context, in *AddRoleToUserOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/AddRoleToUserOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RemoveRoleFromUserOnDomain(ctx context.Context, in *RemoveRoleFromUserOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/RemoveRoleFromUserOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CheckRoleInUserOnDomain(ctx context.Context, in *CheckRoleInUserOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/CheckRoleInUserOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListRolesForUserOnDomain(ctx context.Context, in *ListRolesForUserOnDomainRequest, opts ...grpc.CallOption) (*ListRolesForUserOnDomainResponse, error) {
	out := new(ListRolesForUserOnDomainResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListRolesForUserOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) AddRoleToGroupOnProject(ctx context.Context, in *AddRoleToGroupOnProjectRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/AddRoleToGroupOnProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RemoveRoleFromGroupOnProject(ctx context.Context, in *RemoveRoleFromGroupOnProjectRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/RemoveRoleFromGroupOnProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CheckRoleInGroupOnProject(ctx context.Context, in *CheckRoleInGroupOnProjectRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/CheckRoleInGroupOnProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListRolesForGroupOnProject(ctx context.Context, in *ListRolesForGroupOnProjectRequest, opts ...grpc.CallOption) (*ListRolesForGroupOnProjectResponse, error) {
	out := new(ListRolesForGroupOnProjectResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListRolesForGroupOnProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) AddRoleToUserOnProject(ctx context.Context, in *AddRoleToUserOnProjectRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/AddRoleToUserOnProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RemoveRoleFromUserOnProject(ctx context.Context, in *RemoveRoleFromUserOnProjectRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/RemoveRoleFromUserOnProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CheckRoleInUserOnProject(ctx context.Context, in *CheckRoleInUserOnProjectRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/CheckRoleInUserOnProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListRolesForUserOnProject(ctx context.Context, in *ListRolesForUserOnProjectRequest, opts ...grpc.CallOption) (*ListRolesForUserOnProjectResponse, error) {
	out := new(ListRolesForUserOnProjectResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListRolesForUserOnProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IdentityService service

type IdentityServiceServer interface {
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-domain
	CreateDomain(context.Context, *CreateDomainRequest) (*CreateDomainResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-domain
	DeleteDomain(context.Context, *DeleteDomainRequest) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#update-domain
	PatchDomain(context.Context, *PatchDomainRequest) (*PatchDomainResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#show-domain-details
	GetDomain(context.Context, *GetDomainRequest) (*GetDomainResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-domains
	ListDomains(context.Context, *ListDomainsRequest) (*ListDomainsResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-project
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-project
	DeleteProject(context.Context, *DeleteProjectRequest) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#update-project
	PatchProject(context.Context, *PatchProjectRequest) (*PatchProjectResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#show-project-details
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-projects
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-projects-for-user
	ListProjectsForUser(context.Context, *ListProjectsForUserRequest) (*ListProjectsForUserResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-user
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-user
	DeleteUser(context.Context, *DeleteUserRequest) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#update-user
	PatchUser(context.Context, *PatchUserRequest) (*PatchUserResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#show-user-details
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-users
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#change-password-for-user
	ChangePassword(context.Context, *ChangePasswordRequest) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-users-in-group
	ListUsersInGroup(context.Context, *ListUsersInGroupRequest) (*ListUsersInGroupResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-group
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-group
	DeleteGroup(context.Context, *DeleteGroupRequest) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#update-group
	PatchGroup(context.Context, *PatchGroupRequest) (*PatchGroupResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#show-group-details
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-groups
	ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#add-user-to-group
	AddUserToGroup(context.Context, *AddUserToGroupRequest) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#remove-user-from-group
	RemoveUserFromGroup(context.Context, *RemoveUserFromGroupRequest) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#check-whether-user-belongs-to-group
	CheckUserInGroup(context.Context, *CheckUserInGroupRequest) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-groups-to-which-a-user-belongs
	ListGroupsForUser(context.Context, *ListGroupsForUserRequest) (*ListGroupsForUserResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-role
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-role
	DeleteRole(context.Context, *DeleteRoleRequest) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#update-role
	PatchRole(context.Context, *PatchRoleRequest) (*PatchRoleResponse, error)
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-roles
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#assign-role-to-group-on-domain
	AddRoleToGroupOnDomain(context.Context, *AddRoleToGroupOnDomainRequest) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#unassign-role-from-group-on-domain
	RemoveRoleFromGroupOnDomain(context.Context, *RemoveRoleFromGroupOnDomainRequest) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#check-whether-user-has-role-assignment-on-domain
	CheckRoleInGroupOnDomain(context.Context, *CheckRoleInGroupOnDomainRequest) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-group-on-domain
	ListRolesForGroupOnDomain(context.Context, *ListRolesForGroupOnDomainRequest) (*ListRolesForGroupOnDomainResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-group-on-domain
	AddRoleToUserOnDomain(context.Context, *AddRoleToUserOnDomainRequest) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-group-on-domain
	RemoveRoleFromUserOnDomain(context.Context, *RemoveRoleFromUserOnDomainRequest) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-group-on-domain
	CheckRoleInUserOnDomain(context.Context, *CheckRoleInUserOnDomainRequest) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-group-on-domain
	ListRolesForUserOnDomain(context.Context, *ListRolesForUserOnDomainRequest) (*ListRolesForUserOnDomainResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#assign-role-to-group-on-project
	AddRoleToGroupOnProject(context.Context, *AddRoleToGroupOnProjectRequest) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#assign-role-to-group-on-project
	RemoveRoleFromGroupOnProject(context.Context, *RemoveRoleFromGroupOnProjectRequest) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#check-whether-group-has-role-assignment-on-project
	CheckRoleInGroupOnProject(context.Context, *CheckRoleInGroupOnProjectRequest) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-user-on-project
	ListRolesForGroupOnProject(context.Context, *ListRolesForGroupOnProjectRequest) (*ListRolesForGroupOnProjectResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#assign-role-to-user-on-project
	AddRoleToUserOnProject(context.Context, *AddRoleToUserOnProjectRequest) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#unassign-role-from-user-on-project
	RemoveRoleFromUserOnProject(context.Context, *RemoveRoleFromUserOnProjectRequest) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#check-whether-user-has-role-assignment-on-project
	CheckRoleInUserOnProject(context.Context, *CheckRoleInUserOnProjectRequest) (*google_protobuf2.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-user-on-project
	ListRolesForUserOnProject(context.Context, *ListRolesForUserOnProjectRequest) (*ListRolesForUserOnProjectResponse, error)
}

func RegisterIdentityServiceServer(s *grpc.Server, srv IdentityServiceServer) {
	s.RegisterService(&_IdentityService_serviceDesc, srv)
}

func _IdentityService_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/CreateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateDomain(ctx, req.(*CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/DeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).DeleteDomain(ctx, req.(*DeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_PatchDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).PatchDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/PatchDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).PatchDomain(ctx, req.(*PatchDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/GetDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetDomain(ctx, req.(*GetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListDomains(ctx, req.(*ListDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_PatchProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).PatchProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/PatchProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).PatchProject(ctx, req.(*PatchProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListProjectsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListProjectsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListProjectsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListProjectsForUser(ctx, req.(*ListProjectsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_PatchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).PatchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/PatchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).PatchUser(ctx, req.(*PatchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListUsersInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersInGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListUsersInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListUsersInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListUsersInGroup(ctx, req.(*ListUsersInGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_PatchGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).PatchGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/PatchGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).PatchGroup(ctx, req.(*PatchGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListGroups(ctx, req.(*ListGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_AddUserToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).AddUserToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/AddUserToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).AddUserToGroup(ctx, req.(*AddUserToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RemoveUserFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RemoveUserFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/RemoveUserFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RemoveUserFromGroup(ctx, req.(*RemoveUserFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CheckUserInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserInGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CheckUserInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/CheckUserInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CheckUserInGroup(ctx, req.(*CheckUserInGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListGroupsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListGroupsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListGroupsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListGroupsForUser(ctx, req.(*ListGroupsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_PatchRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).PatchRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/PatchRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).PatchRole(ctx, req.(*PatchRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_AddRoleToGroupOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleToGroupOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).AddRoleToGroupOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/AddRoleToGroupOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).AddRoleToGroupOnDomain(ctx, req.(*AddRoleToGroupOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RemoveRoleFromGroupOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromGroupOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RemoveRoleFromGroupOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/RemoveRoleFromGroupOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RemoveRoleFromGroupOnDomain(ctx, req.(*RemoveRoleFromGroupOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CheckRoleInGroupOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRoleInGroupOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CheckRoleInGroupOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/CheckRoleInGroupOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CheckRoleInGroupOnDomain(ctx, req.(*CheckRoleInGroupOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListRolesForGroupOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesForGroupOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListRolesForGroupOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListRolesForGroupOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListRolesForGroupOnDomain(ctx, req.(*ListRolesForGroupOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_AddRoleToUserOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleToUserOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).AddRoleToUserOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/AddRoleToUserOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).AddRoleToUserOnDomain(ctx, req.(*AddRoleToUserOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RemoveRoleFromUserOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromUserOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RemoveRoleFromUserOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/RemoveRoleFromUserOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RemoveRoleFromUserOnDomain(ctx, req.(*RemoveRoleFromUserOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CheckRoleInUserOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRoleInUserOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CheckRoleInUserOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/CheckRoleInUserOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CheckRoleInUserOnDomain(ctx, req.(*CheckRoleInUserOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListRolesForUserOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesForUserOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListRolesForUserOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListRolesForUserOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListRolesForUserOnDomain(ctx, req.(*ListRolesForUserOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_AddRoleToGroupOnProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleToGroupOnProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).AddRoleToGroupOnProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/AddRoleToGroupOnProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).AddRoleToGroupOnProject(ctx, req.(*AddRoleToGroupOnProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RemoveRoleFromGroupOnProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromGroupOnProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RemoveRoleFromGroupOnProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/RemoveRoleFromGroupOnProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RemoveRoleFromGroupOnProject(ctx, req.(*RemoveRoleFromGroupOnProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CheckRoleInGroupOnProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRoleInGroupOnProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CheckRoleInGroupOnProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/CheckRoleInGroupOnProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CheckRoleInGroupOnProject(ctx, req.(*CheckRoleInGroupOnProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListRolesForGroupOnProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesForGroupOnProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListRolesForGroupOnProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListRolesForGroupOnProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListRolesForGroupOnProject(ctx, req.(*ListRolesForGroupOnProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_AddRoleToUserOnProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleToUserOnProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).AddRoleToUserOnProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/AddRoleToUserOnProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).AddRoleToUserOnProject(ctx, req.(*AddRoleToUserOnProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RemoveRoleFromUserOnProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromUserOnProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RemoveRoleFromUserOnProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/RemoveRoleFromUserOnProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RemoveRoleFromUserOnProject(ctx, req.(*RemoveRoleFromUserOnProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CheckRoleInUserOnProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRoleInUserOnProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CheckRoleInUserOnProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/CheckRoleInUserOnProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CheckRoleInUserOnProject(ctx, req.(*CheckRoleInUserOnProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListRolesForUserOnProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesForUserOnProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListRolesForUserOnProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListRolesForUserOnProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListRolesForUserOnProject(ctx, req.(*ListRolesForUserOnProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdentityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.identity.IdentityService",
	HandlerType: (*IdentityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDomain",
			Handler:    _IdentityService_CreateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _IdentityService_DeleteDomain_Handler,
		},
		{
			MethodName: "PatchDomain",
			Handler:    _IdentityService_PatchDomain_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _IdentityService_GetDomain_Handler,
		},
		{
			MethodName: "ListDomains",
			Handler:    _IdentityService_ListDomains_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _IdentityService_CreateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _IdentityService_DeleteProject_Handler,
		},
		{
			MethodName: "PatchProject",
			Handler:    _IdentityService_PatchProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _IdentityService_GetProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _IdentityService_ListProjects_Handler,
		},
		{
			MethodName: "ListProjectsForUser",
			Handler:    _IdentityService_ListProjectsForUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _IdentityService_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _IdentityService_DeleteUser_Handler,
		},
		{
			MethodName: "PatchUser",
			Handler:    _IdentityService_PatchUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _IdentityService_GetUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _IdentityService_ListUsers_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _IdentityService_ChangePassword_Handler,
		},
		{
			MethodName: "ListUsersInGroup",
			Handler:    _IdentityService_ListUsersInGroup_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _IdentityService_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _IdentityService_DeleteGroup_Handler,
		},
		{
			MethodName: "PatchGroup",
			Handler:    _IdentityService_PatchGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _IdentityService_GetGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _IdentityService_ListGroups_Handler,
		},
		{
			MethodName: "AddUserToGroup",
			Handler:    _IdentityService_AddUserToGroup_Handler,
		},
		{
			MethodName: "RemoveUserFromGroup",
			Handler:    _IdentityService_RemoveUserFromGroup_Handler,
		},
		{
			MethodName: "CheckUserInGroup",
			Handler:    _IdentityService_CheckUserInGroup_Handler,
		},
		{
			MethodName: "ListGroupsForUser",
			Handler:    _IdentityService_ListGroupsForUser_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _IdentityService_CreateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _IdentityService_DeleteRole_Handler,
		},
		{
			MethodName: "PatchRole",
			Handler:    _IdentityService_PatchRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _IdentityService_GetRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _IdentityService_ListRoles_Handler,
		},
		{
			MethodName: "AddRoleToGroupOnDomain",
			Handler:    _IdentityService_AddRoleToGroupOnDomain_Handler,
		},
		{
			MethodName: "RemoveRoleFromGroupOnDomain",
			Handler:    _IdentityService_RemoveRoleFromGroupOnDomain_Handler,
		},
		{
			MethodName: "CheckRoleInGroupOnDomain",
			Handler:    _IdentityService_CheckRoleInGroupOnDomain_Handler,
		},
		{
			MethodName: "ListRolesForGroupOnDomain",
			Handler:    _IdentityService_ListRolesForGroupOnDomain_Handler,
		},
		{
			MethodName: "AddRoleToUserOnDomain",
			Handler:    _IdentityService_AddRoleToUserOnDomain_Handler,
		},
		{
			MethodName: "RemoveRoleFromUserOnDomain",
			Handler:    _IdentityService_RemoveRoleFromUserOnDomain_Handler,
		},
		{
			MethodName: "CheckRoleInUserOnDomain",
			Handler:    _IdentityService_CheckRoleInUserOnDomain_Handler,
		},
		{
			MethodName: "ListRolesForUserOnDomain",
			Handler:    _IdentityService_ListRolesForUserOnDomain_Handler,
		},
		{
			MethodName: "AddRoleToGroupOnProject",
			Handler:    _IdentityService_AddRoleToGroupOnProject_Handler,
		},
		{
			MethodName: "RemoveRoleFromGroupOnProject",
			Handler:    _IdentityService_RemoveRoleFromGroupOnProject_Handler,
		},
		{
			MethodName: "CheckRoleInGroupOnProject",
			Handler:    _IdentityService_CheckRoleInGroupOnProject_Handler,
		},
		{
			MethodName: "ListRolesForGroupOnProject",
			Handler:    _IdentityService_ListRolesForGroupOnProject_Handler,
		},
		{
			MethodName: "AddRoleToUserOnProject",
			Handler:    _IdentityService_AddRoleToUserOnProject_Handler,
		},
		{
			MethodName: "RemoveRoleFromUserOnProject",
			Handler:    _IdentityService_RemoveRoleFromUserOnProject_Handler,
		},
		{
			MethodName: "CheckRoleInUserOnProject",
			Handler:    _IdentityService_CheckRoleInUserOnProject_Handler,
		},
		{
			MethodName: "ListRolesForUserOnProject",
			Handler:    _IdentityService_ListRolesForUserOnProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor53) }

var fileDescriptor53 = []byte{
	// 1217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0x5b, 0x6f, 0x1b, 0x45,
	0x14, 0xae, 0x5f, 0xa0, 0x3d, 0x49, 0xda, 0x64, 0x43, 0x9b, 0xc6, 0x89, 0x10, 0x4d, 0xda, 0xf2,
	0x84, 0x73, 0x2b, 0xa2, 0x5c, 0xda, 0xc4, 0x49, 0x89, 0x55, 0x09, 0x89, 0x28, 0xc0, 0x03, 0x20,
	0xb4, 0xda, 0x7a, 0x27, 0xce, 0x52, 0x7b, 0xc7, 0xdd, 0x59, 0xb7, 0x8d, 0x22, 0x78, 0x45, 0xe2,
	0x89, 0x7f, 0x80, 0x40, 0xe2, 0x7f, 0xa2, 0xb9, 0x7a, 0x66, 0xbc, 0xee, 0x9e, 0x71, 0x5e, 0x8f,
	0xbf, 0xef, 0x7c, 0xe7, 0x9c, 0x39, 0x97, 0x4d, 0x60, 0x81, 0x91, 0xe2, 0x75, 0xd6, 0x25, 0xad,
	0x61, 0x41, 0x4b, 0x1a, 0x7d, 0x98, 0x64, 0xad, 0x01, 0x29, 0x93, 0xf2, 0x3c, 0xcb, 0x7b, 0xac,
	0xa5, 0x7f, 0xcc, 0x52, 0x92, 0x97, 0x59, 0x79, 0xd1, 0x5c, 0xeb, 0x51, 0xda, 0xeb, 0x93, 0x2d,
	0x81, 0x7e, 0x31, 0x3a, 0xdb, 0x22, 0x83, 0x61, 0x79, 0x21, 0xc9, 0xcd, 0xe5, 0x6e, 0x41, 0x92,
	0x92, 0xc4, 0x29, 0x1d, 0x24, 0x59, 0xae, 0x8d, 0x29, 0xe9, 0x13, 0xdf, 0x18, 0x0d, 0x93, 0xb2,
	0x7b, 0xee, 0xda, 0x16, 0x7b, 0xa4, 0xf4, 0x50, 0xfd, 0x8c, 0x69, 0x13, 0x53, 0xb6, 0x0f, 0x94,
	0xc6, 0xb0, 0xa0, 0xbf, 0x92, 0x6e, 0xa9, 0xad, 0x4a, 0xc4, 0xb5, 0x2e, 0x4b, 0x15, 0xd7, 0xb8,
	0xc4, 0x65, 0x3c, 0x9c, 0xd0, 0x51, 0x36, 0x2d, 0xb4, 0xee, 0x18, 0xe3, 0x33, 0x5a, 0xc4, 0x23,
	0x46, 0x0a, 0xed, 0x45, 0x85, 0x61, 0x9b, 0x54, 0x0c, 0x96, 0x69, 0x51, 0x06, 0x60, 0x59, 0x6e,
	0x72, 0x75, 0x1b, 0x21, 0x54, 0xb8, 0x41, 0xeb, 0xde, 0xee, 0x9e, 0x27, 0x79, 0x8f, 0xc4, 0xc3,
	0x84, 0xb1, 0x37, 0xb4, 0x48, 0x95, 0x79, 0x75, 0x0c, 0x8c, 0xb3, 0x3c, 0xee, 0x15, 0x74, 0x34,
	0xd4, 0x65, 0x52, 0xb1, 0x38, 0x36, 0x15, 0x8c, 0x6d, 0x5b, 0x92, 0xd1, 0xd8, 0xa6, 0x5b, 0x3c,
	0x1c, 0x07, 0x23, 0x64, 0x84, 0x45, 0x07, 0xb4, 0x92, 0xa4, 0xa9, 0x10, 0x8e, 0x4b, 0xea, 0x60,
	0xd7, 0x0b, 0x32, 0xa0, 0xaf, 0x65, 0xc2, 0xf1, 0x59, 0x41, 0x07, 0xce, 0xaf, 0xab, 0xdd, 0x73,
	0xd2, 0x7d, 0x29, 0x7f, 0xf4, 0x02, 0x6e, 0x5a, 0x22, 0xd3, 0x0a, 0x5b, 0xd0, 0x3e, 0xf1, 0x0a,
	0x6b, 0x99, 0x54, 0x61, 0x2d, 0x8b, 0x28, 0xac, 0x8d, 0x10, 0x1a, 0xdc, 0xa0, 0xf3, 0xb8, 0xc7,
	0xf3, 0xe0, 0x06, 0x93, 0x47, 0x4c, 0x73, 0xb7, 0xe1, 0x1e, 0xaa, 0x8c, 0x04, 0x6a, 0x9c, 0xd1,
	0x04, 0x6e, 0x53, 0xe6, 0x26, 0x60, 0x3a, 0xb7, 0x09, 0xd0, 0xfd, 0x71, 0x04, 0x22, 0xc9, 0x6a,
	0xd4, 0x47, 0x76, 0x54, 0xa2, 0x58, 0x3e, 0xe2, 0xc1, 0x44, 0x50, 0x95, 0xb0, 0x0d, 0x37, 0xa6,
	0x4a, 0xcc, 0xa6, 0x17, 0x52, 0xb5, 0xa3, 0xca, 0x3a, 0xb9, 0x13, 0xf3, 0xf1, 0xf4, 0x42, 0xb9,
	0xc0, 0xfb, 0x53, 0x2a, 0xe5, 0xa2, 0x1e, 0x4c, 0x2b, 0x95, 0x0b, 0xbb, 0x57, 0x55, 0x2b, 0x17,
	0xf2, 0x70, 0x6a, 0xb1, 0x5c, 0xdc, 0x66, 0x75, 0xb5, 0xbc, 0xe0, 0xa7, 0x94, 0xcb, 0x41, 0xed,
	0xfe, 0xf3, 0x09, 0xdc, 0x7a, 0xae, 0xf6, 0xe3, 0x77, 0x72, 0x5f, 0x46, 0x97, 0x30, 0x7f, 0x24,
	0xfa, 0xf8, 0x99, 0xa8, 0x6c, 0xb4, 0xd7, 0x7a, 0xf7, 0x5e, 0x6d, 0xd9, 0xe8, 0x53, 0xf2, 0x6a,
	0x44, 0x58, 0xd9, 0x7c, 0x14, 0x46, 0x62, 0x43, 0x9a, 0x33, 0xb2, 0x71, 0x2d, 0xfa, 0x05, 0xe6,
	0x9f, 0x89, 0x89, 0xc1, 0x8a, 0xdb, 0x68, 0x2d, 0x7e, 0xa7, 0x25, 0x37, 0x7d, 0x4b, 0x6f, 0xfa,
	0xd6, 0xd7, 0x7c, 0xd3, 0x6f, 0x5c, 0x8b, 0xde, 0xc2, 0xdc, 0x09, 0x9f, 0x3e, 0xe5, 0x7d, 0xb7,
	0xce, 0xbb, 0x05, 0xd6, 0xce, 0xf7, 0x82, 0x38, 0x26, 0xb1, 0x02, 0x6e, 0x74, 0x48, 0xa9, 0x74,
	0xb7, 0xeb, 0x7c, 0x18, 0xa8, 0x56, 0xdd, 0x09, 0x60, 0x18, 0xcd, 0xb7, 0x30, 0xf7, 0x4d, 0xc6,
	0x94, 0x9d, 0xd5, 0x67, 0x6b, 0x81, 0xd1, 0xd9, 0x3a, 0x1c, 0xa3, 0xfc, 0x3b, 0x2c, 0xc8, 0x07,
	0x3e, 0x91, 0xed, 0x16, 0x21, 0xfb, 0x41, 0xc1, 0xb5, 0xfa, 0xa7, 0x81, 0x2c, 0xa3, 0x1f, 0xc3,
	0x82, 0x6c, 0x0c, 0xb4, 0xbe, 0x03, 0xaf, 0x6f, 0xa4, 0x4b, 0x98, 0x17, 0xef, 0xac, 0xfd, 0xe3,
	0xba, 0xc2, 0x73, 0xff, 0x28, 0x8c, 0x64, 0xb2, 0x1b, 0x01, 0x74, 0x48, 0xa9, 0xa5, 0x31, 0xad,
	0xe1, 0x09, 0xef, 0x86, 0x50, 0x8c, 0xec, 0x25, 0xcc, 0xf3, 0xd7, 0x56, 0x3f, 0xb0, 0x08, 0xd5,
	0x1b, 0x1a, 0x8d, 0xce, 0xd9, 0x25, 0x19, 0xf1, 0xbf, 0x1a, 0xb0, 0x6c, 0xff, 0x74, 0x4c, 0x8b,
	0x1f, 0x18, 0x29, 0xa2, 0x2f, 0x42, 0xfc, 0x29, 0x92, 0x8e, 0xe5, 0xcb, 0x99, 0xb8, 0xf6, 0x33,
	0xc8, 0xfe, 0x13, 0x81, 0xec, 0xe0, 0x7a, 0xd5, 0xd6, 0xdf, 0x0d, 0xa1, 0x18, 0xd9, 0x1f, 0x01,
	0x64, 0xb3, 0xe2, 0x64, 0xc7, 0xd8, 0xfa, 0xae, 0x2e, 0xe0, 0x86, 0x68, 0x39, 0xe1, 0x79, 0x1b,
	0xd5, 0x9d, 0xb6, 0xe3, 0x9d, 0x00, 0x86, 0x49, 0xa7, 0x0f, 0xef, 0x77, 0x48, 0x29, 0x14, 0x5b,
	0x88, 0xb6, 0xb4, 0xf5, 0xb6, 0xd0, 0x78, 0x7b, 0x0d, 0xf3, 0x47, 0xe5, 0x56, 0x56, 0x9f, 0xa1,
	0x81, 0xa2, 0x33, 0xb4, 0x18, 0x46, 0x33, 0x81, 0x9b, 0x47, 0xe2, 0xbb, 0xf8, 0x44, 0x7d, 0x16,
	0x47, 0xf5, 0x7b, 0xcd, 0xc1, 0xd7, 0x3f, 0xdc, 0x1f, 0x0d, 0x58, 0x34, 0xd2, 0xcf, 0xf3, 0x0e,
	0xff, 0x06, 0x89, 0x3e, 0x43, 0x07, 0xab, 0x18, 0x5a, 0xe7, 0x71, 0x38, 0xd1, 0xbe, 0x39, 0xb2,
	0x6b, 0x65, 0x0c, 0xc8, 0x16, 0x77, 0xe4, 0xf7, 0x82, 0x38, 0x46, 0xf9, 0x67, 0x98, 0x93, 0xbd,
	0x8e, 0x54, 0xb6, 0xc0, 0xf5, 0x05, 0x1e, 0x01, 0x88, 0xe6, 0x95, 0xbe, 0x71, 0x8d, 0xee, 0xb8,
	0xde, 0x0d, 0xa1, 0x98, 0x9c, 0x28, 0x5c, 0xef, 0x90, 0x52, 0x8a, 0x62, 0xba, 0xdd, 0x91, 0xdc,
	0xc6, 0x13, 0xec, 0x9d, 0xc6, 0x1f, 0x57, 0x98, 0x59, 0x84, 0x6a, 0x77, 0x89, 0x45, 0xe7, 0x69,
	0x53, 0xec, 0x11, 0x69, 0xa7, 0x29, 0x6f, 0xa9, 0xef, 0xa9, 0xcc, 0xb6, 0x76, 0x44, 0x5c, 0x7c,
	0xfd, 0x0b, 0xbe, 0x84, 0xe5, 0x53, 0xf1, 0x7d, 0xcd, 0x59, 0xc7, 0x05, 0x1d, 0x48, 0x9d, 0xda,
	0xfb, 0x51, 0x41, 0xaa, 0x17, 0x23, 0xb0, 0x78, 0xc4, 0x3f, 0xd2, 0x39, 0x0d, 0x3d, 0x8e, 0x3e,
	0xa3, 0x5e, 0xe6, 0xcf, 0x06, 0x2c, 0x8d, 0xeb, 0xa9, 0x4f, 0xe2, 0x63, 0xfc, 0x13, 0x78, 0x07,
	0xf1, 0xf3, 0x19, 0x98, 0x93, 0xe7, 0xf0, 0x94, 0xf6, 0x09, 0xf6, 0x1c, 0x72, 0x6c, 0xe0, 0x39,
	0x94, 0x94, 0xc9, 0x73, 0x88, 0x93, 0x1d, 0x63, 0xf1, 0xe7, 0x50, 0x78, 0xc6, 0x9d, 0x43, 0xdb,
	0xf1, 0x4e, 0x00, 0xc3, 0x3b, 0x87, 0x42, 0x11, 0x73, 0x0e, 0x6d, 0xbd, 0x2d, 0x34, 0xde, 0x3f,
	0x87, 0xdc, 0x8a, 0x3c, 0x87, 0x02, 0x1a, 0x74, 0x0e, 0x15, 0xc3, 0x68, 0xbe, 0x82, 0x3b, 0xed,
	0x34, 0xe5, 0x56, 0x35, 0xbb, 0xdf, 0xe6, 0xea, 0xcf, 0xa2, 0x27, 0x88, 0x99, 0xaf, 0xe0, 0x61,
	0xbe, 0xd6, 0xd7, 0xe4, 0x18, 0x73, 0xb6, 0x19, 0x63, 0xa3, 0x7b, 0x88, 0xdb, 0x01, 0x95, 0x64,
	0xcc, 0xe9, 0xb8, 0x2b, 0x26, 0x9b, 0xd3, 0xd5, 0x64, 0x1b, 0xe5, 0x7d, 0xd4, 0x4e, 0xa8, 0x60,
	0xd6, 0xcb, 0xfe, 0xdb, 0x80, 0x55, 0x53, 0xfe, 0x63, 0x5a, 0xb8, 0xc2, 0x07, 0xe8, 0x97, 0xf3,
	0xa9, 0x5a, 0xb9, 0x7d, 0x05, 0x0f, 0xd6, 0x7d, 0xbb, 0x6d, 0xde, 0x94, 0xaf, 0x13, 0x13, 0xdf,
	0x57, 0xe8, 0x56, 0xb0, 0x69, 0xf5, 0x55, 0xb9, 0x80, 0xa6, 0xfb, 0x98, 0x8e, 0x6a, 0x3b, 0xac,
	0x11, 0xc2, 0xa4, 0x19, 0xac, 0x58, 0xaf, 0xe9, 0xe8, 0x3e, 0x0d, 0x68, 0x83, 0x30, 0xd1, 0xbf,
	0x1b, 0x70, 0xd7, 0x7e, 0x08, 0x47, 0x76, 0x3f, 0xe4, 0x09, 0xab, 0x74, 0x0f, 0x66, 0x77, 0x60,
	0x5a, 0x80, 0xc1, 0x8a, 0x3f, 0xd6, 0xfa, 0x2f, 0xdb, 0xa7, 0xa1, 0xfb, 0x00, 0xfd, 0xe7, 0xfb,
	0x6f, 0xb0, 0x5e, 0x39, 0xd3, 0x5a, 0xf9, 0x68, 0xa6, 0x8d, 0x80, 0x96, 0x7f, 0x03, 0xab, 0x93,
	0x83, 0xad, 0xb5, 0x0f, 0xc2, 0x77, 0x02, 0x5a, 0xf8, 0xbf, 0x06, 0x34, 0x2b, 0xe6, 0x52, 0x4b,
	0xcf, 0x32, 0xd3, 0x9e, 0xf6, 0xe1, 0x55, 0x5c, 0x54, 0xde, 0x08, 0xd9, 0x37, 0x3a, 0xc4, 0x27,
	0x81, 0x8b, 0x21, 0xe0, 0x3f, 0x3a, 0x6b, 0x55, 0xd3, 0xad, 0x75, 0x0f, 0x67, 0x59, 0x0d, 0x68,
	0x71, 0xf7, 0x46, 0xb8, 0xca, 0xfb, 0xc1, 0xcb, 0x01, 0x2d, 0xeb, 0xdf, 0x08, 0x57, 0x78, 0x86,
	0xe9, 0xf6, 0x94, 0xdb, 0x57, 0xf0, 0xa0, 0x7b, 0xe1, 0x10, 0x7e, 0xba, 0xae, 0xf1, 0x2f, 0xde,
	0x13, 0x29, 0xec, 0xfd, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x28, 0x37, 0x26, 0xa9, 0xfa, 0x1b, 0x00,
	0x00,
}
