// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package identity is a generated protocol buffer package.

It is generated from these files:
	service.proto
	domain.proto
	user.proto
	create_domain.proto
	delete_domain.proto
	patch_domain.proto
	get_domain.proto
	list_domain.proto
	create_user.proto
	delete_user.proto
	patch_user.proto
	get_user.proto
	list_user.proto

It has these top-level messages:
	Domain
	User
	CreateDomainRequest
	CreateDomainResponse
	DeleteDomainRequest
	PatchDomainRequest
	PatchDomainResponse
	GetDomainRequest
	GetDomainResponse
	ListDomainRequest
	ListDomainResponse
	CreateUserRequest
	CreateUserResponse
	DeleteUserRequest
	PatchUserRequest
	PatchUserResponse
	GetUserRequest
	GetUserResponse
	ListUserRequest
	ListUserResponse
*/
package identity

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IdentityService service

type IdentityServiceClient interface {
	CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error)
	DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	PatchDomain(ctx context.Context, in *PatchDomainRequest, opts ...grpc.CallOption) (*PatchDomainResponse, error)
	GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*GetDomainResponse, error)
	ListDomain(ctx context.Context, in *ListDomainRequest, opts ...grpc.CallOption) (*ListDomainResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	PatchUser(ctx context.Context, in *PatchUserRequest, opts ...grpc.CallOption) (*PatchUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error)
}

type identityServiceClient struct {
	cc *grpc.ClientConn
}

func NewIdentityServiceClient(cc *grpc.ClientConn) IdentityServiceClient {
	return &identityServiceClient{cc}
}

func (c *identityServiceClient) CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error) {
	out := new(CreateDomainResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/CreateDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/DeleteDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) PatchDomain(ctx context.Context, in *PatchDomainRequest, opts ...grpc.CallOption) (*PatchDomainResponse, error) {
	out := new(PatchDomainResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/PatchDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*GetDomainResponse, error) {
	out := new(GetDomainResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/GetDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListDomain(ctx context.Context, in *ListDomainRequest, opts ...grpc.CallOption) (*ListDomainResponse, error) {
	out := new(ListDomainResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) PatchUser(ctx context.Context, in *PatchUserRequest, opts ...grpc.CallOption) (*PatchUserResponse, error) {
	out := new(PatchUserResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/PatchUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	out := new(ListUserResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IdentityService service

type IdentityServiceServer interface {
	CreateDomain(context.Context, *CreateDomainRequest) (*CreateDomainResponse, error)
	DeleteDomain(context.Context, *DeleteDomainRequest) (*google_protobuf.Empty, error)
	PatchDomain(context.Context, *PatchDomainRequest) (*PatchDomainResponse, error)
	GetDomain(context.Context, *GetDomainRequest) (*GetDomainResponse, error)
	ListDomain(context.Context, *ListDomainRequest) (*ListDomainResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*google_protobuf.Empty, error)
	PatchUser(context.Context, *PatchUserRequest) (*PatchUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error)
}

func RegisterIdentityServiceServer(s *grpc.Server, srv IdentityServiceServer) {
	s.RegisterService(&_IdentityService_serviceDesc, srv)
}

func _IdentityService_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/CreateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateDomain(ctx, req.(*CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/DeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).DeleteDomain(ctx, req.(*DeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_PatchDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).PatchDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/PatchDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).PatchDomain(ctx, req.(*PatchDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/GetDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetDomain(ctx, req.(*GetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListDomain(ctx, req.(*ListDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_PatchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).PatchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/PatchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).PatchUser(ctx, req.(*PatchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdentityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.identity.IdentityService",
	HandlerType: (*IdentityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDomain",
			Handler:    _IdentityService_CreateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _IdentityService_DeleteDomain_Handler,
		},
		{
			MethodName: "PatchDomain",
			Handler:    _IdentityService_PatchDomain_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _IdentityService_GetDomain_Handler,
		},
		{
			MethodName: "ListDomain",
			Handler:    _IdentityService_ListDomain_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _IdentityService_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _IdentityService_DeleteUser_Handler,
		},
		{
			MethodName: "PatchUser",
			Handler:    _IdentityService_PatchUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _IdentityService_GetUser_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _IdentityService_ListUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcd, 0x4e, 0xc3, 0x30,
	0x10, 0x84, 0x7b, 0x82, 0x76, 0x29, 0xb4, 0x04, 0x89, 0x43, 0x91, 0x38, 0xf4, 0x01, 0x9c, 0xfe,
	0xf0, 0x04, 0x50, 0x54, 0x21, 0x71, 0x40, 0x20, 0x0e, 0x20, 0x21, 0x94, 0xb6, 0x4b, 0x6a, 0x29,
	0x8d, 0x83, 0xbd, 0x41, 0x54, 0x3c, 0x38, 0x57, 0x14, 0x27, 0x4e, 0xdc, 0x1e, 0x88, 0x73, 0xcc,
	0x78, 0x76, 0xbe, 0xac, 0xc7, 0x70, 0xac, 0x50, 0x7e, 0xf1, 0x25, 0xb2, 0x44, 0x0a, 0x12, 0xde,
	0x65, 0xc0, 0xd9, 0x06, 0x29, 0xa0, 0x35, 0x8f, 0x43, 0xc5, 0xcc, 0x21, 0x5f, 0x61, 0x4c, 0x9c,
	0xb6, 0x83, 0x8b, 0x50, 0x88, 0x30, 0x42, 0x5f, 0xbb, 0x17, 0xe9, 0x87, 0x8f, 0x9b, 0x84, 0xb6,
	0xf9, 0xf0, 0xe0, 0x6c, 0x29, 0x31, 0x20, 0x7c, 0x5f, 0x89, 0x4d, 0xc0, 0x63, 0x23, 0xae, 0x30,
	0xc2, 0x7d, 0xd1, 0x4b, 0x02, 0x5a, 0xae, 0x77, 0xb5, 0x7e, 0x88, 0xb4, 0xab, 0x9c, 0x46, 0x5c,
	0xed, 0x4b, 0x05, 0x22, 0x55, 0x28, 0x8d, 0x54, 0x00, 0x2c, 0xa9, 0x9f, 0xc7, 0x5b, 0xca, 0x49,
	0x16, 0x6e, 0x7d, 0xf7, 0x74, 0x74, 0x25, 0x4c, 0x7e, 0xdb, 0xd0, 0xbb, 0x2b, 0xb6, 0x7c, 0xca,
	0xb7, 0xf6, 0x7e, 0xa0, 0x7b, 0xa3, 0x71, 0x33, 0xfd, 0x0b, 0xde, 0x94, 0xfd, 0x7f, 0x3b, 0xcc,
	0x76, 0x3f, 0xe2, 0x67, 0x8a, 0x8a, 0x06, 0x57, 0xcd, 0x86, 0x54, 0x22, 0x62, 0x85, 0xc3, 0x96,
	0xf7, 0x06, 0xdd, 0x99, 0x5e, 0xcc, 0x15, 0x6e, 0xbb, 0x0d, 0xfc, 0x9c, 0xe5, 0x7d, 0x31, 0xd3,
	0x17, 0xbb, 0xcd, 0xfa, 0x1a, 0xb6, 0xbc, 0x6f, 0x38, 0x7a, 0xc8, 0x2e, 0xa9, 0x48, 0x9f, 0xd4,
	0xa5, 0x5b, 0x66, 0x13, 0x3e, 0x6d, 0x34, 0x53, 0x2e, 0x26, 0xa1, 0x33, 0x47, 0x2a, 0xb8, 0xa3,
	0xba, 0x8c, 0xd2, 0x6a, 0xa8, 0xe3, 0x06, 0x13, 0x25, 0x33, 0x05, 0xb8, 0xe7, 0xca, 0x40, 0x6b,
	0x23, 0x2a, 0xaf, 0xa1, 0x4e, 0x9a, 0x8c, 0xd8, 0xd8, 0xbc, 0xdd, 0x67, 0x85, 0xb2, 0x1e, 0x5b,
	0x79, 0x9d, 0xb1, 0xf6, 0x48, 0x89, 0x7d, 0x01, 0xc8, 0x1f, 0x83, 0x1b, 0xb6, 0xf2, 0xd6, 0x3f,
	0x1b, 0x09, 0x1d, 0xdd, 0xaa, 0x4e, 0x1e, 0x39, 0x3d, 0x00, 0x3b, 0x78, 0xdc, 0x60, 0xa2, 0x5c,
	0x27, 0x82, 0xc3, 0x39, 0x92, 0x26, 0x32, 0x87, 0xf2, 0x6d, 0x9e, 0xef, 0xec, 0x2f, 0x69, 0x02,
	0xda, 0x59, 0x97, 0x1a, 0xe7, 0xbb, 0xb4, 0x6e, 0xf3, 0x46, 0xee, 0x03, 0x06, 0x78, 0x0d, 0xaf,
	0x6d, 0x73, 0xbc, 0x38, 0xd0, 0x17, 0x3e, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x6f, 0xd4,
	0x51, 0x96, 0x05, 0x00, 0x00,
}
