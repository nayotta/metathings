// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package identity

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IdentityService service

type IdentityServiceClient interface {
	CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error)
	DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	PatchDomain(ctx context.Context, in *PatchDomainRequest, opts ...grpc.CallOption) (*PatchDomainResponse, error)
	GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*GetDomainResponse, error)
	ListDomain(ctx context.Context, in *ListDomainRequest, opts ...grpc.CallOption) (*ListDomainResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	PatchUser(ctx context.Context, in *PatchUserRequest, opts ...grpc.CallOption) (*PatchUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	ListUserInGroup(ctx context.Context, in *ListUserInGroupRequest, opts ...grpc.CallOption) (*ListUserInGroupResponse, error)
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	PatchGroup(ctx context.Context, in *PatchGroupRequest, opts ...grpc.CallOption) (*PatchGroupResponse, error)
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	ListGroup(ctx context.Context, in *ListGroupRequest, opts ...grpc.CallOption) (*ListGroupResponse, error)
	AddUserToGroup(ctx context.Context, in *AddUserToGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	RemoveUserFromGroup(ctx context.Context, in *RemoveUserFromGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	CheckUserInGroup(ctx context.Context, in *CheckUserInGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	ListGroupForUser(ctx context.Context, in *ListGroupForUserRequest, opts ...grpc.CallOption) (*ListGroupForUserResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	PatchRole(ctx context.Context, in *PatchRoleRequest, opts ...grpc.CallOption) (*PatchRoleResponse, error)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error)
	ListRole(ctx context.Context, in *ListRoleRequest, opts ...grpc.CallOption) (*ListRoleResponse, error)
	AddRoleToGroupOnDomain(ctx context.Context, in *AddRoleToGroupOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	RemoveRoleFromGroupOnDomain(ctx context.Context, in *RemoveRoleFromGroupOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	CheckRoleInGroupOnDomain(ctx context.Context, in *CheckRoleInGroupOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	ListRoleInGroupOnDomain(ctx context.Context, in *ListRoleInGroupOnDomainRequest, opts ...grpc.CallOption) (*ListRoleInGroupOnDomainResponse, error)
	AddRoleToUserOnDomain(ctx context.Context, in *AddRoleToUserOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	RemoveRoleFromUserOnDomain(ctx context.Context, in *RemoveRoleFromUserOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	CheckRoleInUserOnDomain(ctx context.Context, in *CheckRoleInUserOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	ListRoleInUserOnDomain(ctx context.Context, in *ListRoleInUserOnDomainRequest, opts ...grpc.CallOption) (*ListRoleInUserOnDomainResponse, error)
}

type identityServiceClient struct {
	cc *grpc.ClientConn
}

func NewIdentityServiceClient(cc *grpc.ClientConn) IdentityServiceClient {
	return &identityServiceClient{cc}
}

func (c *identityServiceClient) CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error) {
	out := new(CreateDomainResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/CreateDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/DeleteDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) PatchDomain(ctx context.Context, in *PatchDomainRequest, opts ...grpc.CallOption) (*PatchDomainResponse, error) {
	out := new(PatchDomainResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/PatchDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*GetDomainResponse, error) {
	out := new(GetDomainResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/GetDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListDomain(ctx context.Context, in *ListDomainRequest, opts ...grpc.CallOption) (*ListDomainResponse, error) {
	out := new(ListDomainResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) PatchUser(ctx context.Context, in *PatchUserRequest, opts ...grpc.CallOption) (*PatchUserResponse, error) {
	out := new(PatchUserResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/PatchUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	out := new(ListUserResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ChangePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListUserInGroup(ctx context.Context, in *ListUserInGroupRequest, opts ...grpc.CallOption) (*ListUserInGroupResponse, error) {
	out := new(ListUserInGroupResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListUserInGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/DeleteGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) PatchGroup(ctx context.Context, in *PatchGroupRequest, opts ...grpc.CallOption) (*PatchGroupResponse, error) {
	out := new(PatchGroupResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/PatchGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/GetGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListGroup(ctx context.Context, in *ListGroupRequest, opts ...grpc.CallOption) (*ListGroupResponse, error) {
	out := new(ListGroupResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) AddUserToGroup(ctx context.Context, in *AddUserToGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/AddUserToGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RemoveUserFromGroup(ctx context.Context, in *RemoveUserFromGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/RemoveUserFromGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CheckUserInGroup(ctx context.Context, in *CheckUserInGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/CheckUserInGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListGroupForUser(ctx context.Context, in *ListGroupForUserRequest, opts ...grpc.CallOption) (*ListGroupForUserResponse, error) {
	out := new(ListGroupForUserResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListGroupForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/CreateRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/DeleteRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) PatchRole(ctx context.Context, in *PatchRoleRequest, opts ...grpc.CallOption) (*PatchRoleResponse, error) {
	out := new(PatchRoleResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/PatchRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/GetRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListRole(ctx context.Context, in *ListRoleRequest, opts ...grpc.CallOption) (*ListRoleResponse, error) {
	out := new(ListRoleResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) AddRoleToGroupOnDomain(ctx context.Context, in *AddRoleToGroupOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/AddRoleToGroupOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RemoveRoleFromGroupOnDomain(ctx context.Context, in *RemoveRoleFromGroupOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/RemoveRoleFromGroupOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CheckRoleInGroupOnDomain(ctx context.Context, in *CheckRoleInGroupOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/CheckRoleInGroupOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListRoleInGroupOnDomain(ctx context.Context, in *ListRoleInGroupOnDomainRequest, opts ...grpc.CallOption) (*ListRoleInGroupOnDomainResponse, error) {
	out := new(ListRoleInGroupOnDomainResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListRoleInGroupOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) AddRoleToUserOnDomain(ctx context.Context, in *AddRoleToUserOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/AddRoleToUserOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RemoveRoleFromUserOnDomain(ctx context.Context, in *RemoveRoleFromUserOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/RemoveRoleFromUserOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CheckRoleInUserOnDomain(ctx context.Context, in *CheckRoleInUserOnDomainRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/CheckRoleInUserOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListRoleInUserOnDomain(ctx context.Context, in *ListRoleInUserOnDomainRequest, opts ...grpc.CallOption) (*ListRoleInUserOnDomainResponse, error) {
	out := new(ListRoleInUserOnDomainResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identity.IdentityService/ListRoleInUserOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IdentityService service

type IdentityServiceServer interface {
	CreateDomain(context.Context, *CreateDomainRequest) (*CreateDomainResponse, error)
	DeleteDomain(context.Context, *DeleteDomainRequest) (*google_protobuf2.Empty, error)
	PatchDomain(context.Context, *PatchDomainRequest) (*PatchDomainResponse, error)
	GetDomain(context.Context, *GetDomainRequest) (*GetDomainResponse, error)
	ListDomain(context.Context, *ListDomainRequest) (*ListDomainResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*google_protobuf2.Empty, error)
	PatchUser(context.Context, *PatchUserRequest) (*PatchUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*google_protobuf2.Empty, error)
	ListUserInGroup(context.Context, *ListUserInGroupRequest) (*ListUserInGroupResponse, error)
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*google_protobuf2.Empty, error)
	PatchGroup(context.Context, *PatchGroupRequest) (*PatchGroupResponse, error)
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	ListGroup(context.Context, *ListGroupRequest) (*ListGroupResponse, error)
	AddUserToGroup(context.Context, *AddUserToGroupRequest) (*google_protobuf2.Empty, error)
	RemoveUserFromGroup(context.Context, *RemoveUserFromGroupRequest) (*google_protobuf2.Empty, error)
	CheckUserInGroup(context.Context, *CheckUserInGroupRequest) (*google_protobuf2.Empty, error)
	ListGroupForUser(context.Context, *ListGroupForUserRequest) (*ListGroupForUserResponse, error)
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*google_protobuf2.Empty, error)
	PatchRole(context.Context, *PatchRoleRequest) (*PatchRoleResponse, error)
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
	ListRole(context.Context, *ListRoleRequest) (*ListRoleResponse, error)
	AddRoleToGroupOnDomain(context.Context, *AddRoleToGroupOnDomainRequest) (*google_protobuf2.Empty, error)
	RemoveRoleFromGroupOnDomain(context.Context, *RemoveRoleFromGroupOnDomainRequest) (*google_protobuf2.Empty, error)
	CheckRoleInGroupOnDomain(context.Context, *CheckRoleInGroupOnDomainRequest) (*google_protobuf2.Empty, error)
	ListRoleInGroupOnDomain(context.Context, *ListRoleInGroupOnDomainRequest) (*ListRoleInGroupOnDomainResponse, error)
	AddRoleToUserOnDomain(context.Context, *AddRoleToUserOnDomainRequest) (*google_protobuf2.Empty, error)
	RemoveRoleFromUserOnDomain(context.Context, *RemoveRoleFromUserOnDomainRequest) (*google_protobuf2.Empty, error)
	CheckRoleInUserOnDomain(context.Context, *CheckRoleInUserOnDomainRequest) (*google_protobuf2.Empty, error)
	ListRoleInUserOnDomain(context.Context, *ListRoleInUserOnDomainRequest) (*ListRoleInUserOnDomainResponse, error)
}

func RegisterIdentityServiceServer(s *grpc.Server, srv IdentityServiceServer) {
	s.RegisterService(&_IdentityService_serviceDesc, srv)
}

func _IdentityService_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/CreateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateDomain(ctx, req.(*CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/DeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).DeleteDomain(ctx, req.(*DeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_PatchDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).PatchDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/PatchDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).PatchDomain(ctx, req.(*PatchDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/GetDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetDomain(ctx, req.(*GetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListDomain(ctx, req.(*ListDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_PatchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).PatchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/PatchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).PatchUser(ctx, req.(*PatchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListUserInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserInGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListUserInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListUserInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListUserInGroup(ctx, req.(*ListUserInGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_PatchGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).PatchGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/PatchGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).PatchGroup(ctx, req.(*PatchGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListGroup(ctx, req.(*ListGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_AddUserToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).AddUserToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/AddUserToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).AddUserToGroup(ctx, req.(*AddUserToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RemoveUserFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RemoveUserFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/RemoveUserFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RemoveUserFromGroup(ctx, req.(*RemoveUserFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CheckUserInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserInGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CheckUserInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/CheckUserInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CheckUserInGroup(ctx, req.(*CheckUserInGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListGroupForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListGroupForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListGroupForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListGroupForUser(ctx, req.(*ListGroupForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_PatchRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).PatchRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/PatchRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).PatchRole(ctx, req.(*PatchRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListRole(ctx, req.(*ListRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_AddRoleToGroupOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleToGroupOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).AddRoleToGroupOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/AddRoleToGroupOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).AddRoleToGroupOnDomain(ctx, req.(*AddRoleToGroupOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RemoveRoleFromGroupOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromGroupOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RemoveRoleFromGroupOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/RemoveRoleFromGroupOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RemoveRoleFromGroupOnDomain(ctx, req.(*RemoveRoleFromGroupOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CheckRoleInGroupOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRoleInGroupOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CheckRoleInGroupOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/CheckRoleInGroupOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CheckRoleInGroupOnDomain(ctx, req.(*CheckRoleInGroupOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListRoleInGroupOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleInGroupOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListRoleInGroupOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListRoleInGroupOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListRoleInGroupOnDomain(ctx, req.(*ListRoleInGroupOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_AddRoleToUserOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleToUserOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).AddRoleToUserOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/AddRoleToUserOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).AddRoleToUserOnDomain(ctx, req.(*AddRoleToUserOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RemoveRoleFromUserOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromUserOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RemoveRoleFromUserOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/RemoveRoleFromUserOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RemoveRoleFromUserOnDomain(ctx, req.(*RemoveRoleFromUserOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CheckRoleInUserOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRoleInUserOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CheckRoleInUserOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/CheckRoleInUserOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CheckRoleInUserOnDomain(ctx, req.(*CheckRoleInUserOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListRoleInUserOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleInUserOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListRoleInUserOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identity.IdentityService/ListRoleInUserOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListRoleInUserOnDomain(ctx, req.(*ListRoleInUserOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdentityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.identity.IdentityService",
	HandlerType: (*IdentityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDomain",
			Handler:    _IdentityService_CreateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _IdentityService_DeleteDomain_Handler,
		},
		{
			MethodName: "PatchDomain",
			Handler:    _IdentityService_PatchDomain_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _IdentityService_GetDomain_Handler,
		},
		{
			MethodName: "ListDomain",
			Handler:    _IdentityService_ListDomain_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _IdentityService_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _IdentityService_DeleteUser_Handler,
		},
		{
			MethodName: "PatchUser",
			Handler:    _IdentityService_PatchUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _IdentityService_GetUser_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _IdentityService_ListUser_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _IdentityService_ChangePassword_Handler,
		},
		{
			MethodName: "ListUserInGroup",
			Handler:    _IdentityService_ListUserInGroup_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _IdentityService_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _IdentityService_DeleteGroup_Handler,
		},
		{
			MethodName: "PatchGroup",
			Handler:    _IdentityService_PatchGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _IdentityService_GetGroup_Handler,
		},
		{
			MethodName: "ListGroup",
			Handler:    _IdentityService_ListGroup_Handler,
		},
		{
			MethodName: "AddUserToGroup",
			Handler:    _IdentityService_AddUserToGroup_Handler,
		},
		{
			MethodName: "RemoveUserFromGroup",
			Handler:    _IdentityService_RemoveUserFromGroup_Handler,
		},
		{
			MethodName: "CheckUserInGroup",
			Handler:    _IdentityService_CheckUserInGroup_Handler,
		},
		{
			MethodName: "ListGroupForUser",
			Handler:    _IdentityService_ListGroupForUser_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _IdentityService_CreateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _IdentityService_DeleteRole_Handler,
		},
		{
			MethodName: "PatchRole",
			Handler:    _IdentityService_PatchRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _IdentityService_GetRole_Handler,
		},
		{
			MethodName: "ListRole",
			Handler:    _IdentityService_ListRole_Handler,
		},
		{
			MethodName: "AddRoleToGroupOnDomain",
			Handler:    _IdentityService_AddRoleToGroupOnDomain_Handler,
		},
		{
			MethodName: "RemoveRoleFromGroupOnDomain",
			Handler:    _IdentityService_RemoveRoleFromGroupOnDomain_Handler,
		},
		{
			MethodName: "CheckRoleInGroupOnDomain",
			Handler:    _IdentityService_CheckRoleInGroupOnDomain_Handler,
		},
		{
			MethodName: "ListRoleInGroupOnDomain",
			Handler:    _IdentityService_ListRoleInGroupOnDomain_Handler,
		},
		{
			MethodName: "AddRoleToUserOnDomain",
			Handler:    _IdentityService_AddRoleToUserOnDomain_Handler,
		},
		{
			MethodName: "RemoveRoleFromUserOnDomain",
			Handler:    _IdentityService_RemoveRoleFromUserOnDomain_Handler,
		},
		{
			MethodName: "CheckRoleInUserOnDomain",
			Handler:    _IdentityService_CheckRoleInUserOnDomain_Handler,
		},
		{
			MethodName: "ListRoleInUserOnDomain",
			Handler:    _IdentityService_ListRoleInUserOnDomain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor37) }

var fileDescriptor37 = []byte{
	// 922 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0x5b, 0x4f, 0x1b, 0x39,
	0x14, 0xc7, 0xc9, 0xcb, 0x2e, 0x18, 0x96, 0x84, 0x41, 0xdc, 0xc2, 0x0a, 0x2d, 0x59, 0xed, 0x3e,
	0x4e, 0x6e, 0x6d, 0xa9, 0xaa, 0x02, 0xe2, 0x52, 0x22, 0xa4, 0x4a, 0x45, 0xb4, 0x7d, 0x68, 0xab,
	0x2a, 0x1a, 0x32, 0x26, 0x19, 0x91, 0x8c, 0xc3, 0xcc, 0x84, 0x82, 0x78, 0xad, 0xd4, 0xcf, 0x50,
	0xa9, 0x5f, 0xb5, 0x52, 0xe5, 0x6b, 0x8e, 0x93, 0xa1, 0xb6, 0x79, 0xcc, 0xc9, 0xff, 0xef, 0xdf,
	0xb1, 0xcf, 0x39, 0xf6, 0xa0, 0xbf, 0x52, 0x9c, 0xdc, 0x44, 0x1d, 0xec, 0x0f, 0x13, 0x92, 0x11,
	0x6f, 0x2b, 0x88, 0xfc, 0x01, 0xce, 0x82, 0xac, 0x17, 0xc5, 0xdd, 0xd4, 0x97, 0x7f, 0x46, 0x21,
	0x8e, 0xb3, 0x28, 0xbb, 0x2b, 0x6f, 0x76, 0x09, 0xe9, 0xf6, 0x71, 0x95, 0xa9, 0x2f, 0x46, 0x97,
	0x55, 0x3c, 0x18, 0x66, 0x77, 0xdc, 0x5c, 0x5e, 0xee, 0x24, 0x38, 0xc8, 0x70, 0x3b, 0x24, 0x83,
	0x20, 0x8a, 0x65, 0x30, 0xc4, 0x7d, 0x3c, 0x19, 0xf4, 0x86, 0x41, 0xd6, 0xe9, 0xe9, 0xb1, 0x52,
	0x17, 0x67, 0x7a, 0x64, 0xa9, 0x1f, 0xa5, 0x93, 0x21, 0x81, 0x18, 0xa5, 0x38, 0x91, 0x21, 0x01,
	0x00, 0xa1, 0x12, 0x5f, 0x1e, 0x44, 0x16, 0xe9, 0xe2, 0xe0, 0x77, 0x91, 0x2d, 0x0d, 0x02, 0x2b,
	0x9d, 0x5e, 0x10, 0x77, 0x71, 0x7b, 0x18, 0xa4, 0xe9, 0x17, 0x92, 0x84, 0x22, 0xbc, 0xae, 0x74,
	0xed, 0x28, 0x6e, 0x77, 0x13, 0x32, 0x1a, 0xca, 0x2d, 0x88, 0x4c, 0xb4, 0x98, 0x48, 0x05, 0xc6,
	0x96, 0x78, 0x2e, 0x30, 0x54, 0xa4, 0xc9, 0xc0, 0x40, 0x89, 0x51, 0x60, 0x64, 0x2d, 0x08, 0x43,
	0x8e, 0xcd, 0x88, 0xf6, 0xc7, 0xdf, 0x09, 0x1e, 0x90, 0x1b, 0xbe, 0xdb, 0xf6, 0x65, 0x42, 0x06,
	0xda, 0xbf, 0x1b, 0x9d, 0x1e, 0xee, 0x5c, 0xe5, 0xe6, 0xbb, 0x31, 0x66, 0xb4, 0x2f, 0x49, 0xa2,
	0x9d, 0xa0, 0xd8, 0x4a, 0x42, 0xfa, 0x78, 0xe2, 0x50, 0x41, 0x48, 0x1c, 0x2a, 0x88, 0xb0, 0x43,
	0x05, 0xbf, 0xf9, 0xa1, 0x82, 0xc0, 0x36, 0xdd, 0x05, 0xfd, 0xad, 0x76, 0xd1, 0x26, 0xb1, 0x5e,
	0xd0, 0xff, 0xc5, 0x7e, 0x98, 0x6a, 0xbc, 0x9f, 0x29, 0xdd, 0xbf, 0x7c, 0x67, 0x4c, 0x26, 0x77,
	0x36, 0x25, 0xaa, 0xa8, 0x04, 0x1e, 0xd6, 0xfc, 0x03, 0x73, 0x62, 0x07, 0x35, 0xa9, 0xf8, 0x6f,
	0x2a, 0xa5, 0x5c, 0x59, 0x45, 0xcf, 0x28, 0x57, 0xb3, 0xad, 0x25, 0x94, 0x27, 0x69, 0xfc, 0xdc,
	0x42, 0xc5, 0x53, 0x31, 0x5e, 0x6f, 0xf9, 0xb8, 0x79, 0xf7, 0x68, 0xe1, 0x88, 0x95, 0xe4, 0x98,
	0x29, 0xbd, 0xa6, 0xff, 0xfb, 0xb1, 0xf4, 0xa1, 0xfa, 0x1c, 0x5f, 0x8f, 0x70, 0x9a, 0x95, 0x9f,
	0xb8, 0x99, 0xd2, 0x21, 0x89, 0x53, 0x5c, 0x99, 0xf1, 0x3e, 0xa3, 0x85, 0x63, 0x56, 0x7c, 0x5b,
	0x38, 0x54, 0x4b, 0xf8, 0xaa, 0xcf, 0x2f, 0x0a, 0x5f, 0x5e, 0x14, 0xfe, 0x2b, 0x7a, 0x51, 0x54,
	0x66, 0xbc, 0x5b, 0x34, 0x7f, 0x46, 0x1b, 0x49, 0xac, 0xde, 0x30, 0xad, 0x0e, 0xc4, 0x72, 0xf1,
	0xa6, 0x93, 0x47, 0x6d, 0x2c, 0x41, 0x73, 0x2d, 0x9c, 0x09, 0x6e, 0xcd, 0xb4, 0x86, 0x92, 0x4a,
	0x6a, 0xdd, 0xc1, 0xa1, 0x98, 0x23, 0x84, 0x5e, 0x47, 0xa9, 0x84, 0x1a, 0x97, 0x18, 0x6b, 0x25,
	0xb5, 0xe1, 0x62, 0x81, 0x58, 0x5e, 0xdd, 0xf7, 0x29, 0x4e, 0xcc, 0xd8, 0xb1, 0xd6, 0x1a, 0x0b,
	0x2d, 0x0a, 0xfb, 0x01, 0x21, 0xde, 0x0c, 0x76, 0xd8, 0xb1, 0xd6, 0xdc, 0x36, 0x09, 0x9a, 0x63,
	0x55, 0x65, 0x2b, 0xd7, 0xac, 0x1a, 0x00, 0x2e, 0x5c, 0x77, 0x70, 0xa8, 0xed, 0xf4, 0xd1, 0x9f,
	0x2d, 0x9c, 0x31, 0xa2, 0x6f, 0x51, 0x7c, 0xc8, 0xab, 0x5a, 0xeb, 0x15, 0x8d, 0xa0, 0x59, 0x5a,
	0x4b, 0x86, 0xab, 0xda, 0x54, 0x1d, 0xf2, 0x6a, 0xf6, 0x06, 0x05, 0x0c, 0xd0, 0xe2, 0x11, 0x7b,
	0xf4, 0xce, 0xc4, 0x9b, 0xe7, 0x3d, 0x35, 0x56, 0x5d, 0xd3, 0x9b, 0xab, 0xf6, 0xb5, 0x80, 0x8a,
	0x92, 0x7c, 0x1a, 0xb7, 0xe8, 0x85, 0xec, 0x3d, 0xb3, 0x4d, 0x55, 0x18, 0x24, 0x65, 0xc7, 0xd9,
	0xa7, 0x76, 0x7a, 0x8b, 0xe6, 0x79, 0xbf, 0xf2, 0x0c, 0x2c, 0x9b, 0x5b, 0xa3, 0x37, 0x9d, 0x3c,
	0x8a, 0xfc, 0x09, 0xcd, 0xf3, 0x2e, 0xb7, 0x24, 0x03, 0xb1, 0xf9, 0x74, 0x47, 0x08, 0xb1, 0xb6,
	0xe5, 0x6b, 0xdb, 0xb5, 0xb8, 0xb6, 0x74, 0xc3, 0xc5, 0x02, 0x1b, 0xb5, 0x85, 0x33, 0x0e, 0xb5,
	0xe9, 0x73, 0x0d, 0x59, 0xb3, 0x37, 0xc0, 0x8b, 0x9b, 0xd6, 0x96, 0x13, 0xad, 0x3a, 0x5d, 0x43,
	0xd6, 0x1d, 0x1c, 0x70, 0x38, 0x0e, 0xc2, 0x90, 0xb6, 0xd3, 0x3b, 0xc2, 0xc1, 0xc6, 0xe1, 0xd0,
	0xf5, 0xe6, 0xf2, 0x5d, 0xa1, 0xe5, 0x73, 0xf6, 0xa5, 0x41, 0x5d, 0x27, 0x09, 0x19, 0x70, 0xce,
	0x0b, 0x13, 0x27, 0xc7, 0x64, 0x86, 0x61, 0x54, 0x3a, 0xa2, 0xdf, 0x2b, 0x70, 0x12, 0x77, 0xcc,
	0xe3, 0xae, 0x3b, 0xcc, 0x98, 0x6f, 0x05, 0x54, 0x52, 0xc7, 0x79, 0x42, 0x12, 0x76, 0x9b, 0xed,
	0x58, 0x17, 0x40, 0x38, 0x24, 0xe7, 0xb9, 0xbb, 0x71, 0xfa, 0x09, 0x3c, 0x27, 0x7d, 0x6c, 0xfb,
	0x04, 0x52, 0xad, 0xe3, 0x13, 0xc8, 0x2d, 0xd3, 0x4f, 0xa0, 0x1d, 0x76, 0xac, 0xb5, 0x7f, 0x02,
	0xd9, 0xca, 0x76, 0x4f, 0x20, 0x5c, 0xb8, 0xee, 0xe0, 0x98, 0x78, 0x02, 0x19, 0xd1, 0xe6, 0x09,
	0x84, 0xbc, 0xaa, 0xb5, 0x7e, 0xf2, 0x09, 0x64, 0x38, 0xab, 0x27, 0x10, 0xf2, 0x6a, 0xf6, 0x06,
	0x05, 0xbc, 0x46, 0xab, 0x07, 0x61, 0x48, 0x83, 0x62, 0x6a, 0xdf, 0xc4, 0xe2, 0x53, 0x6d, 0xd7,
	0x62, 0xda, 0x73, 0x7c, 0xe6, 0x2a, 0xde, 0xa3, 0x4d, 0x3e, 0xc0, 0xd4, 0xad, 0x06, 0x58, 0x71,
	0x0f, 0xed, 0xa6, 0x3f, 0xd7, 0x6c, 0xf3, 0x62, 0xac, 0xb3, 0x99, 0xa6, 0x76, 0x31, 0xd3, 0x8a,
	0xbc, 0x6f, 0x75, 0x1b, 0xe4, 0x38, 0xcd, 0xd8, 0x1f, 0x05, 0xb4, 0x26, 0x4f, 0x7f, 0x12, 0xbb,
	0x67, 0x5b, 0xb6, 0x07, 0xa8, 0xfb, 0x8f, 0xf6, 0x83, 0xb6, 0x5b, 0x51, 0xd5, 0xa4, 0xb7, 0x88,
	0xca, 0xed, 0xa5, 0x75, 0x13, 0x40, 0x9b, 0xf9, 0x3c, 0xee, 0x50, 0x59, 0x2f, 0xa3, 0x46, 0x3d,
	0x70, 0x6b, 0x01, 0x37, 0x74, 0x8a, 0xd6, 0x40, 0x1d, 0x35, 0xee, 0x9e, 0x43, 0x03, 0xb8, 0x41,
	0xbf, 0x17, 0xd0, 0xea, 0xb8, 0x0c, 0x1a, 0x74, 0xd7, 0xbe, 0x7c, 0x79, 0xcc, 0xbd, 0xc7, 0xda,
	0x65, 0xf1, 0x0f, 0xd1, 0xc7, 0x59, 0x29, 0xbe, 0xf8, 0x83, 0x65, 0xde, 0xfc, 0x15, 0x00, 0x00,
	0xff, 0xff, 0xd8, 0x9f, 0x17, 0x82, 0x15, 0x13, 0x00, 0x00,
}
