// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: service.proto

package evaluatord

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x20, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x64, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x23, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x67,
	0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xeb,
	0x11, 0x0a, 0x11, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x65, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x38, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x2e, 0x61, 0x69, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x35,
	0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x64, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x85, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x37, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x69,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x3e, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x6f, 0x72, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x54, 0x6f,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x1a, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x9d, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x3f, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x2e,
	0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x64,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x69, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x14, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x79, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3d, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x12, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x6f, 0x72, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x79, 0x0a, 0x0a, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12,
	0x33, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x31, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x69,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x79, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x12,
	0x33, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f,
	0x72, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x11,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x12, 0x3a, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x6f, 0x72, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x54,
	0x6f, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x12, 0x3f, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x30, 0x5a, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x61, 0x79, 0x6f, 0x74,
	0x74, 0x61, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x64, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_service_proto_goTypes = []interface{}{
	(*CreateEvaluatorRequest)(nil),            // 0: ai.metathings.service.evaluatord.CreateEvaluatorRequest
	(*DeleteEvaluatorRequest)(nil),            // 1: ai.metathings.service.evaluatord.DeleteEvaluatorRequest
	(*PatchEvaluatorRequest)(nil),             // 2: ai.metathings.service.evaluatord.PatchEvaluatorRequest
	(*GetEvaluatorRequest)(nil),               // 3: ai.metathings.service.evaluatord.GetEvaluatorRequest
	(*ListEvaluatorsRequest)(nil),             // 4: ai.metathings.service.evaluatord.ListEvaluatorsRequest
	(*AddSourcesToEvaluatorRequest)(nil),      // 5: ai.metathings.service.evaluatord.AddSourcesToEvaluatorRequest
	(*RemoveSourcesFromEvaluatorRequest)(nil), // 6: ai.metathings.service.evaluatord.RemoveSourcesFromEvaluatorRequest
	(*ListEvaluatorsBySourceRequest)(nil),     // 7: ai.metathings.service.evaluatord.ListEvaluatorsBySourceRequest
	(*ListTasksBySourceRequest)(nil),          // 8: ai.metathings.service.evaluatord.ListTasksBySourceRequest
	(*GetTaskRequest)(nil),                    // 9: ai.metathings.service.evaluatord.GetTaskRequest
	(*QueryStorageByDeviceRequest)(nil),       // 10: ai.metathings.service.evaluatord.QueryStorageByDeviceRequest
	(*CreateTimerRequest)(nil),                // 11: ai.metathings.service.evaluatord.CreateTimerRequest
	(*DeleteTimerRequest)(nil),                // 12: ai.metathings.service.evaluatord.DeleteTimerRequest
	(*PatchTimerRequest)(nil),                 // 13: ai.metathings.service.evaluatord.PatchTimerRequest
	(*GetTimerRequest)(nil),                   // 14: ai.metathings.service.evaluatord.GetTimerRequest
	(*ListTimersRequest)(nil),                 // 15: ai.metathings.service.evaluatord.ListTimersRequest
	(*AddConfigsToTimerRequest)(nil),          // 16: ai.metathings.service.evaluatord.AddConfigsToTimerRequest
	(*RemoveConfigsFromTimerRequest)(nil),     // 17: ai.metathings.service.evaluatord.RemoveConfigsFromTimerRequest
	(*CreateEvaluatorResponse)(nil),           // 18: ai.metathings.service.evaluatord.CreateEvaluatorResponse
	(*emptypb.Empty)(nil),                     // 19: google.protobuf.Empty
	(*PatchEvaluatorResponse)(nil),            // 20: ai.metathings.service.evaluatord.PatchEvaluatorResponse
	(*GetEvaluatorResponse)(nil),              // 21: ai.metathings.service.evaluatord.GetEvaluatorResponse
	(*ListEvaluatorsResponse)(nil),            // 22: ai.metathings.service.evaluatord.ListEvaluatorsResponse
	(*ListEvaluatorsBySourceResponse)(nil),    // 23: ai.metathings.service.evaluatord.ListEvaluatorsBySourceResponse
	(*ListTasksBySourceResponse)(nil),         // 24: ai.metathings.service.evaluatord.ListTasksBySourceResponse
	(*GetTaskResponse)(nil),                   // 25: ai.metathings.service.evaluatord.GetTaskResponse
	(*QueryStorageByDeviceResponse)(nil),      // 26: ai.metathings.service.evaluatord.QueryStorageByDeviceResponse
	(*CreateTimerResponse)(nil),               // 27: ai.metathings.service.evaluatord.CreateTimerResponse
	(*PatchTimerResponse)(nil),                // 28: ai.metathings.service.evaluatord.PatchTimerResponse
	(*GetTimerResponse)(nil),                  // 29: ai.metathings.service.evaluatord.GetTimerResponse
	(*ListTimersResponse)(nil),                // 30: ai.metathings.service.evaluatord.ListTimersResponse
}
var file_service_proto_depIdxs = []int32{
	0,  // 0: ai.metathings.service.evaluatord.EvaluatordService.CreateEvaluator:input_type -> ai.metathings.service.evaluatord.CreateEvaluatorRequest
	1,  // 1: ai.metathings.service.evaluatord.EvaluatordService.DeleteEvaluator:input_type -> ai.metathings.service.evaluatord.DeleteEvaluatorRequest
	2,  // 2: ai.metathings.service.evaluatord.EvaluatordService.PatchEvaluator:input_type -> ai.metathings.service.evaluatord.PatchEvaluatorRequest
	3,  // 3: ai.metathings.service.evaluatord.EvaluatordService.GetEvaluator:input_type -> ai.metathings.service.evaluatord.GetEvaluatorRequest
	4,  // 4: ai.metathings.service.evaluatord.EvaluatordService.ListEvaluators:input_type -> ai.metathings.service.evaluatord.ListEvaluatorsRequest
	5,  // 5: ai.metathings.service.evaluatord.EvaluatordService.AddSourcesToEvaluator:input_type -> ai.metathings.service.evaluatord.AddSourcesToEvaluatorRequest
	6,  // 6: ai.metathings.service.evaluatord.EvaluatordService.RemoveSourcesFromEvaluator:input_type -> ai.metathings.service.evaluatord.RemoveSourcesFromEvaluatorRequest
	7,  // 7: ai.metathings.service.evaluatord.EvaluatordService.ListEvaluatorsBySource:input_type -> ai.metathings.service.evaluatord.ListEvaluatorsBySourceRequest
	8,  // 8: ai.metathings.service.evaluatord.EvaluatordService.ListTasksBySource:input_type -> ai.metathings.service.evaluatord.ListTasksBySourceRequest
	9,  // 9: ai.metathings.service.evaluatord.EvaluatordService.GetTask:input_type -> ai.metathings.service.evaluatord.GetTaskRequest
	10, // 10: ai.metathings.service.evaluatord.EvaluatordService.QueryStorageByDevice:input_type -> ai.metathings.service.evaluatord.QueryStorageByDeviceRequest
	11, // 11: ai.metathings.service.evaluatord.EvaluatordService.CreateTimer:input_type -> ai.metathings.service.evaluatord.CreateTimerRequest
	12, // 12: ai.metathings.service.evaluatord.EvaluatordService.DeleteTimer:input_type -> ai.metathings.service.evaluatord.DeleteTimerRequest
	13, // 13: ai.metathings.service.evaluatord.EvaluatordService.PatchTimer:input_type -> ai.metathings.service.evaluatord.PatchTimerRequest
	14, // 14: ai.metathings.service.evaluatord.EvaluatordService.GetTimer:input_type -> ai.metathings.service.evaluatord.GetTimerRequest
	15, // 15: ai.metathings.service.evaluatord.EvaluatordService.ListTimers:input_type -> ai.metathings.service.evaluatord.ListTimersRequest
	16, // 16: ai.metathings.service.evaluatord.EvaluatordService.AddConfigsToTimer:input_type -> ai.metathings.service.evaluatord.AddConfigsToTimerRequest
	17, // 17: ai.metathings.service.evaluatord.EvaluatordService.RemoveConfigsFromTimer:input_type -> ai.metathings.service.evaluatord.RemoveConfigsFromTimerRequest
	18, // 18: ai.metathings.service.evaluatord.EvaluatordService.CreateEvaluator:output_type -> ai.metathings.service.evaluatord.CreateEvaluatorResponse
	19, // 19: ai.metathings.service.evaluatord.EvaluatordService.DeleteEvaluator:output_type -> google.protobuf.Empty
	20, // 20: ai.metathings.service.evaluatord.EvaluatordService.PatchEvaluator:output_type -> ai.metathings.service.evaluatord.PatchEvaluatorResponse
	21, // 21: ai.metathings.service.evaluatord.EvaluatordService.GetEvaluator:output_type -> ai.metathings.service.evaluatord.GetEvaluatorResponse
	22, // 22: ai.metathings.service.evaluatord.EvaluatordService.ListEvaluators:output_type -> ai.metathings.service.evaluatord.ListEvaluatorsResponse
	19, // 23: ai.metathings.service.evaluatord.EvaluatordService.AddSourcesToEvaluator:output_type -> google.protobuf.Empty
	19, // 24: ai.metathings.service.evaluatord.EvaluatordService.RemoveSourcesFromEvaluator:output_type -> google.protobuf.Empty
	23, // 25: ai.metathings.service.evaluatord.EvaluatordService.ListEvaluatorsBySource:output_type -> ai.metathings.service.evaluatord.ListEvaluatorsBySourceResponse
	24, // 26: ai.metathings.service.evaluatord.EvaluatordService.ListTasksBySource:output_type -> ai.metathings.service.evaluatord.ListTasksBySourceResponse
	25, // 27: ai.metathings.service.evaluatord.EvaluatordService.GetTask:output_type -> ai.metathings.service.evaluatord.GetTaskResponse
	26, // 28: ai.metathings.service.evaluatord.EvaluatordService.QueryStorageByDevice:output_type -> ai.metathings.service.evaluatord.QueryStorageByDeviceResponse
	27, // 29: ai.metathings.service.evaluatord.EvaluatordService.CreateTimer:output_type -> ai.metathings.service.evaluatord.CreateTimerResponse
	19, // 30: ai.metathings.service.evaluatord.EvaluatordService.DeleteTimer:output_type -> google.protobuf.Empty
	28, // 31: ai.metathings.service.evaluatord.EvaluatordService.PatchTimer:output_type -> ai.metathings.service.evaluatord.PatchTimerResponse
	29, // 32: ai.metathings.service.evaluatord.EvaluatordService.GetTimer:output_type -> ai.metathings.service.evaluatord.GetTimerResponse
	30, // 33: ai.metathings.service.evaluatord.EvaluatordService.ListTimers:output_type -> ai.metathings.service.evaluatord.ListTimersResponse
	19, // 34: ai.metathings.service.evaluatord.EvaluatordService.AddConfigsToTimer:output_type -> google.protobuf.Empty
	19, // 35: ai.metathings.service.evaluatord.EvaluatordService.RemoveConfigsFromTimer:output_type -> google.protobuf.Empty
	18, // [18:36] is the sub-list for method output_type
	0,  // [0:18] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	file_create_evaluator_proto_init()
	file_delete_evaluator_proto_init()
	file_patch_evaluator_proto_init()
	file_get_evaluator_proto_init()
	file_list_evaluators_proto_init()
	file_add_sources_to_evaluator_proto_init()
	file_remove_sources_from_evaluator_proto_init()
	file_list_evaluators_by_source_proto_init()
	file_list_tasks_by_source_proto_init()
	file_get_task_proto_init()
	file_query_storage_by_device_proto_init()
	file_create_timer_proto_init()
	file_delete_timer_proto_init()
	file_patch_timer_proto_init()
	file_get_timer_proto_init()
	file_list_timers_proto_init()
	file_add_configs_to_timer_proto_init()
	file_remove_configs_from_timer_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EvaluatordServiceClient is the client API for EvaluatordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EvaluatordServiceClient interface {
	CreateEvaluator(ctx context.Context, in *CreateEvaluatorRequest, opts ...grpc.CallOption) (*CreateEvaluatorResponse, error)
	DeleteEvaluator(ctx context.Context, in *DeleteEvaluatorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PatchEvaluator(ctx context.Context, in *PatchEvaluatorRequest, opts ...grpc.CallOption) (*PatchEvaluatorResponse, error)
	GetEvaluator(ctx context.Context, in *GetEvaluatorRequest, opts ...grpc.CallOption) (*GetEvaluatorResponse, error)
	ListEvaluators(ctx context.Context, in *ListEvaluatorsRequest, opts ...grpc.CallOption) (*ListEvaluatorsResponse, error)
	AddSourcesToEvaluator(ctx context.Context, in *AddSourcesToEvaluatorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveSourcesFromEvaluator(ctx context.Context, in *RemoveSourcesFromEvaluatorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListEvaluatorsBySource(ctx context.Context, in *ListEvaluatorsBySourceRequest, opts ...grpc.CallOption) (*ListEvaluatorsBySourceResponse, error)
	// Task
	ListTasksBySource(ctx context.Context, in *ListTasksBySourceRequest, opts ...grpc.CallOption) (*ListTasksBySourceResponse, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
	// Storage
	QueryStorageByDevice(ctx context.Context, in *QueryStorageByDeviceRequest, opts ...grpc.CallOption) (*QueryStorageByDeviceResponse, error)
	// Timer
	CreateTimer(ctx context.Context, in *CreateTimerRequest, opts ...grpc.CallOption) (*CreateTimerResponse, error)
	DeleteTimer(ctx context.Context, in *DeleteTimerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PatchTimer(ctx context.Context, in *PatchTimerRequest, opts ...grpc.CallOption) (*PatchTimerResponse, error)
	GetTimer(ctx context.Context, in *GetTimerRequest, opts ...grpc.CallOption) (*GetTimerResponse, error)
	ListTimers(ctx context.Context, in *ListTimersRequest, opts ...grpc.CallOption) (*ListTimersResponse, error)
	AddConfigsToTimer(ctx context.Context, in *AddConfigsToTimerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveConfigsFromTimer(ctx context.Context, in *RemoveConfigsFromTimerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type evaluatordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEvaluatordServiceClient(cc grpc.ClientConnInterface) EvaluatordServiceClient {
	return &evaluatordServiceClient{cc}
}

func (c *evaluatordServiceClient) CreateEvaluator(ctx context.Context, in *CreateEvaluatorRequest, opts ...grpc.CallOption) (*CreateEvaluatorResponse, error) {
	out := new(CreateEvaluatorResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/CreateEvaluator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) DeleteEvaluator(ctx context.Context, in *DeleteEvaluatorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/DeleteEvaluator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) PatchEvaluator(ctx context.Context, in *PatchEvaluatorRequest, opts ...grpc.CallOption) (*PatchEvaluatorResponse, error) {
	out := new(PatchEvaluatorResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/PatchEvaluator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) GetEvaluator(ctx context.Context, in *GetEvaluatorRequest, opts ...grpc.CallOption) (*GetEvaluatorResponse, error) {
	out := new(GetEvaluatorResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/GetEvaluator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) ListEvaluators(ctx context.Context, in *ListEvaluatorsRequest, opts ...grpc.CallOption) (*ListEvaluatorsResponse, error) {
	out := new(ListEvaluatorsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/ListEvaluators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) AddSourcesToEvaluator(ctx context.Context, in *AddSourcesToEvaluatorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/AddSourcesToEvaluator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) RemoveSourcesFromEvaluator(ctx context.Context, in *RemoveSourcesFromEvaluatorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/RemoveSourcesFromEvaluator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) ListEvaluatorsBySource(ctx context.Context, in *ListEvaluatorsBySourceRequest, opts ...grpc.CallOption) (*ListEvaluatorsBySourceResponse, error) {
	out := new(ListEvaluatorsBySourceResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/ListEvaluatorsBySource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) ListTasksBySource(ctx context.Context, in *ListTasksBySourceRequest, opts ...grpc.CallOption) (*ListTasksBySourceResponse, error) {
	out := new(ListTasksBySourceResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/ListTasksBySource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) QueryStorageByDevice(ctx context.Context, in *QueryStorageByDeviceRequest, opts ...grpc.CallOption) (*QueryStorageByDeviceResponse, error) {
	out := new(QueryStorageByDeviceResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/QueryStorageByDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) CreateTimer(ctx context.Context, in *CreateTimerRequest, opts ...grpc.CallOption) (*CreateTimerResponse, error) {
	out := new(CreateTimerResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/CreateTimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) DeleteTimer(ctx context.Context, in *DeleteTimerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/DeleteTimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) PatchTimer(ctx context.Context, in *PatchTimerRequest, opts ...grpc.CallOption) (*PatchTimerResponse, error) {
	out := new(PatchTimerResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/PatchTimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) GetTimer(ctx context.Context, in *GetTimerRequest, opts ...grpc.CallOption) (*GetTimerResponse, error) {
	out := new(GetTimerResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/GetTimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) ListTimers(ctx context.Context, in *ListTimersRequest, opts ...grpc.CallOption) (*ListTimersResponse, error) {
	out := new(ListTimersResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/ListTimers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) AddConfigsToTimer(ctx context.Context, in *AddConfigsToTimerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/AddConfigsToTimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) RemoveConfigsFromTimer(ctx context.Context, in *RemoveConfigsFromTimerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/RemoveConfigsFromTimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EvaluatordServiceServer is the server API for EvaluatordService service.
type EvaluatordServiceServer interface {
	CreateEvaluator(context.Context, *CreateEvaluatorRequest) (*CreateEvaluatorResponse, error)
	DeleteEvaluator(context.Context, *DeleteEvaluatorRequest) (*emptypb.Empty, error)
	PatchEvaluator(context.Context, *PatchEvaluatorRequest) (*PatchEvaluatorResponse, error)
	GetEvaluator(context.Context, *GetEvaluatorRequest) (*GetEvaluatorResponse, error)
	ListEvaluators(context.Context, *ListEvaluatorsRequest) (*ListEvaluatorsResponse, error)
	AddSourcesToEvaluator(context.Context, *AddSourcesToEvaluatorRequest) (*emptypb.Empty, error)
	RemoveSourcesFromEvaluator(context.Context, *RemoveSourcesFromEvaluatorRequest) (*emptypb.Empty, error)
	ListEvaluatorsBySource(context.Context, *ListEvaluatorsBySourceRequest) (*ListEvaluatorsBySourceResponse, error)
	// Task
	ListTasksBySource(context.Context, *ListTasksBySourceRequest) (*ListTasksBySourceResponse, error)
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	// Storage
	QueryStorageByDevice(context.Context, *QueryStorageByDeviceRequest) (*QueryStorageByDeviceResponse, error)
	// Timer
	CreateTimer(context.Context, *CreateTimerRequest) (*CreateTimerResponse, error)
	DeleteTimer(context.Context, *DeleteTimerRequest) (*emptypb.Empty, error)
	PatchTimer(context.Context, *PatchTimerRequest) (*PatchTimerResponse, error)
	GetTimer(context.Context, *GetTimerRequest) (*GetTimerResponse, error)
	ListTimers(context.Context, *ListTimersRequest) (*ListTimersResponse, error)
	AddConfigsToTimer(context.Context, *AddConfigsToTimerRequest) (*emptypb.Empty, error)
	RemoveConfigsFromTimer(context.Context, *RemoveConfigsFromTimerRequest) (*emptypb.Empty, error)
}

// UnimplementedEvaluatordServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEvaluatordServiceServer struct {
}

func (*UnimplementedEvaluatordServiceServer) CreateEvaluator(context.Context, *CreateEvaluatorRequest) (*CreateEvaluatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvaluator not implemented")
}
func (*UnimplementedEvaluatordServiceServer) DeleteEvaluator(context.Context, *DeleteEvaluatorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvaluator not implemented")
}
func (*UnimplementedEvaluatordServiceServer) PatchEvaluator(context.Context, *PatchEvaluatorRequest) (*PatchEvaluatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchEvaluator not implemented")
}
func (*UnimplementedEvaluatordServiceServer) GetEvaluator(context.Context, *GetEvaluatorRequest) (*GetEvaluatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluator not implemented")
}
func (*UnimplementedEvaluatordServiceServer) ListEvaluators(context.Context, *ListEvaluatorsRequest) (*ListEvaluatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvaluators not implemented")
}
func (*UnimplementedEvaluatordServiceServer) AddSourcesToEvaluator(context.Context, *AddSourcesToEvaluatorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSourcesToEvaluator not implemented")
}
func (*UnimplementedEvaluatordServiceServer) RemoveSourcesFromEvaluator(context.Context, *RemoveSourcesFromEvaluatorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSourcesFromEvaluator not implemented")
}
func (*UnimplementedEvaluatordServiceServer) ListEvaluatorsBySource(context.Context, *ListEvaluatorsBySourceRequest) (*ListEvaluatorsBySourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvaluatorsBySource not implemented")
}
func (*UnimplementedEvaluatordServiceServer) ListTasksBySource(context.Context, *ListTasksBySourceRequest) (*ListTasksBySourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasksBySource not implemented")
}
func (*UnimplementedEvaluatordServiceServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (*UnimplementedEvaluatordServiceServer) QueryStorageByDevice(context.Context, *QueryStorageByDeviceRequest) (*QueryStorageByDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStorageByDevice not implemented")
}
func (*UnimplementedEvaluatordServiceServer) CreateTimer(context.Context, *CreateTimerRequest) (*CreateTimerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTimer not implemented")
}
func (*UnimplementedEvaluatordServiceServer) DeleteTimer(context.Context, *DeleteTimerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTimer not implemented")
}
func (*UnimplementedEvaluatordServiceServer) PatchTimer(context.Context, *PatchTimerRequest) (*PatchTimerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchTimer not implemented")
}
func (*UnimplementedEvaluatordServiceServer) GetTimer(context.Context, *GetTimerRequest) (*GetTimerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimer not implemented")
}
func (*UnimplementedEvaluatordServiceServer) ListTimers(context.Context, *ListTimersRequest) (*ListTimersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTimers not implemented")
}
func (*UnimplementedEvaluatordServiceServer) AddConfigsToTimer(context.Context, *AddConfigsToTimerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddConfigsToTimer not implemented")
}
func (*UnimplementedEvaluatordServiceServer) RemoveConfigsFromTimer(context.Context, *RemoveConfigsFromTimerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveConfigsFromTimer not implemented")
}

func RegisterEvaluatordServiceServer(s *grpc.Server, srv EvaluatordServiceServer) {
	s.RegisterService(&_EvaluatordService_serviceDesc, srv)
}

func _EvaluatordService_CreateEvaluator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEvaluatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).CreateEvaluator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/CreateEvaluator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).CreateEvaluator(ctx, req.(*CreateEvaluatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_DeleteEvaluator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEvaluatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).DeleteEvaluator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/DeleteEvaluator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).DeleteEvaluator(ctx, req.(*DeleteEvaluatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_PatchEvaluator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchEvaluatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).PatchEvaluator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/PatchEvaluator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).PatchEvaluator(ctx, req.(*PatchEvaluatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_GetEvaluator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvaluatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).GetEvaluator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/GetEvaluator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).GetEvaluator(ctx, req.(*GetEvaluatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_ListEvaluators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEvaluatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).ListEvaluators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/ListEvaluators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).ListEvaluators(ctx, req.(*ListEvaluatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_AddSourcesToEvaluator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSourcesToEvaluatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).AddSourcesToEvaluator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/AddSourcesToEvaluator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).AddSourcesToEvaluator(ctx, req.(*AddSourcesToEvaluatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_RemoveSourcesFromEvaluator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSourcesFromEvaluatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).RemoveSourcesFromEvaluator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/RemoveSourcesFromEvaluator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).RemoveSourcesFromEvaluator(ctx, req.(*RemoveSourcesFromEvaluatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_ListEvaluatorsBySource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEvaluatorsBySourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).ListEvaluatorsBySource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/ListEvaluatorsBySource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).ListEvaluatorsBySource(ctx, req.(*ListEvaluatorsBySourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_ListTasksBySource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksBySourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).ListTasksBySource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/ListTasksBySource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).ListTasksBySource(ctx, req.(*ListTasksBySourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_QueryStorageByDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStorageByDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).QueryStorageByDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/QueryStorageByDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).QueryStorageByDevice(ctx, req.(*QueryStorageByDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_CreateTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTimerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).CreateTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/CreateTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).CreateTimer(ctx, req.(*CreateTimerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_DeleteTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTimerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).DeleteTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/DeleteTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).DeleteTimer(ctx, req.(*DeleteTimerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_PatchTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchTimerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).PatchTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/PatchTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).PatchTimer(ctx, req.(*PatchTimerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_GetTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).GetTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/GetTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).GetTimer(ctx, req.(*GetTimerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_ListTimers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTimersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).ListTimers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/ListTimers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).ListTimers(ctx, req.(*ListTimersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_AddConfigsToTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConfigsToTimerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).AddConfigsToTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/AddConfigsToTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).AddConfigsToTimer(ctx, req.(*AddConfigsToTimerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_RemoveConfigsFromTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveConfigsFromTimerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).RemoveConfigsFromTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/RemoveConfigsFromTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).RemoveConfigsFromTimer(ctx, req.(*RemoveConfigsFromTimerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EvaluatordService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.evaluatord.EvaluatordService",
	HandlerType: (*EvaluatordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvaluator",
			Handler:    _EvaluatordService_CreateEvaluator_Handler,
		},
		{
			MethodName: "DeleteEvaluator",
			Handler:    _EvaluatordService_DeleteEvaluator_Handler,
		},
		{
			MethodName: "PatchEvaluator",
			Handler:    _EvaluatordService_PatchEvaluator_Handler,
		},
		{
			MethodName: "GetEvaluator",
			Handler:    _EvaluatordService_GetEvaluator_Handler,
		},
		{
			MethodName: "ListEvaluators",
			Handler:    _EvaluatordService_ListEvaluators_Handler,
		},
		{
			MethodName: "AddSourcesToEvaluator",
			Handler:    _EvaluatordService_AddSourcesToEvaluator_Handler,
		},
		{
			MethodName: "RemoveSourcesFromEvaluator",
			Handler:    _EvaluatordService_RemoveSourcesFromEvaluator_Handler,
		},
		{
			MethodName: "ListEvaluatorsBySource",
			Handler:    _EvaluatordService_ListEvaluatorsBySource_Handler,
		},
		{
			MethodName: "ListTasksBySource",
			Handler:    _EvaluatordService_ListTasksBySource_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _EvaluatordService_GetTask_Handler,
		},
		{
			MethodName: "QueryStorageByDevice",
			Handler:    _EvaluatordService_QueryStorageByDevice_Handler,
		},
		{
			MethodName: "CreateTimer",
			Handler:    _EvaluatordService_CreateTimer_Handler,
		},
		{
			MethodName: "DeleteTimer",
			Handler:    _EvaluatordService_DeleteTimer_Handler,
		},
		{
			MethodName: "PatchTimer",
			Handler:    _EvaluatordService_PatchTimer_Handler,
		},
		{
			MethodName: "GetTimer",
			Handler:    _EvaluatordService_GetTimer_Handler,
		},
		{
			MethodName: "ListTimers",
			Handler:    _EvaluatordService_ListTimers_Handler,
		},
		{
			MethodName: "AddConfigsToTimer",
			Handler:    _EvaluatordService_AddConfigsToTimer_Handler,
		},
		{
			MethodName: "RemoveConfigsFromTimer",
			Handler:    _EvaluatordService_RemoveConfigsFromTimer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
