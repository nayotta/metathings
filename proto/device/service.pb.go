// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: service.proto

package device

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1c, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x10, 0x70, 0x75, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x75, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x67, 0x65, 0x74,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x32, 0xe4, 0x0c, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x10, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35, 0x2e, 0x61, 0x69,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0a,
	0x53, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x12, 0x2e, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x84, 0x01,
	0x0a, 0x0f, 0x50, 0x75, 0x73, 0x68, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x46, 0x6c, 0x6f,
	0x77, 0x12, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x75, 0x73, 0x68, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x69, 0x0a, 0x13, 0x50, 0x75, 0x73, 0x68, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x77, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x2e, 0x61, 0x69,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x77, 0x4f, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x09, 0x50, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2e, 0x2e, 0x61,
	0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x12, 0x50, 0x75, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x2e,
	0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x5b, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x31, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0c, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x31, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x6e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2e, 0x2e,
	0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x83, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61,
	0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9e, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a,
	0x1c, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x42, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x61, 0x79, 0x6f, 0x74, 0x74,
	0x61, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var file_service_proto_goTypes = []interface{}{
	(*IssueModuleTokenRequest)(nil),              // 0: ai.metathings.service.device.IssueModuleTokenRequest
	(*emptypb.Empty)(nil),                        // 1: google.protobuf.Empty
	(*HeartbeatRequest)(nil),                     // 2: ai.metathings.service.device.HeartbeatRequest
	(*PushFrameToFlowRequest)(nil),               // 3: ai.metathings.service.device.PushFrameToFlowRequest
	(*PushFrameToFlowOnceRequest)(nil),           // 4: ai.metathings.service.device.PushFrameToFlowOnceRequest
	(*PutObjectRequest)(nil),                     // 5: ai.metathings.service.device.PutObjectRequest
	(*PutObjectStreamingRequest)(nil),            // 6: ai.metathings.service.device.PutObjectStreamingRequest
	(*RemoveObjectRequest)(nil),                  // 7: ai.metathings.service.device.RemoveObjectRequest
	(*RenameObjectRequest)(nil),                  // 8: ai.metathings.service.device.RenameObjectRequest
	(*GetObjectRequest)(nil),                     // 9: ai.metathings.service.device.GetObjectRequest
	(*GetObjectContentRequest)(nil),              // 10: ai.metathings.service.device.GetObjectContentRequest
	(*GetObjectStreamingContentRequest)(nil),     // 11: ai.metathings.service.device.GetObjectStreamingContentRequest
	(*ListObjectsRequest)(nil),                   // 12: ai.metathings.service.device.ListObjectsRequest
	(*IssueModuleTokenResponse)(nil),             // 13: ai.metathings.service.device.IssueModuleTokenResponse
	(*ShowModuleResponse)(nil),                   // 14: ai.metathings.service.device.ShowModuleResponse
	(*PushFrameToFlowResponse)(nil),              // 15: ai.metathings.service.device.PushFrameToFlowResponse
	(*PutObjectStreamingResponse)(nil),           // 16: ai.metathings.service.device.PutObjectStreamingResponse
	(*GetObjectResponse)(nil),                    // 17: ai.metathings.service.device.GetObjectResponse
	(*GetObjectContentResponse)(nil),             // 18: ai.metathings.service.device.GetObjectContentResponse
	(*GetObjectStreamingContentResponse)(nil),    // 19: ai.metathings.service.device.GetObjectStreamingContentResponse
	(*ListObjectsResponse)(nil),                  // 20: ai.metathings.service.device.ListObjectsResponse
	(*ShowModuleFirmwareDescriptorResponse)(nil), // 21: ai.metathings.service.device.ShowModuleFirmwareDescriptorResponse
}
var file_service_proto_depIdxs = []int32{
	0,  // 0: ai.metathings.service.device.DeviceService.IssueModuleToken:input_type -> ai.metathings.service.device.IssueModuleTokenRequest
	1,  // 1: ai.metathings.service.device.DeviceService.ShowModule:input_type -> google.protobuf.Empty
	2,  // 2: ai.metathings.service.device.DeviceService.Heartbeat:input_type -> ai.metathings.service.device.HeartbeatRequest
	3,  // 3: ai.metathings.service.device.DeviceService.PushFrameToFlow:input_type -> ai.metathings.service.device.PushFrameToFlowRequest
	4,  // 4: ai.metathings.service.device.DeviceService.PushFrameToFlowOnce:input_type -> ai.metathings.service.device.PushFrameToFlowOnceRequest
	5,  // 5: ai.metathings.service.device.DeviceService.PutObject:input_type -> ai.metathings.service.device.PutObjectRequest
	6,  // 6: ai.metathings.service.device.DeviceService.PutObjectStreaming:input_type -> ai.metathings.service.device.PutObjectStreamingRequest
	7,  // 7: ai.metathings.service.device.DeviceService.RemoveObject:input_type -> ai.metathings.service.device.RemoveObjectRequest
	8,  // 8: ai.metathings.service.device.DeviceService.RenameObject:input_type -> ai.metathings.service.device.RenameObjectRequest
	9,  // 9: ai.metathings.service.device.DeviceService.GetObject:input_type -> ai.metathings.service.device.GetObjectRequest
	10, // 10: ai.metathings.service.device.DeviceService.GetObjectContent:input_type -> ai.metathings.service.device.GetObjectContentRequest
	11, // 11: ai.metathings.service.device.DeviceService.GetObjectStreamingContent:input_type -> ai.metathings.service.device.GetObjectStreamingContentRequest
	12, // 12: ai.metathings.service.device.DeviceService.ListObjects:input_type -> ai.metathings.service.device.ListObjectsRequest
	1,  // 13: ai.metathings.service.device.DeviceService.ShowModuleFirmwareDescriptor:input_type -> google.protobuf.Empty
	13, // 14: ai.metathings.service.device.DeviceService.IssueModuleToken:output_type -> ai.metathings.service.device.IssueModuleTokenResponse
	14, // 15: ai.metathings.service.device.DeviceService.ShowModule:output_type -> ai.metathings.service.device.ShowModuleResponse
	1,  // 16: ai.metathings.service.device.DeviceService.Heartbeat:output_type -> google.protobuf.Empty
	15, // 17: ai.metathings.service.device.DeviceService.PushFrameToFlow:output_type -> ai.metathings.service.device.PushFrameToFlowResponse
	1,  // 18: ai.metathings.service.device.DeviceService.PushFrameToFlowOnce:output_type -> google.protobuf.Empty
	1,  // 19: ai.metathings.service.device.DeviceService.PutObject:output_type -> google.protobuf.Empty
	16, // 20: ai.metathings.service.device.DeviceService.PutObjectStreaming:output_type -> ai.metathings.service.device.PutObjectStreamingResponse
	1,  // 21: ai.metathings.service.device.DeviceService.RemoveObject:output_type -> google.protobuf.Empty
	1,  // 22: ai.metathings.service.device.DeviceService.RenameObject:output_type -> google.protobuf.Empty
	17, // 23: ai.metathings.service.device.DeviceService.GetObject:output_type -> ai.metathings.service.device.GetObjectResponse
	18, // 24: ai.metathings.service.device.DeviceService.GetObjectContent:output_type -> ai.metathings.service.device.GetObjectContentResponse
	19, // 25: ai.metathings.service.device.DeviceService.GetObjectStreamingContent:output_type -> ai.metathings.service.device.GetObjectStreamingContentResponse
	20, // 26: ai.metathings.service.device.DeviceService.ListObjects:output_type -> ai.metathings.service.device.ListObjectsResponse
	21, // 27: ai.metathings.service.device.DeviceService.ShowModuleFirmwareDescriptor:output_type -> ai.metathings.service.device.ShowModuleFirmwareDescriptorResponse
	14, // [14:28] is the sub-list for method output_type
	0,  // [0:14] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	file_issue_module_token_proto_init()
	file_show_module_proto_init()
	file_heartbeat_proto_init()
	file_push_frame_to_flow_proto_init()
	file_push_frame_to_flow_once_proto_init()
	file_put_object_proto_init()
	file_put_object_streaming_proto_init()
	file_remove_object_proto_init()
	file_rename_object_proto_init()
	file_get_object_proto_init()
	file_get_object_content_proto_init()
	file_get_object_streaming_content_proto_init()
	file_list_objects_proto_init()
	file_show_module_firmware_descriptor_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceServiceClient interface {
	IssueModuleToken(ctx context.Context, in *IssueModuleTokenRequest, opts ...grpc.CallOption) (*IssueModuleTokenResponse, error)
	ShowModule(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ShowModuleResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PushFrameToFlow(ctx context.Context, opts ...grpc.CallOption) (DeviceService_PushFrameToFlowClient, error)
	PushFrameToFlowOnce(ctx context.Context, in *PushFrameToFlowOnceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PutObject(ctx context.Context, in *PutObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PutObjectStreaming(ctx context.Context, opts ...grpc.CallOption) (DeviceService_PutObjectStreamingClient, error)
	RemoveObject(ctx context.Context, in *RemoveObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RenameObject(ctx context.Context, in *RenameObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error)
	GetObjectContent(ctx context.Context, in *GetObjectContentRequest, opts ...grpc.CallOption) (*GetObjectContentResponse, error)
	GetObjectStreamingContent(ctx context.Context, in *GetObjectStreamingContentRequest, opts ...grpc.CallOption) (*GetObjectStreamingContentResponse, error)
	ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*ListObjectsResponse, error)
	ShowModuleFirmwareDescriptor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ShowModuleFirmwareDescriptorResponse, error)
}

type deviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServiceClient(cc grpc.ClientConnInterface) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) IssueModuleToken(ctx context.Context, in *IssueModuleTokenRequest, opts ...grpc.CallOption) (*IssueModuleTokenResponse, error) {
	out := new(IssueModuleTokenResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.device.DeviceService/IssueModuleToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) ShowModule(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ShowModuleResponse, error) {
	out := new(ShowModuleResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.device.DeviceService/ShowModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.device.DeviceService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) PushFrameToFlow(ctx context.Context, opts ...grpc.CallOption) (DeviceService_PushFrameToFlowClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceService_serviceDesc.Streams[0], "/ai.metathings.service.device.DeviceService/PushFrameToFlow", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceServicePushFrameToFlowClient{stream}
	return x, nil
}

type DeviceService_PushFrameToFlowClient interface {
	Send(*PushFrameToFlowRequest) error
	Recv() (*PushFrameToFlowResponse, error)
	grpc.ClientStream
}

type deviceServicePushFrameToFlowClient struct {
	grpc.ClientStream
}

func (x *deviceServicePushFrameToFlowClient) Send(m *PushFrameToFlowRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deviceServicePushFrameToFlowClient) Recv() (*PushFrameToFlowResponse, error) {
	m := new(PushFrameToFlowResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceServiceClient) PushFrameToFlowOnce(ctx context.Context, in *PushFrameToFlowOnceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.device.DeviceService/PushFrameToFlowOnce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) PutObject(ctx context.Context, in *PutObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.device.DeviceService/PutObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) PutObjectStreaming(ctx context.Context, opts ...grpc.CallOption) (DeviceService_PutObjectStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceService_serviceDesc.Streams[1], "/ai.metathings.service.device.DeviceService/PutObjectStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceServicePutObjectStreamingClient{stream}
	return x, nil
}

type DeviceService_PutObjectStreamingClient interface {
	Send(*PutObjectStreamingRequest) error
	Recv() (*PutObjectStreamingResponse, error)
	grpc.ClientStream
}

type deviceServicePutObjectStreamingClient struct {
	grpc.ClientStream
}

func (x *deviceServicePutObjectStreamingClient) Send(m *PutObjectStreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deviceServicePutObjectStreamingClient) Recv() (*PutObjectStreamingResponse, error) {
	m := new(PutObjectStreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceServiceClient) RemoveObject(ctx context.Context, in *RemoveObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.device.DeviceService/RemoveObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) RenameObject(ctx context.Context, in *RenameObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.device.DeviceService/RenameObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error) {
	out := new(GetObjectResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.device.DeviceService/GetObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetObjectContent(ctx context.Context, in *GetObjectContentRequest, opts ...grpc.CallOption) (*GetObjectContentResponse, error) {
	out := new(GetObjectContentResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.device.DeviceService/GetObjectContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetObjectStreamingContent(ctx context.Context, in *GetObjectStreamingContentRequest, opts ...grpc.CallOption) (*GetObjectStreamingContentResponse, error) {
	out := new(GetObjectStreamingContentResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.device.DeviceService/GetObjectStreamingContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*ListObjectsResponse, error) {
	out := new(ListObjectsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.device.DeviceService/ListObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) ShowModuleFirmwareDescriptor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ShowModuleFirmwareDescriptorResponse, error) {
	out := new(ShowModuleFirmwareDescriptorResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.device.DeviceService/ShowModuleFirmwareDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServiceServer is the server API for DeviceService service.
type DeviceServiceServer interface {
	IssueModuleToken(context.Context, *IssueModuleTokenRequest) (*IssueModuleTokenResponse, error)
	ShowModule(context.Context, *emptypb.Empty) (*ShowModuleResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*emptypb.Empty, error)
	PushFrameToFlow(DeviceService_PushFrameToFlowServer) error
	PushFrameToFlowOnce(context.Context, *PushFrameToFlowOnceRequest) (*emptypb.Empty, error)
	PutObject(context.Context, *PutObjectRequest) (*emptypb.Empty, error)
	PutObjectStreaming(DeviceService_PutObjectStreamingServer) error
	RemoveObject(context.Context, *RemoveObjectRequest) (*emptypb.Empty, error)
	RenameObject(context.Context, *RenameObjectRequest) (*emptypb.Empty, error)
	GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error)
	GetObjectContent(context.Context, *GetObjectContentRequest) (*GetObjectContentResponse, error)
	GetObjectStreamingContent(context.Context, *GetObjectStreamingContentRequest) (*GetObjectStreamingContentResponse, error)
	ListObjects(context.Context, *ListObjectsRequest) (*ListObjectsResponse, error)
	ShowModuleFirmwareDescriptor(context.Context, *emptypb.Empty) (*ShowModuleFirmwareDescriptorResponse, error)
}

// UnimplementedDeviceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceServiceServer struct {
}

func (*UnimplementedDeviceServiceServer) IssueModuleToken(context.Context, *IssueModuleTokenRequest) (*IssueModuleTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueModuleToken not implemented")
}
func (*UnimplementedDeviceServiceServer) ShowModule(context.Context, *emptypb.Empty) (*ShowModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowModule not implemented")
}
func (*UnimplementedDeviceServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (*UnimplementedDeviceServiceServer) PushFrameToFlow(DeviceService_PushFrameToFlowServer) error {
	return status.Errorf(codes.Unimplemented, "method PushFrameToFlow not implemented")
}
func (*UnimplementedDeviceServiceServer) PushFrameToFlowOnce(context.Context, *PushFrameToFlowOnceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushFrameToFlowOnce not implemented")
}
func (*UnimplementedDeviceServiceServer) PutObject(context.Context, *PutObjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutObject not implemented")
}
func (*UnimplementedDeviceServiceServer) PutObjectStreaming(DeviceService_PutObjectStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method PutObjectStreaming not implemented")
}
func (*UnimplementedDeviceServiceServer) RemoveObject(context.Context, *RemoveObjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveObject not implemented")
}
func (*UnimplementedDeviceServiceServer) RenameObject(context.Context, *RenameObjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameObject not implemented")
}
func (*UnimplementedDeviceServiceServer) GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (*UnimplementedDeviceServiceServer) GetObjectContent(context.Context, *GetObjectContentRequest) (*GetObjectContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectContent not implemented")
}
func (*UnimplementedDeviceServiceServer) GetObjectStreamingContent(context.Context, *GetObjectStreamingContentRequest) (*GetObjectStreamingContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectStreamingContent not implemented")
}
func (*UnimplementedDeviceServiceServer) ListObjects(context.Context, *ListObjectsRequest) (*ListObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjects not implemented")
}
func (*UnimplementedDeviceServiceServer) ShowModuleFirmwareDescriptor(context.Context, *emptypb.Empty) (*ShowModuleFirmwareDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowModuleFirmwareDescriptor not implemented")
}

func RegisterDeviceServiceServer(s *grpc.Server, srv DeviceServiceServer) {
	s.RegisterService(&_DeviceService_serviceDesc, srv)
}

func _DeviceService_IssueModuleToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueModuleTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).IssueModuleToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.device.DeviceService/IssueModuleToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).IssueModuleToken(ctx, req.(*IssueModuleTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_ShowModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).ShowModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.device.DeviceService/ShowModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).ShowModule(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.device.DeviceService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_PushFrameToFlow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceServiceServer).PushFrameToFlow(&deviceServicePushFrameToFlowServer{stream})
}

type DeviceService_PushFrameToFlowServer interface {
	Send(*PushFrameToFlowResponse) error
	Recv() (*PushFrameToFlowRequest, error)
	grpc.ServerStream
}

type deviceServicePushFrameToFlowServer struct {
	grpc.ServerStream
}

func (x *deviceServicePushFrameToFlowServer) Send(m *PushFrameToFlowResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deviceServicePushFrameToFlowServer) Recv() (*PushFrameToFlowRequest, error) {
	m := new(PushFrameToFlowRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DeviceService_PushFrameToFlowOnce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushFrameToFlowOnceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).PushFrameToFlowOnce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.device.DeviceService/PushFrameToFlowOnce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).PushFrameToFlowOnce(ctx, req.(*PushFrameToFlowOnceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_PutObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).PutObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.device.DeviceService/PutObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).PutObject(ctx, req.(*PutObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_PutObjectStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceServiceServer).PutObjectStreaming(&deviceServicePutObjectStreamingServer{stream})
}

type DeviceService_PutObjectStreamingServer interface {
	Send(*PutObjectStreamingResponse) error
	Recv() (*PutObjectStreamingRequest, error)
	grpc.ServerStream
}

type deviceServicePutObjectStreamingServer struct {
	grpc.ServerStream
}

func (x *deviceServicePutObjectStreamingServer) Send(m *PutObjectStreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deviceServicePutObjectStreamingServer) Recv() (*PutObjectStreamingRequest, error) {
	m := new(PutObjectStreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DeviceService_RemoveObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).RemoveObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.device.DeviceService/RemoveObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).RemoveObject(ctx, req.(*RemoveObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_RenameObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).RenameObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.device.DeviceService/RenameObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).RenameObject(ctx, req.(*RenameObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.device.DeviceService/GetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetObject(ctx, req.(*GetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetObjectContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetObjectContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.device.DeviceService/GetObjectContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetObjectContent(ctx, req.(*GetObjectContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetObjectStreamingContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectStreamingContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetObjectStreamingContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.device.DeviceService/GetObjectStreamingContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetObjectStreamingContent(ctx, req.(*GetObjectStreamingContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_ListObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).ListObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.device.DeviceService/ListObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).ListObjects(ctx, req.(*ListObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_ShowModuleFirmwareDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).ShowModuleFirmwareDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.device.DeviceService/ShowModuleFirmwareDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).ShowModuleFirmwareDescriptor(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.device.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IssueModuleToken",
			Handler:    _DeviceService_IssueModuleToken_Handler,
		},
		{
			MethodName: "ShowModule",
			Handler:    _DeviceService_ShowModule_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _DeviceService_Heartbeat_Handler,
		},
		{
			MethodName: "PushFrameToFlowOnce",
			Handler:    _DeviceService_PushFrameToFlowOnce_Handler,
		},
		{
			MethodName: "PutObject",
			Handler:    _DeviceService_PutObject_Handler,
		},
		{
			MethodName: "RemoveObject",
			Handler:    _DeviceService_RemoveObject_Handler,
		},
		{
			MethodName: "RenameObject",
			Handler:    _DeviceService_RenameObject_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _DeviceService_GetObject_Handler,
		},
		{
			MethodName: "GetObjectContent",
			Handler:    _DeviceService_GetObjectContent_Handler,
		},
		{
			MethodName: "GetObjectStreamingContent",
			Handler:    _DeviceService_GetObjectStreamingContent_Handler,
		},
		{
			MethodName: "ListObjects",
			Handler:    _DeviceService_ListObjects_Handler,
		},
		{
			MethodName: "ShowModuleFirmwareDescriptor",
			Handler:    _DeviceService_ShowModuleFirmwareDescriptor_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushFrameToFlow",
			Handler:       _DeviceService_PushFrameToFlow_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PutObjectStreaming",
			Handler:       _DeviceService_PutObjectStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
