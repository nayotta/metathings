// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: service.proto

package policyd

import (
	context "context"
	proto1 "github.com/casbin/casbin-server/proto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EnforceBucketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*proto1.EnforceRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *EnforceBucketRequest) Reset() {
	*x = EnforceBucketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnforceBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnforceBucketRequest) ProtoMessage() {}

func (x *EnforceBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnforceBucketRequest.ProtoReflect.Descriptor instead.
func (*EnforceBucketRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

func (x *EnforceBucketRequest) GetRequests() []*proto1.EnforceRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1d, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x64, 0x1a, 0x32,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61, 0x73, 0x62, 0x69,
	0x6e, 0x2f, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x49, 0x0a, 0x14, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x32, 0xb8, 0x15,
	0x0a, 0x0e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x43, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x12,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x77, 0x45, 0x6e, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x77, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x77, 0x41,
	0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x07, 0x45, 0x6e, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a,
	0x0a, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x53, 0x61, 0x76, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x35, 0x0a,
	0x09, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x38, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x11, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x14, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x37, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x32, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x32, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x32, 0x44, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x32, 0x44, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x42, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x50, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x55, 0x0a, 0x21, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x32, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x32, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x32, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x32, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x09, 0x48, 0x61, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0e, 0x48, 0x61,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x11, 0x48, 0x61, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x16, 0x48, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0d, 0x45, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x33, 0x2e, 0x61, 0x69, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x64, 0x2e, 0x45, 0x6e, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x3e, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x36, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x61, 0x79, 0x6f, 0x74, 0x74, 0x61, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_proto_rawDescOnce sync.Once
	file_service_proto_rawDescData = file_service_proto_rawDesc
)

func file_service_proto_rawDescGZIP() []byte {
	file_service_proto_rawDescOnce.Do(func() {
		file_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_proto_rawDescData)
	})
	return file_service_proto_rawDescData
}

var file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_service_proto_goTypes = []interface{}{
	(*EnforceBucketRequest)(nil),         // 0: ai.metathings.service.policyd.EnforceBucketRequest
	(*proto1.EnforceRequest)(nil),        // 1: proto.EnforceRequest
	(*proto1.NewEnforcerRequest)(nil),    // 2: proto.NewEnforcerRequest
	(*proto1.NewAdapterRequest)(nil),     // 3: proto.NewAdapterRequest
	(*proto1.EmptyRequest)(nil),          // 4: proto.EmptyRequest
	(*proto1.PolicyRequest)(nil),         // 5: proto.PolicyRequest
	(*proto1.FilteredPolicyRequest)(nil), // 6: proto.FilteredPolicyRequest
	(*proto1.SimpleGetRequest)(nil),      // 7: proto.SimpleGetRequest
	(*proto1.NewEnforcerReply)(nil),      // 8: proto.NewEnforcerReply
	(*proto1.NewAdapterReply)(nil),       // 9: proto.NewAdapterReply
	(*proto1.BoolReply)(nil),             // 10: proto.BoolReply
	(*proto1.EmptyReply)(nil),            // 11: proto.EmptyReply
	(*proto1.Array2DReply)(nil),          // 12: proto.Array2DReply
	(*proto1.ArrayReply)(nil),            // 13: proto.ArrayReply
}
var file_service_proto_depIdxs = []int32{
	1,  // 0: ai.metathings.service.policyd.EnforceBucketRequest.requests:type_name -> proto.EnforceRequest
	2,  // 1: ai.metathings.service.policyd.PolicydService.NewEnforcer:input_type -> proto.NewEnforcerRequest
	3,  // 2: ai.metathings.service.policyd.PolicydService.NewAdapter:input_type -> proto.NewAdapterRequest
	1,  // 3: ai.metathings.service.policyd.PolicydService.Enforce:input_type -> proto.EnforceRequest
	4,  // 4: ai.metathings.service.policyd.PolicydService.LoadPolicy:input_type -> proto.EmptyRequest
	4,  // 5: ai.metathings.service.policyd.PolicydService.SavePolicy:input_type -> proto.EmptyRequest
	5,  // 6: ai.metathings.service.policyd.PolicydService.AddPolicy:input_type -> proto.PolicyRequest
	5,  // 7: ai.metathings.service.policyd.PolicydService.AddNamedPolicy:input_type -> proto.PolicyRequest
	5,  // 8: ai.metathings.service.policyd.PolicydService.RemovePolicy:input_type -> proto.PolicyRequest
	5,  // 9: ai.metathings.service.policyd.PolicydService.RemoveNamedPolicy:input_type -> proto.PolicyRequest
	6,  // 10: ai.metathings.service.policyd.PolicydService.RemoveFilteredPolicy:input_type -> proto.FilteredPolicyRequest
	6,  // 11: ai.metathings.service.policyd.PolicydService.RemoveFilteredNamedPolicy:input_type -> proto.FilteredPolicyRequest
	4,  // 12: ai.metathings.service.policyd.PolicydService.GetPolicy:input_type -> proto.EmptyRequest
	5,  // 13: ai.metathings.service.policyd.PolicydService.GetNamedPolicy:input_type -> proto.PolicyRequest
	6,  // 14: ai.metathings.service.policyd.PolicydService.GetFilteredPolicy:input_type -> proto.FilteredPolicyRequest
	6,  // 15: ai.metathings.service.policyd.PolicydService.GetFilteredNamedPolicy:input_type -> proto.FilteredPolicyRequest
	5,  // 16: ai.metathings.service.policyd.PolicydService.AddGroupingPolicy:input_type -> proto.PolicyRequest
	5,  // 17: ai.metathings.service.policyd.PolicydService.AddNamedGroupingPolicy:input_type -> proto.PolicyRequest
	5,  // 18: ai.metathings.service.policyd.PolicydService.RemoveGroupingPolicy:input_type -> proto.PolicyRequest
	5,  // 19: ai.metathings.service.policyd.PolicydService.RemoveNamedGroupingPolicy:input_type -> proto.PolicyRequest
	6,  // 20: ai.metathings.service.policyd.PolicydService.RemoveFilteredGroupingPolicy:input_type -> proto.FilteredPolicyRequest
	6,  // 21: ai.metathings.service.policyd.PolicydService.RemoveFilteredNamedGroupingPolicy:input_type -> proto.FilteredPolicyRequest
	4,  // 22: ai.metathings.service.policyd.PolicydService.GetGroupingPolicy:input_type -> proto.EmptyRequest
	5,  // 23: ai.metathings.service.policyd.PolicydService.GetNamedGroupingPolicy:input_type -> proto.PolicyRequest
	6,  // 24: ai.metathings.service.policyd.PolicydService.GetFilteredGroupingPolicy:input_type -> proto.FilteredPolicyRequest
	6,  // 25: ai.metathings.service.policyd.PolicydService.GetFilteredNamedGroupingPolicy:input_type -> proto.FilteredPolicyRequest
	4,  // 26: ai.metathings.service.policyd.PolicydService.GetAllSubjects:input_type -> proto.EmptyRequest
	7,  // 27: ai.metathings.service.policyd.PolicydService.GetAllNamedSubjects:input_type -> proto.SimpleGetRequest
	4,  // 28: ai.metathings.service.policyd.PolicydService.GetAllObjects:input_type -> proto.EmptyRequest
	7,  // 29: ai.metathings.service.policyd.PolicydService.GetAllNamedObjects:input_type -> proto.SimpleGetRequest
	4,  // 30: ai.metathings.service.policyd.PolicydService.GetAllActions:input_type -> proto.EmptyRequest
	7,  // 31: ai.metathings.service.policyd.PolicydService.GetAllNamedActions:input_type -> proto.SimpleGetRequest
	4,  // 32: ai.metathings.service.policyd.PolicydService.GetAllRoles:input_type -> proto.EmptyRequest
	7,  // 33: ai.metathings.service.policyd.PolicydService.GetAllNamedRoles:input_type -> proto.SimpleGetRequest
	5,  // 34: ai.metathings.service.policyd.PolicydService.HasPolicy:input_type -> proto.PolicyRequest
	5,  // 35: ai.metathings.service.policyd.PolicydService.HasNamedPolicy:input_type -> proto.PolicyRequest
	5,  // 36: ai.metathings.service.policyd.PolicydService.HasGroupingPolicy:input_type -> proto.PolicyRequest
	5,  // 37: ai.metathings.service.policyd.PolicydService.HasNamedGroupingPolicy:input_type -> proto.PolicyRequest
	0,  // 38: ai.metathings.service.policyd.PolicydService.EnforceBucket:input_type -> ai.metathings.service.policyd.EnforceBucketRequest
	5,  // 39: ai.metathings.service.policyd.PolicydService.AddPresetPolicy:input_type -> proto.PolicyRequest
	5,  // 40: ai.metathings.service.policyd.PolicydService.RemovePresetPolicy:input_type -> proto.PolicyRequest
	4,  // 41: ai.metathings.service.policyd.PolicydService.Initialize:input_type -> proto.EmptyRequest
	8,  // 42: ai.metathings.service.policyd.PolicydService.NewEnforcer:output_type -> proto.NewEnforcerReply
	9,  // 43: ai.metathings.service.policyd.PolicydService.NewAdapter:output_type -> proto.NewAdapterReply
	10, // 44: ai.metathings.service.policyd.PolicydService.Enforce:output_type -> proto.BoolReply
	11, // 45: ai.metathings.service.policyd.PolicydService.LoadPolicy:output_type -> proto.EmptyReply
	11, // 46: ai.metathings.service.policyd.PolicydService.SavePolicy:output_type -> proto.EmptyReply
	10, // 47: ai.metathings.service.policyd.PolicydService.AddPolicy:output_type -> proto.BoolReply
	10, // 48: ai.metathings.service.policyd.PolicydService.AddNamedPolicy:output_type -> proto.BoolReply
	10, // 49: ai.metathings.service.policyd.PolicydService.RemovePolicy:output_type -> proto.BoolReply
	10, // 50: ai.metathings.service.policyd.PolicydService.RemoveNamedPolicy:output_type -> proto.BoolReply
	10, // 51: ai.metathings.service.policyd.PolicydService.RemoveFilteredPolicy:output_type -> proto.BoolReply
	10, // 52: ai.metathings.service.policyd.PolicydService.RemoveFilteredNamedPolicy:output_type -> proto.BoolReply
	12, // 53: ai.metathings.service.policyd.PolicydService.GetPolicy:output_type -> proto.Array2DReply
	12, // 54: ai.metathings.service.policyd.PolicydService.GetNamedPolicy:output_type -> proto.Array2DReply
	12, // 55: ai.metathings.service.policyd.PolicydService.GetFilteredPolicy:output_type -> proto.Array2DReply
	12, // 56: ai.metathings.service.policyd.PolicydService.GetFilteredNamedPolicy:output_type -> proto.Array2DReply
	10, // 57: ai.metathings.service.policyd.PolicydService.AddGroupingPolicy:output_type -> proto.BoolReply
	10, // 58: ai.metathings.service.policyd.PolicydService.AddNamedGroupingPolicy:output_type -> proto.BoolReply
	10, // 59: ai.metathings.service.policyd.PolicydService.RemoveGroupingPolicy:output_type -> proto.BoolReply
	10, // 60: ai.metathings.service.policyd.PolicydService.RemoveNamedGroupingPolicy:output_type -> proto.BoolReply
	10, // 61: ai.metathings.service.policyd.PolicydService.RemoveFilteredGroupingPolicy:output_type -> proto.BoolReply
	10, // 62: ai.metathings.service.policyd.PolicydService.RemoveFilteredNamedGroupingPolicy:output_type -> proto.BoolReply
	12, // 63: ai.metathings.service.policyd.PolicydService.GetGroupingPolicy:output_type -> proto.Array2DReply
	12, // 64: ai.metathings.service.policyd.PolicydService.GetNamedGroupingPolicy:output_type -> proto.Array2DReply
	12, // 65: ai.metathings.service.policyd.PolicydService.GetFilteredGroupingPolicy:output_type -> proto.Array2DReply
	12, // 66: ai.metathings.service.policyd.PolicydService.GetFilteredNamedGroupingPolicy:output_type -> proto.Array2DReply
	13, // 67: ai.metathings.service.policyd.PolicydService.GetAllSubjects:output_type -> proto.ArrayReply
	13, // 68: ai.metathings.service.policyd.PolicydService.GetAllNamedSubjects:output_type -> proto.ArrayReply
	13, // 69: ai.metathings.service.policyd.PolicydService.GetAllObjects:output_type -> proto.ArrayReply
	13, // 70: ai.metathings.service.policyd.PolicydService.GetAllNamedObjects:output_type -> proto.ArrayReply
	13, // 71: ai.metathings.service.policyd.PolicydService.GetAllActions:output_type -> proto.ArrayReply
	13, // 72: ai.metathings.service.policyd.PolicydService.GetAllNamedActions:output_type -> proto.ArrayReply
	13, // 73: ai.metathings.service.policyd.PolicydService.GetAllRoles:output_type -> proto.ArrayReply
	13, // 74: ai.metathings.service.policyd.PolicydService.GetAllNamedRoles:output_type -> proto.ArrayReply
	10, // 75: ai.metathings.service.policyd.PolicydService.HasPolicy:output_type -> proto.BoolReply
	10, // 76: ai.metathings.service.policyd.PolicydService.HasNamedPolicy:output_type -> proto.BoolReply
	10, // 77: ai.metathings.service.policyd.PolicydService.HasGroupingPolicy:output_type -> proto.BoolReply
	10, // 78: ai.metathings.service.policyd.PolicydService.HasNamedGroupingPolicy:output_type -> proto.BoolReply
	10, // 79: ai.metathings.service.policyd.PolicydService.EnforceBucket:output_type -> proto.BoolReply
	10, // 80: ai.metathings.service.policyd.PolicydService.AddPresetPolicy:output_type -> proto.BoolReply
	10, // 81: ai.metathings.service.policyd.PolicydService.RemovePresetPolicy:output_type -> proto.BoolReply
	11, // 82: ai.metathings.service.policyd.PolicydService.Initialize:output_type -> proto.EmptyReply
	42, // [42:83] is the sub-list for method output_type
	1,  // [1:42] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnforceBucketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
		MessageInfos:      file_service_proto_msgTypes,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PolicydServiceClient is the client API for PolicydService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolicydServiceClient interface {
	// Casbin server functions
	NewEnforcer(ctx context.Context, in *proto1.NewEnforcerRequest, opts ...grpc.CallOption) (*proto1.NewEnforcerReply, error)
	NewAdapter(ctx context.Context, in *proto1.NewAdapterRequest, opts ...grpc.CallOption) (*proto1.NewAdapterReply, error)
	Enforce(ctx context.Context, in *proto1.EnforceRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	LoadPolicy(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.EmptyReply, error)
	SavePolicy(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.EmptyReply, error)
	AddPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	AddNamedPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	RemovePolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	RemoveNamedPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	RemoveFilteredPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	RemoveFilteredNamedPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	GetPolicy(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error)
	GetNamedPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error)
	GetFilteredPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error)
	GetFilteredNamedPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error)
	AddGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	AddNamedGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	RemoveGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	RemoveNamedGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	RemoveFilteredGroupingPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	RemoveFilteredNamedGroupingPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	GetGroupingPolicy(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error)
	GetNamedGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error)
	GetFilteredGroupingPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error)
	GetFilteredNamedGroupingPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error)
	GetAllSubjects(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error)
	GetAllNamedSubjects(ctx context.Context, in *proto1.SimpleGetRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error)
	GetAllObjects(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error)
	GetAllNamedObjects(ctx context.Context, in *proto1.SimpleGetRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error)
	GetAllActions(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error)
	GetAllNamedActions(ctx context.Context, in *proto1.SimpleGetRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error)
	GetAllRoles(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error)
	GetAllNamedRoles(ctx context.Context, in *proto1.SimpleGetRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error)
	HasPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	HasNamedPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	HasGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	HasNamedGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	// Custom functions
	EnforceBucket(ctx context.Context, in *EnforceBucketRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	AddPresetPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	RemovePresetPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	Initialize(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.EmptyReply, error)
}

type policydServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicydServiceClient(cc grpc.ClientConnInterface) PolicydServiceClient {
	return &policydServiceClient{cc}
}

func (c *policydServiceClient) NewEnforcer(ctx context.Context, in *proto1.NewEnforcerRequest, opts ...grpc.CallOption) (*proto1.NewEnforcerReply, error) {
	out := new(proto1.NewEnforcerReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/NewEnforcer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) NewAdapter(ctx context.Context, in *proto1.NewAdapterRequest, opts ...grpc.CallOption) (*proto1.NewAdapterReply, error) {
	out := new(proto1.NewAdapterReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/NewAdapter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) Enforce(ctx context.Context, in *proto1.EnforceRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/Enforce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) LoadPolicy(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.EmptyReply, error) {
	out := new(proto1.EmptyReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/LoadPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) SavePolicy(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.EmptyReply, error) {
	out := new(proto1.EmptyReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/SavePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) AddPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/AddPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) AddNamedPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/AddNamedPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) RemovePolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/RemovePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) RemoveNamedPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/RemoveNamedPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) RemoveFilteredPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/RemoveFilteredPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) RemoveFilteredNamedPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/RemoveFilteredNamedPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetPolicy(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error) {
	out := new(proto1.Array2DReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetNamedPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error) {
	out := new(proto1.Array2DReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetNamedPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetFilteredPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error) {
	out := new(proto1.Array2DReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetFilteredPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetFilteredNamedPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error) {
	out := new(proto1.Array2DReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetFilteredNamedPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) AddGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/AddGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) AddNamedGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/AddNamedGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) RemoveGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/RemoveGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) RemoveNamedGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/RemoveNamedGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) RemoveFilteredGroupingPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/RemoveFilteredGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) RemoveFilteredNamedGroupingPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/RemoveFilteredNamedGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetGroupingPolicy(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error) {
	out := new(proto1.Array2DReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetNamedGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error) {
	out := new(proto1.Array2DReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetNamedGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetFilteredGroupingPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error) {
	out := new(proto1.Array2DReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetFilteredGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetFilteredNamedGroupingPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error) {
	out := new(proto1.Array2DReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetFilteredNamedGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetAllSubjects(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error) {
	out := new(proto1.ArrayReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetAllSubjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetAllNamedSubjects(ctx context.Context, in *proto1.SimpleGetRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error) {
	out := new(proto1.ArrayReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetAllNamedSubjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetAllObjects(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error) {
	out := new(proto1.ArrayReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetAllObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetAllNamedObjects(ctx context.Context, in *proto1.SimpleGetRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error) {
	out := new(proto1.ArrayReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetAllNamedObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetAllActions(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error) {
	out := new(proto1.ArrayReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetAllActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetAllNamedActions(ctx context.Context, in *proto1.SimpleGetRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error) {
	out := new(proto1.ArrayReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetAllNamedActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetAllRoles(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error) {
	out := new(proto1.ArrayReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetAllRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetAllNamedRoles(ctx context.Context, in *proto1.SimpleGetRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error) {
	out := new(proto1.ArrayReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetAllNamedRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) HasPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/HasPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) HasNamedPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/HasNamedPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) HasGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/HasGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) HasNamedGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/HasNamedGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) EnforceBucket(ctx context.Context, in *EnforceBucketRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/EnforceBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) AddPresetPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/AddPresetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) RemovePresetPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/RemovePresetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) Initialize(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.EmptyReply, error) {
	out := new(proto1.EmptyReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicydServiceServer is the server API for PolicydService service.
type PolicydServiceServer interface {
	// Casbin server functions
	NewEnforcer(context.Context, *proto1.NewEnforcerRequest) (*proto1.NewEnforcerReply, error)
	NewAdapter(context.Context, *proto1.NewAdapterRequest) (*proto1.NewAdapterReply, error)
	Enforce(context.Context, *proto1.EnforceRequest) (*proto1.BoolReply, error)
	LoadPolicy(context.Context, *proto1.EmptyRequest) (*proto1.EmptyReply, error)
	SavePolicy(context.Context, *proto1.EmptyRequest) (*proto1.EmptyReply, error)
	AddPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	AddNamedPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	RemovePolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	RemoveNamedPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	RemoveFilteredPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.BoolReply, error)
	RemoveFilteredNamedPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.BoolReply, error)
	GetPolicy(context.Context, *proto1.EmptyRequest) (*proto1.Array2DReply, error)
	GetNamedPolicy(context.Context, *proto1.PolicyRequest) (*proto1.Array2DReply, error)
	GetFilteredPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.Array2DReply, error)
	GetFilteredNamedPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.Array2DReply, error)
	AddGroupingPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	AddNamedGroupingPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	RemoveGroupingPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	RemoveNamedGroupingPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	RemoveFilteredGroupingPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.BoolReply, error)
	RemoveFilteredNamedGroupingPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.BoolReply, error)
	GetGroupingPolicy(context.Context, *proto1.EmptyRequest) (*proto1.Array2DReply, error)
	GetNamedGroupingPolicy(context.Context, *proto1.PolicyRequest) (*proto1.Array2DReply, error)
	GetFilteredGroupingPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.Array2DReply, error)
	GetFilteredNamedGroupingPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.Array2DReply, error)
	GetAllSubjects(context.Context, *proto1.EmptyRequest) (*proto1.ArrayReply, error)
	GetAllNamedSubjects(context.Context, *proto1.SimpleGetRequest) (*proto1.ArrayReply, error)
	GetAllObjects(context.Context, *proto1.EmptyRequest) (*proto1.ArrayReply, error)
	GetAllNamedObjects(context.Context, *proto1.SimpleGetRequest) (*proto1.ArrayReply, error)
	GetAllActions(context.Context, *proto1.EmptyRequest) (*proto1.ArrayReply, error)
	GetAllNamedActions(context.Context, *proto1.SimpleGetRequest) (*proto1.ArrayReply, error)
	GetAllRoles(context.Context, *proto1.EmptyRequest) (*proto1.ArrayReply, error)
	GetAllNamedRoles(context.Context, *proto1.SimpleGetRequest) (*proto1.ArrayReply, error)
	HasPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	HasNamedPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	HasGroupingPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	HasNamedGroupingPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	// Custom functions
	EnforceBucket(context.Context, *EnforceBucketRequest) (*proto1.BoolReply, error)
	AddPresetPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	RemovePresetPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	Initialize(context.Context, *proto1.EmptyRequest) (*proto1.EmptyReply, error)
}

// UnimplementedPolicydServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPolicydServiceServer struct {
}

func (*UnimplementedPolicydServiceServer) NewEnforcer(context.Context, *proto1.NewEnforcerRequest) (*proto1.NewEnforcerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewEnforcer not implemented")
}
func (*UnimplementedPolicydServiceServer) NewAdapter(context.Context, *proto1.NewAdapterRequest) (*proto1.NewAdapterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAdapter not implemented")
}
func (*UnimplementedPolicydServiceServer) Enforce(context.Context, *proto1.EnforceRequest) (*proto1.BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enforce not implemented")
}
func (*UnimplementedPolicydServiceServer) LoadPolicy(context.Context, *proto1.EmptyRequest) (*proto1.EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) SavePolicy(context.Context, *proto1.EmptyRequest) (*proto1.EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) AddPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) AddNamedPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNamedPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) RemovePolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) RemoveNamedPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNamedPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) RemoveFilteredPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFilteredPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) RemoveFilteredNamedPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFilteredNamedPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) GetPolicy(context.Context, *proto1.EmptyRequest) (*proto1.Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) GetNamedPolicy(context.Context, *proto1.PolicyRequest) (*proto1.Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamedPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) GetFilteredPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) GetFilteredNamedPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredNamedPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) AddGroupingPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupingPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) AddNamedGroupingPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNamedGroupingPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) RemoveGroupingPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupingPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) RemoveNamedGroupingPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNamedGroupingPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) RemoveFilteredGroupingPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFilteredGroupingPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) RemoveFilteredNamedGroupingPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFilteredNamedGroupingPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) GetGroupingPolicy(context.Context, *proto1.EmptyRequest) (*proto1.Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupingPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) GetNamedGroupingPolicy(context.Context, *proto1.PolicyRequest) (*proto1.Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamedGroupingPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) GetFilteredGroupingPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredGroupingPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) GetFilteredNamedGroupingPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.Array2DReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredNamedGroupingPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) GetAllSubjects(context.Context, *proto1.EmptyRequest) (*proto1.ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubjects not implemented")
}
func (*UnimplementedPolicydServiceServer) GetAllNamedSubjects(context.Context, *proto1.SimpleGetRequest) (*proto1.ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNamedSubjects not implemented")
}
func (*UnimplementedPolicydServiceServer) GetAllObjects(context.Context, *proto1.EmptyRequest) (*proto1.ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllObjects not implemented")
}
func (*UnimplementedPolicydServiceServer) GetAllNamedObjects(context.Context, *proto1.SimpleGetRequest) (*proto1.ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNamedObjects not implemented")
}
func (*UnimplementedPolicydServiceServer) GetAllActions(context.Context, *proto1.EmptyRequest) (*proto1.ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllActions not implemented")
}
func (*UnimplementedPolicydServiceServer) GetAllNamedActions(context.Context, *proto1.SimpleGetRequest) (*proto1.ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNamedActions not implemented")
}
func (*UnimplementedPolicydServiceServer) GetAllRoles(context.Context, *proto1.EmptyRequest) (*proto1.ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRoles not implemented")
}
func (*UnimplementedPolicydServiceServer) GetAllNamedRoles(context.Context, *proto1.SimpleGetRequest) (*proto1.ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNamedRoles not implemented")
}
func (*UnimplementedPolicydServiceServer) HasPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) HasNamedPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasNamedPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) HasGroupingPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasGroupingPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) HasNamedGroupingPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasNamedGroupingPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) EnforceBucket(context.Context, *EnforceBucketRequest) (*proto1.BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnforceBucket not implemented")
}
func (*UnimplementedPolicydServiceServer) AddPresetPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPresetPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) RemovePresetPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePresetPolicy not implemented")
}
func (*UnimplementedPolicydServiceServer) Initialize(context.Context, *proto1.EmptyRequest) (*proto1.EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}

func RegisterPolicydServiceServer(s *grpc.Server, srv PolicydServiceServer) {
	s.RegisterService(&_PolicydService_serviceDesc, srv)
}

func _PolicydService_NewEnforcer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.NewEnforcerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).NewEnforcer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/NewEnforcer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).NewEnforcer(ctx, req.(*proto1.NewEnforcerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_NewAdapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.NewAdapterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).NewAdapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/NewAdapter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).NewAdapter(ctx, req.(*proto1.NewAdapterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_Enforce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.EnforceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).Enforce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/Enforce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).Enforce(ctx, req.(*proto1.EnforceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_LoadPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).LoadPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/LoadPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).LoadPolicy(ctx, req.(*proto1.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_SavePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).SavePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/SavePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).SavePolicy(ctx, req.(*proto1.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_AddPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).AddPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/AddPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).AddPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_AddNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).AddNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/AddNamedPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).AddNamedPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_RemovePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).RemovePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/RemovePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).RemovePolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_RemoveNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).RemoveNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/RemoveNamedPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).RemoveNamedPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_RemoveFilteredPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).RemoveFilteredPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/RemoveFilteredPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).RemoveFilteredPolicy(ctx, req.(*proto1.FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_RemoveFilteredNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).RemoveFilteredNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/RemoveFilteredNamedPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).RemoveFilteredNamedPolicy(ctx, req.(*proto1.FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetPolicy(ctx, req.(*proto1.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetNamedPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetNamedPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetFilteredPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetFilteredPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetFilteredPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetFilteredPolicy(ctx, req.(*proto1.FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetFilteredNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetFilteredNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetFilteredNamedPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetFilteredNamedPolicy(ctx, req.(*proto1.FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_AddGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).AddGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/AddGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).AddGroupingPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_AddNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).AddNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/AddNamedGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).AddNamedGroupingPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_RemoveGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).RemoveGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/RemoveGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).RemoveGroupingPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_RemoveNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).RemoveNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/RemoveNamedGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).RemoveNamedGroupingPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_RemoveFilteredGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).RemoveFilteredGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/RemoveFilteredGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).RemoveFilteredGroupingPolicy(ctx, req.(*proto1.FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_RemoveFilteredNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).RemoveFilteredNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/RemoveFilteredNamedGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).RemoveFilteredNamedGroupingPolicy(ctx, req.(*proto1.FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetGroupingPolicy(ctx, req.(*proto1.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetNamedGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetNamedGroupingPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetFilteredGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetFilteredGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetFilteredGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetFilteredGroupingPolicy(ctx, req.(*proto1.FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetFilteredNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetFilteredNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetFilteredNamedGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetFilteredNamedGroupingPolicy(ctx, req.(*proto1.FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetAllSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetAllSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetAllSubjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetAllSubjects(ctx, req.(*proto1.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetAllNamedSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.SimpleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetAllNamedSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetAllNamedSubjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetAllNamedSubjects(ctx, req.(*proto1.SimpleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetAllObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetAllObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetAllObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetAllObjects(ctx, req.(*proto1.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetAllNamedObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.SimpleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetAllNamedObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetAllNamedObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetAllNamedObjects(ctx, req.(*proto1.SimpleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetAllActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetAllActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetAllActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetAllActions(ctx, req.(*proto1.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetAllNamedActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.SimpleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetAllNamedActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetAllNamedActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetAllNamedActions(ctx, req.(*proto1.SimpleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetAllRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetAllRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetAllRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetAllRoles(ctx, req.(*proto1.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetAllNamedRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.SimpleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetAllNamedRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetAllNamedRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetAllNamedRoles(ctx, req.(*proto1.SimpleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_HasPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).HasPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/HasPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).HasPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_HasNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).HasNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/HasNamedPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).HasNamedPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_HasGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).HasGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/HasGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).HasGroupingPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_HasNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).HasNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/HasNamedGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).HasNamedGroupingPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_EnforceBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnforceBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).EnforceBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/EnforceBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).EnforceBucket(ctx, req.(*EnforceBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_AddPresetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).AddPresetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/AddPresetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).AddPresetPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_RemovePresetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).RemovePresetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/RemovePresetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).RemovePresetPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).Initialize(ctx, req.(*proto1.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolicydService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.policyd.PolicydService",
	HandlerType: (*PolicydServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewEnforcer",
			Handler:    _PolicydService_NewEnforcer_Handler,
		},
		{
			MethodName: "NewAdapter",
			Handler:    _PolicydService_NewAdapter_Handler,
		},
		{
			MethodName: "Enforce",
			Handler:    _PolicydService_Enforce_Handler,
		},
		{
			MethodName: "LoadPolicy",
			Handler:    _PolicydService_LoadPolicy_Handler,
		},
		{
			MethodName: "SavePolicy",
			Handler:    _PolicydService_SavePolicy_Handler,
		},
		{
			MethodName: "AddPolicy",
			Handler:    _PolicydService_AddPolicy_Handler,
		},
		{
			MethodName: "AddNamedPolicy",
			Handler:    _PolicydService_AddNamedPolicy_Handler,
		},
		{
			MethodName: "RemovePolicy",
			Handler:    _PolicydService_RemovePolicy_Handler,
		},
		{
			MethodName: "RemoveNamedPolicy",
			Handler:    _PolicydService_RemoveNamedPolicy_Handler,
		},
		{
			MethodName: "RemoveFilteredPolicy",
			Handler:    _PolicydService_RemoveFilteredPolicy_Handler,
		},
		{
			MethodName: "RemoveFilteredNamedPolicy",
			Handler:    _PolicydService_RemoveFilteredNamedPolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _PolicydService_GetPolicy_Handler,
		},
		{
			MethodName: "GetNamedPolicy",
			Handler:    _PolicydService_GetNamedPolicy_Handler,
		},
		{
			MethodName: "GetFilteredPolicy",
			Handler:    _PolicydService_GetFilteredPolicy_Handler,
		},
		{
			MethodName: "GetFilteredNamedPolicy",
			Handler:    _PolicydService_GetFilteredNamedPolicy_Handler,
		},
		{
			MethodName: "AddGroupingPolicy",
			Handler:    _PolicydService_AddGroupingPolicy_Handler,
		},
		{
			MethodName: "AddNamedGroupingPolicy",
			Handler:    _PolicydService_AddNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "RemoveGroupingPolicy",
			Handler:    _PolicydService_RemoveGroupingPolicy_Handler,
		},
		{
			MethodName: "RemoveNamedGroupingPolicy",
			Handler:    _PolicydService_RemoveNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "RemoveFilteredGroupingPolicy",
			Handler:    _PolicydService_RemoveFilteredGroupingPolicy_Handler,
		},
		{
			MethodName: "RemoveFilteredNamedGroupingPolicy",
			Handler:    _PolicydService_RemoveFilteredNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "GetGroupingPolicy",
			Handler:    _PolicydService_GetGroupingPolicy_Handler,
		},
		{
			MethodName: "GetNamedGroupingPolicy",
			Handler:    _PolicydService_GetNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "GetFilteredGroupingPolicy",
			Handler:    _PolicydService_GetFilteredGroupingPolicy_Handler,
		},
		{
			MethodName: "GetFilteredNamedGroupingPolicy",
			Handler:    _PolicydService_GetFilteredNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "GetAllSubjects",
			Handler:    _PolicydService_GetAllSubjects_Handler,
		},
		{
			MethodName: "GetAllNamedSubjects",
			Handler:    _PolicydService_GetAllNamedSubjects_Handler,
		},
		{
			MethodName: "GetAllObjects",
			Handler:    _PolicydService_GetAllObjects_Handler,
		},
		{
			MethodName: "GetAllNamedObjects",
			Handler:    _PolicydService_GetAllNamedObjects_Handler,
		},
		{
			MethodName: "GetAllActions",
			Handler:    _PolicydService_GetAllActions_Handler,
		},
		{
			MethodName: "GetAllNamedActions",
			Handler:    _PolicydService_GetAllNamedActions_Handler,
		},
		{
			MethodName: "GetAllRoles",
			Handler:    _PolicydService_GetAllRoles_Handler,
		},
		{
			MethodName: "GetAllNamedRoles",
			Handler:    _PolicydService_GetAllNamedRoles_Handler,
		},
		{
			MethodName: "HasPolicy",
			Handler:    _PolicydService_HasPolicy_Handler,
		},
		{
			MethodName: "HasNamedPolicy",
			Handler:    _PolicydService_HasNamedPolicy_Handler,
		},
		{
			MethodName: "HasGroupingPolicy",
			Handler:    _PolicydService_HasGroupingPolicy_Handler,
		},
		{
			MethodName: "HasNamedGroupingPolicy",
			Handler:    _PolicydService_HasNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "EnforceBucket",
			Handler:    _PolicydService_EnforceBucket_Handler,
		},
		{
			MethodName: "AddPresetPolicy",
			Handler:    _PolicydService_AddPresetPolicy_Handler,
		},
		{
			MethodName: "RemovePresetPolicy",
			Handler:    _PolicydService_RemovePresetPolicy_Handler,
		},
		{
			MethodName: "Initialize",
			Handler:    _PolicydService_Initialize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
