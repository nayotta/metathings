// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: push_frame_to_flow.proto

package deviced

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _push_frame_to_flow_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on PushFrameToFlowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PushFrameToFlowRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() == nil {
		return PushFrameToFlowRequestValidationError{
			field:  "Id",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushFrameToFlowRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Request.(type) {

	case *PushFrameToFlowRequest_Config_:

		if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PushFrameToFlowRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PushFrameToFlowRequest_Frame:

		if v, ok := interface{}(m.GetFrame()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PushFrameToFlowRequestValidationError{
					field:  "Frame",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PushFrameToFlowRequestValidationError is the validation error returned by
// PushFrameToFlowRequest.Validate if the designated constraints aren't met.
type PushFrameToFlowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushFrameToFlowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushFrameToFlowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushFrameToFlowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushFrameToFlowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushFrameToFlowRequestValidationError) ErrorName() string {
	return "PushFrameToFlowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PushFrameToFlowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushFrameToFlowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushFrameToFlowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushFrameToFlowRequestValidationError{}

// Validate checks the field values on PushFrameToFlowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PushFrameToFlowResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	switch m.Response.(type) {

	case *PushFrameToFlowResponse_Ack_:

		if v, ok := interface{}(m.GetAck()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PushFrameToFlowResponseValidationError{
					field:  "Ack",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PushFrameToFlowResponseValidationError is the validation error returned by
// PushFrameToFlowResponse.Validate if the designated constraints aren't met.
type PushFrameToFlowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushFrameToFlowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushFrameToFlowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushFrameToFlowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushFrameToFlowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushFrameToFlowResponseValidationError) ErrorName() string {
	return "PushFrameToFlowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PushFrameToFlowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushFrameToFlowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushFrameToFlowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushFrameToFlowResponseValidationError{}

// Validate checks the field values on PushFrameToFlowRequest_Config with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PushFrameToFlowRequest_Config) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushFrameToFlowRequest_ConfigValidationError{
				field:  "Device",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetConfigAck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushFrameToFlowRequest_ConfigValidationError{
				field:  "ConfigAck",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPushAck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushFrameToFlowRequest_ConfigValidationError{
				field:  "PushAck",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PushFrameToFlowRequest_ConfigValidationError is the validation error
// returned by PushFrameToFlowRequest_Config.Validate if the designated
// constraints aren't met.
type PushFrameToFlowRequest_ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushFrameToFlowRequest_ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushFrameToFlowRequest_ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushFrameToFlowRequest_ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushFrameToFlowRequest_ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushFrameToFlowRequest_ConfigValidationError) ErrorName() string {
	return "PushFrameToFlowRequest_ConfigValidationError"
}

// Error satisfies the builtin error interface
func (e PushFrameToFlowRequest_ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushFrameToFlowRequest_Config.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushFrameToFlowRequest_ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushFrameToFlowRequest_ConfigValidationError{}

// Validate checks the field values on PushFrameToFlowResponse_Ack with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PushFrameToFlowResponse_Ack) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// PushFrameToFlowResponse_AckValidationError is the validation error returned
// by PushFrameToFlowResponse_Ack.Validate if the designated constraints
// aren't met.
type PushFrameToFlowResponse_AckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushFrameToFlowResponse_AckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushFrameToFlowResponse_AckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushFrameToFlowResponse_AckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushFrameToFlowResponse_AckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushFrameToFlowResponse_AckValidationError) ErrorName() string {
	return "PushFrameToFlowResponse_AckValidationError"
}

// Error satisfies the builtin error interface
func (e PushFrameToFlowResponse_AckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushFrameToFlowResponse_Ack.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushFrameToFlowResponse_AckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushFrameToFlowResponse_AckValidationError{}
