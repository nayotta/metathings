// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: service.proto

package deviced

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1d, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1a, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x62, 0x79, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x75, 0x6e, 0x61,
	0x72, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x6e, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x10, 0x70, 0x75, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x75, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x67, 0x65, 0x74, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x68, 0x75,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x18, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x65,
	0x74, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x68, 0x75, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x68, 0x75, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x61, 0x64, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x26, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x61, 0x64, 0x64, 0x5f, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x68,
	0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x65,
	0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x24, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x25, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xd5, 0x33, 0x0a, 0x0e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x79, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x2e, 0x61,
	0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x2e, 0x61, 0x69, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x69,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x76, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x31,
	0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x37, 0x2e,
	0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x42, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x79, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x2e,
	0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x0b, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x2e, 0x61, 0x69, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x64, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x31, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a,
	0x12, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x54, 0x6f, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x38, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x54, 0x6f,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3d, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x79, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x39, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42,
	0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
	0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a,
	0x10, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x64, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x69, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x69, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x70, 0x0a, 0x09, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e,
	0x55, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64,
	0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x8a, 0x01,
	0x0a, 0x11, 0x50, 0x75, 0x6c, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x46,
	0x6c, 0x6f, 0x77, 0x12, 0x37, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x64, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61,
	0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x50, 0x75, 0x6c,
	0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x50,
	0x75, 0x73, 0x68, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x35,
	0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x50,
	0x75, 0x73, 0x68, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54,
	0x6f, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x6a, 0x0a, 0x13, 0x50, 0x75, 0x73, 0x68, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x77, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x2e, 0x61, 0x69, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x77, 0x4f, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x8e, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x39, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7c, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65,
	0x74, 0x12, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x12,
	0x33, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x79,
	0x0a, 0x0c, 0x50, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x12, 0x32,
	0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x69, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x73, 0x12, 0x32,
	0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x41, 0x64, 0x64,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x12, 0x37,
	0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x41,
	0x64, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x70, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x12, 0x3c, 0x2e, 0x61, 0x69,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x14, 0x50, 0x75, 0x6c, 0x6c, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x12, 0x3a, 0x2e, 0x61,
	0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x50, 0x75, 0x6c,
	0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x09, 0x50, 0x75, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x50, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x8f, 0x01, 0x0a, 0x12, 0x50, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x50, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x64, 0x2e, 0x50, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x5c, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x0c, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x64, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x70, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2f, 0x2e, 0x61,
	0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x85, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x76,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x31, 0x2e,
	0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x48, 0x75, 0x62, 0x12, 0x37, 0x2e, 0x61,
	0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x48, 0x75, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x48, 0x75, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x66, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x48, 0x75, 0x62, 0x12, 0x37, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x48, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x10, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x48, 0x75, 0x62, 0x12, 0x36,
	0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x48, 0x75, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x48, 0x75, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x48, 0x75, 0x62, 0x12, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x48,
	0x75, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x48, 0x75, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x48, 0x75, 0x62, 0x73, 0x12, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x48, 0x75, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x48, 0x75, 0x62, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x17, 0x41, 0x64,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x48, 0x75, 0x62, 0x12, 0x3d, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x54, 0x6f, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x48, 0x75, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7c,
	0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x48, 0x75, 0x62, 0x12, 0x42,
	0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x48, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a,
	0x22, 0x41, 0x64, 0x64, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x48, 0x75, 0x62, 0x12, 0x48, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x48, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x27, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x48, 0x75, 0x62, 0x12, 0x4d, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x48, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0xa6, 0x01, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x2e, 0x61,
	0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x42, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x7c, 0x0a, 0x1c, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x42, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x64, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x31, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x1c, 0x53, 0x68,
	0x6f, 0x77, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x43, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x64, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x12, 0x2e, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x09, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x64, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6e, 0x61, 0x79, 0x6f, 0x74, 0x74, 0x61, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x64,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_service_proto_goTypes = []interface{}{
	(*CreateDeviceRequest)(nil),                            // 0: ai.metathings.service.deviced.CreateDeviceRequest
	(*DeleteDeviceRequest)(nil),                            // 1: ai.metathings.service.deviced.DeleteDeviceRequest
	(*PatchDeviceRequest)(nil),                             // 2: ai.metathings.service.deviced.PatchDeviceRequest
	(*GetDeviceRequest)(nil),                               // 3: ai.metathings.service.deviced.GetDeviceRequest
	(*ListDevicesRequest)(nil),                             // 4: ai.metathings.service.deviced.ListDevicesRequest
	(*GetDeviceByModuleRequest)(nil),                       // 5: ai.metathings.service.deviced.GetDeviceByModuleRequest
	(*CreateConfigRequest)(nil),                            // 6: ai.metathings.service.deviced.CreateConfigRequest
	(*DeleteConfigRequest)(nil),                            // 7: ai.metathings.service.deviced.DeleteConfigRequest
	(*PatchConfigRequest)(nil),                             // 8: ai.metathings.service.deviced.PatchConfigRequest
	(*GetConfigRequest)(nil),                               // 9: ai.metathings.service.deviced.GetConfigRequest
	(*ListConfigsRequest)(nil),                             // 10: ai.metathings.service.deviced.ListConfigsRequest
	(*AddConfigsToDeviceRequest)(nil),                      // 11: ai.metathings.service.deviced.AddConfigsToDeviceRequest
	(*RemoveConfigsFromDeviceRequest)(nil),                 // 12: ai.metathings.service.deviced.RemoveConfigsFromDeviceRequest
	(*ListConfigsByDeviceRequest)(nil),                     // 13: ai.metathings.service.deviced.ListConfigsByDeviceRequest
	(*UploadDescriptorRequest)(nil),                        // 14: ai.metathings.service.deviced.UploadDescriptorRequest
	(*GetDescriptorRequest)(nil),                           // 15: ai.metathings.service.deviced.GetDescriptorRequest
	(*UnaryCallRequest)(nil),                               // 16: ai.metathings.service.deviced.UnaryCallRequest
	(*StreamCallRequest)(nil),                              // 17: ai.metathings.service.deviced.StreamCallRequest
	(*PullFrameFromFlowRequest)(nil),                       // 18: ai.metathings.service.deviced.PullFrameFromFlowRequest
	(*PushFrameToFlowRequest)(nil),                         // 19: ai.metathings.service.deviced.PushFrameToFlowRequest
	(*PushFrameToFlowOnceRequest)(nil),                     // 20: ai.metathings.service.deviced.PushFrameToFlowOnceRequest
	(*QueryFramesFromFlowRequest)(nil),                     // 21: ai.metathings.service.deviced.QueryFramesFromFlowRequest
	(*CreateFlowSetRequest)(nil),                           // 22: ai.metathings.service.deviced.CreateFlowSetRequest
	(*DeleteFlowSetRequest)(nil),                           // 23: ai.metathings.service.deviced.DeleteFlowSetRequest
	(*PatchFlowSetRequest)(nil),                            // 24: ai.metathings.service.deviced.PatchFlowSetRequest
	(*GetFlowSetRequest)(nil),                              // 25: ai.metathings.service.deviced.GetFlowSetRequest
	(*ListFlowSetsRequest)(nil),                            // 26: ai.metathings.service.deviced.ListFlowSetsRequest
	(*AddFlowsToFlowSetRequest)(nil),                       // 27: ai.metathings.service.deviced.AddFlowsToFlowSetRequest
	(*RemoveFlowsFromFlowSetRequest)(nil),                  // 28: ai.metathings.service.deviced.RemoveFlowsFromFlowSetRequest
	(*PullFrameFromFlowSetRequest)(nil),                    // 29: ai.metathings.service.deviced.PullFrameFromFlowSetRequest
	(*PutObjectRequest)(nil),                               // 30: ai.metathings.service.deviced.PutObjectRequest
	(*PutObjectStreamingRequest)(nil),                      // 31: ai.metathings.service.deviced.PutObjectStreamingRequest
	(*RemoveObjectRequest)(nil),                            // 32: ai.metathings.service.deviced.RemoveObjectRequest
	(*RenameObjectRequest)(nil),                            // 33: ai.metathings.service.deviced.RenameObjectRequest
	(*GetObjectRequest)(nil),                               // 34: ai.metathings.service.deviced.GetObjectRequest
	(*GetObjectContentRequest)(nil),                        // 35: ai.metathings.service.deviced.GetObjectContentRequest
	(*GetObjectStreamingContentRequest)(nil),               // 36: ai.metathings.service.deviced.GetObjectStreamingContentRequest
	(*ListObjectsRequest)(nil),                             // 37: ai.metathings.service.deviced.ListObjectsRequest
	(*CreateFirmwareHubRequest)(nil),                       // 38: ai.metathings.service.deviced.CreateFirmwareHubRequest
	(*DeleteFirmwareHubRequest)(nil),                       // 39: ai.metathings.service.deviced.DeleteFirmwareHubRequest
	(*PatchFirmwareHubRequest)(nil),                        // 40: ai.metathings.service.deviced.PatchFirmwareHubRequest
	(*GetFirmwareHubRequest)(nil),                          // 41: ai.metathings.service.deviced.GetFirmwareHubRequest
	(*ListFirmwareHubsRequest)(nil),                        // 42: ai.metathings.service.deviced.ListFirmwareHubsRequest
	(*AddDevicesToFirmwareHubRequest)(nil),                 // 43: ai.metathings.service.deviced.AddDevicesToFirmwareHubRequest
	(*RemoveDevicesFromFirmwareHubRequest)(nil),            // 44: ai.metathings.service.deviced.RemoveDevicesFromFirmwareHubRequest
	(*AddFirmwareDescriptorToFirmwareHubRequest)(nil),      // 45: ai.metathings.service.deviced.AddFirmwareDescriptorToFirmwareHubRequest
	(*RemoveFirmwareDescriptorFromFirmwareHubRequest)(nil), // 46: ai.metathings.service.deviced.RemoveFirmwareDescriptorFromFirmwareHubRequest
	(*GetDeviceFirmwareDescriptorRequest)(nil),             // 47: ai.metathings.service.deviced.GetDeviceFirmwareDescriptorRequest
	(*SetDeviceFirmwareDescriptorRequest)(nil),             // 48: ai.metathings.service.deviced.SetDeviceFirmwareDescriptorRequest
	(*SyncDeviceFirmwareDescriptorRequest)(nil),            // 49: ai.metathings.service.deviced.SyncDeviceFirmwareDescriptorRequest
	(*emptypb.Empty)(nil),                                  // 50: google.protobuf.Empty
	(*ConnectResponse)(nil),                                // 51: ai.metathings.service.deviced.ConnectResponse
	(*HeartbeatRequest)(nil),                               // 52: ai.metathings.service.deviced.HeartbeatRequest
	(*CreateDeviceResponse)(nil),                           // 53: ai.metathings.service.deviced.CreateDeviceResponse
	(*PatchDeviceResponse)(nil),                            // 54: ai.metathings.service.deviced.PatchDeviceResponse
	(*GetDeviceResponse)(nil),                              // 55: ai.metathings.service.deviced.GetDeviceResponse
	(*ListDevicesResponse)(nil),                            // 56: ai.metathings.service.deviced.ListDevicesResponse
	(*GetDeviceByModuleResponse)(nil),                      // 57: ai.metathings.service.deviced.GetDeviceByModuleResponse
	(*CreateConfigResponse)(nil),                           // 58: ai.metathings.service.deviced.CreateConfigResponse
	(*PatchConfigResponse)(nil),                            // 59: ai.metathings.service.deviced.PatchConfigResponse
	(*GetConfigResponse)(nil),                              // 60: ai.metathings.service.deviced.GetConfigResponse
	(*ListConfigsResponse)(nil),                            // 61: ai.metathings.service.deviced.ListConfigsResponse
	(*ListConfigsByDeviceResponse)(nil),                    // 62: ai.metathings.service.deviced.ListConfigsByDeviceResponse
	(*UploadDescriptorResponse)(nil),                       // 63: ai.metathings.service.deviced.UploadDescriptorResponse
	(*GetDescriptorResponse)(nil),                          // 64: ai.metathings.service.deviced.GetDescriptorResponse
	(*UnaryCallResponse)(nil),                              // 65: ai.metathings.service.deviced.UnaryCallResponse
	(*StreamCallResponse)(nil),                             // 66: ai.metathings.service.deviced.StreamCallResponse
	(*PullFrameFromFlowResponse)(nil),                      // 67: ai.metathings.service.deviced.PullFrameFromFlowResponse
	(*PushFrameToFlowResponse)(nil),                        // 68: ai.metathings.service.deviced.PushFrameToFlowResponse
	(*QueryFramesFromFlowResponse)(nil),                    // 69: ai.metathings.service.deviced.QueryFramesFromFlowResponse
	(*CreateFlowSetResponse)(nil),                          // 70: ai.metathings.service.deviced.CreateFlowSetResponse
	(*PatchFlowSetResponse)(nil),                           // 71: ai.metathings.service.deviced.PatchFlowSetResponse
	(*GetFlowSetResponse)(nil),                             // 72: ai.metathings.service.deviced.GetFlowSetResponse
	(*ListFlowSetsResponse)(nil),                           // 73: ai.metathings.service.deviced.ListFlowSetsResponse
	(*PullFrameFromFlowSetResponse)(nil),                   // 74: ai.metathings.service.deviced.PullFrameFromFlowSetResponse
	(*PutObjectStreamingResponse)(nil),                     // 75: ai.metathings.service.deviced.PutObjectStreamingResponse
	(*GetObjectResponse)(nil),                              // 76: ai.metathings.service.deviced.GetObjectResponse
	(*GetObjectContentResponse)(nil),                       // 77: ai.metathings.service.deviced.GetObjectContentResponse
	(*GetObjectStreamingContentResponse)(nil),              // 78: ai.metathings.service.deviced.GetObjectStreamingContentResponse
	(*ListObjectsResponse)(nil),                            // 79: ai.metathings.service.deviced.ListObjectsResponse
	(*CreateFirmwareHubResponse)(nil),                      // 80: ai.metathings.service.deviced.CreateFirmwareHubResponse
	(*PatchFirmwareHubResponse)(nil),                       // 81: ai.metathings.service.deviced.PatchFirmwareHubResponse
	(*GetFirmwareHubResponse)(nil),                         // 82: ai.metathings.service.deviced.GetFirmwareHubResponse
	(*ListFirmwareHubsResponse)(nil),                       // 83: ai.metathings.service.deviced.ListFirmwareHubsResponse
	(*GetDeviceFirmwareDescriptorResponse)(nil),            // 84: ai.metathings.service.deviced.GetDeviceFirmwareDescriptorResponse
	(*ShowDeviceResponse)(nil),                             // 85: ai.metathings.service.deviced.ShowDeviceResponse
	(*ShowDeviceFirmwareDescriptorResponse)(nil),           // 86: ai.metathings.service.deviced.ShowDeviceFirmwareDescriptorResponse
	(*ConnectRequest)(nil),                                 // 87: ai.metathings.service.deviced.ConnectRequest
}
var file_service_proto_depIdxs = []int32{
	0,  // 0: ai.metathings.service.deviced.DevicedService.CreateDevice:input_type -> ai.metathings.service.deviced.CreateDeviceRequest
	1,  // 1: ai.metathings.service.deviced.DevicedService.DeleteDevice:input_type -> ai.metathings.service.deviced.DeleteDeviceRequest
	2,  // 2: ai.metathings.service.deviced.DevicedService.PatchDevice:input_type -> ai.metathings.service.deviced.PatchDeviceRequest
	3,  // 3: ai.metathings.service.deviced.DevicedService.GetDevice:input_type -> ai.metathings.service.deviced.GetDeviceRequest
	4,  // 4: ai.metathings.service.deviced.DevicedService.ListDevices:input_type -> ai.metathings.service.deviced.ListDevicesRequest
	5,  // 5: ai.metathings.service.deviced.DevicedService.GetDeviceByModule:input_type -> ai.metathings.service.deviced.GetDeviceByModuleRequest
	6,  // 6: ai.metathings.service.deviced.DevicedService.CreateConfig:input_type -> ai.metathings.service.deviced.CreateConfigRequest
	7,  // 7: ai.metathings.service.deviced.DevicedService.DeleteConfig:input_type -> ai.metathings.service.deviced.DeleteConfigRequest
	8,  // 8: ai.metathings.service.deviced.DevicedService.PatchConfig:input_type -> ai.metathings.service.deviced.PatchConfigRequest
	9,  // 9: ai.metathings.service.deviced.DevicedService.GetConfig:input_type -> ai.metathings.service.deviced.GetConfigRequest
	10, // 10: ai.metathings.service.deviced.DevicedService.ListConfigs:input_type -> ai.metathings.service.deviced.ListConfigsRequest
	11, // 11: ai.metathings.service.deviced.DevicedService.AddConfigsToDevice:input_type -> ai.metathings.service.deviced.AddConfigsToDeviceRequest
	12, // 12: ai.metathings.service.deviced.DevicedService.RemoveConfigsFromDevice:input_type -> ai.metathings.service.deviced.RemoveConfigsFromDeviceRequest
	13, // 13: ai.metathings.service.deviced.DevicedService.ListConfigsByDevice:input_type -> ai.metathings.service.deviced.ListConfigsByDeviceRequest
	14, // 14: ai.metathings.service.deviced.DevicedService.UploadDescriptor:input_type -> ai.metathings.service.deviced.UploadDescriptorRequest
	15, // 15: ai.metathings.service.deviced.DevicedService.GetDescriptor:input_type -> ai.metathings.service.deviced.GetDescriptorRequest
	16, // 16: ai.metathings.service.deviced.DevicedService.UnaryCall:input_type -> ai.metathings.service.deviced.UnaryCallRequest
	17, // 17: ai.metathings.service.deviced.DevicedService.StreamCall:input_type -> ai.metathings.service.deviced.StreamCallRequest
	18, // 18: ai.metathings.service.deviced.DevicedService.PullFrameFromFlow:input_type -> ai.metathings.service.deviced.PullFrameFromFlowRequest
	19, // 19: ai.metathings.service.deviced.DevicedService.PushFrameToFlow:input_type -> ai.metathings.service.deviced.PushFrameToFlowRequest
	20, // 20: ai.metathings.service.deviced.DevicedService.PushFrameToFlowOnce:input_type -> ai.metathings.service.deviced.PushFrameToFlowOnceRequest
	21, // 21: ai.metathings.service.deviced.DevicedService.QueryFramesFromFlow:input_type -> ai.metathings.service.deviced.QueryFramesFromFlowRequest
	22, // 22: ai.metathings.service.deviced.DevicedService.CreateFlowSet:input_type -> ai.metathings.service.deviced.CreateFlowSetRequest
	23, // 23: ai.metathings.service.deviced.DevicedService.DeleteFlowSet:input_type -> ai.metathings.service.deviced.DeleteFlowSetRequest
	24, // 24: ai.metathings.service.deviced.DevicedService.PatchFlowSet:input_type -> ai.metathings.service.deviced.PatchFlowSetRequest
	25, // 25: ai.metathings.service.deviced.DevicedService.GetFlowSet:input_type -> ai.metathings.service.deviced.GetFlowSetRequest
	26, // 26: ai.metathings.service.deviced.DevicedService.ListFlowSets:input_type -> ai.metathings.service.deviced.ListFlowSetsRequest
	27, // 27: ai.metathings.service.deviced.DevicedService.AddFlowsToFlowSet:input_type -> ai.metathings.service.deviced.AddFlowsToFlowSetRequest
	28, // 28: ai.metathings.service.deviced.DevicedService.RemoveFlowsFromFlowSet:input_type -> ai.metathings.service.deviced.RemoveFlowsFromFlowSetRequest
	29, // 29: ai.metathings.service.deviced.DevicedService.PullFrameFromFlowSet:input_type -> ai.metathings.service.deviced.PullFrameFromFlowSetRequest
	30, // 30: ai.metathings.service.deviced.DevicedService.PutObject:input_type -> ai.metathings.service.deviced.PutObjectRequest
	31, // 31: ai.metathings.service.deviced.DevicedService.PutObjectStreaming:input_type -> ai.metathings.service.deviced.PutObjectStreamingRequest
	32, // 32: ai.metathings.service.deviced.DevicedService.RemoveObject:input_type -> ai.metathings.service.deviced.RemoveObjectRequest
	33, // 33: ai.metathings.service.deviced.DevicedService.RenameObject:input_type -> ai.metathings.service.deviced.RenameObjectRequest
	34, // 34: ai.metathings.service.deviced.DevicedService.GetObject:input_type -> ai.metathings.service.deviced.GetObjectRequest
	35, // 35: ai.metathings.service.deviced.DevicedService.GetObjectContent:input_type -> ai.metathings.service.deviced.GetObjectContentRequest
	36, // 36: ai.metathings.service.deviced.DevicedService.GetObjectStreamingContent:input_type -> ai.metathings.service.deviced.GetObjectStreamingContentRequest
	37, // 37: ai.metathings.service.deviced.DevicedService.ListObjects:input_type -> ai.metathings.service.deviced.ListObjectsRequest
	38, // 38: ai.metathings.service.deviced.DevicedService.CreateFirmwareHub:input_type -> ai.metathings.service.deviced.CreateFirmwareHubRequest
	39, // 39: ai.metathings.service.deviced.DevicedService.DeleteFirmwareHub:input_type -> ai.metathings.service.deviced.DeleteFirmwareHubRequest
	40, // 40: ai.metathings.service.deviced.DevicedService.PatchFirmwareHub:input_type -> ai.metathings.service.deviced.PatchFirmwareHubRequest
	41, // 41: ai.metathings.service.deviced.DevicedService.GetFirmwareHub:input_type -> ai.metathings.service.deviced.GetFirmwareHubRequest
	42, // 42: ai.metathings.service.deviced.DevicedService.ListFirmwareHubs:input_type -> ai.metathings.service.deviced.ListFirmwareHubsRequest
	43, // 43: ai.metathings.service.deviced.DevicedService.AddDevicesToFirmwareHub:input_type -> ai.metathings.service.deviced.AddDevicesToFirmwareHubRequest
	44, // 44: ai.metathings.service.deviced.DevicedService.RemoveDevicesFromFirmwareHub:input_type -> ai.metathings.service.deviced.RemoveDevicesFromFirmwareHubRequest
	45, // 45: ai.metathings.service.deviced.DevicedService.AddFirmwareDescriptorToFirmwareHub:input_type -> ai.metathings.service.deviced.AddFirmwareDescriptorToFirmwareHubRequest
	46, // 46: ai.metathings.service.deviced.DevicedService.RemoveFirmwareDescriptorFromFirmwareHub:input_type -> ai.metathings.service.deviced.RemoveFirmwareDescriptorFromFirmwareHubRequest
	47, // 47: ai.metathings.service.deviced.DevicedService.GetDeviceFirmwareDescriptor:input_type -> ai.metathings.service.deviced.GetDeviceFirmwareDescriptorRequest
	48, // 48: ai.metathings.service.deviced.DevicedService.SetDeviceFirmwareDescriptor:input_type -> ai.metathings.service.deviced.SetDeviceFirmwareDescriptorRequest
	49, // 49: ai.metathings.service.deviced.DevicedService.SyncDeviceFirmwareDescriptor:input_type -> ai.metathings.service.deviced.SyncDeviceFirmwareDescriptorRequest
	50, // 50: ai.metathings.service.deviced.DevicedService.ShowDevice:input_type -> google.protobuf.Empty
	50, // 51: ai.metathings.service.deviced.DevicedService.ShowDeviceFirmwareDescriptor:input_type -> google.protobuf.Empty
	51, // 52: ai.metathings.service.deviced.DevicedService.Connect:input_type -> ai.metathings.service.deviced.ConnectResponse
	52, // 53: ai.metathings.service.deviced.DevicedService.Heartbeat:input_type -> ai.metathings.service.deviced.HeartbeatRequest
	53, // 54: ai.metathings.service.deviced.DevicedService.CreateDevice:output_type -> ai.metathings.service.deviced.CreateDeviceResponse
	50, // 55: ai.metathings.service.deviced.DevicedService.DeleteDevice:output_type -> google.protobuf.Empty
	54, // 56: ai.metathings.service.deviced.DevicedService.PatchDevice:output_type -> ai.metathings.service.deviced.PatchDeviceResponse
	55, // 57: ai.metathings.service.deviced.DevicedService.GetDevice:output_type -> ai.metathings.service.deviced.GetDeviceResponse
	56, // 58: ai.metathings.service.deviced.DevicedService.ListDevices:output_type -> ai.metathings.service.deviced.ListDevicesResponse
	57, // 59: ai.metathings.service.deviced.DevicedService.GetDeviceByModule:output_type -> ai.metathings.service.deviced.GetDeviceByModuleResponse
	58, // 60: ai.metathings.service.deviced.DevicedService.CreateConfig:output_type -> ai.metathings.service.deviced.CreateConfigResponse
	50, // 61: ai.metathings.service.deviced.DevicedService.DeleteConfig:output_type -> google.protobuf.Empty
	59, // 62: ai.metathings.service.deviced.DevicedService.PatchConfig:output_type -> ai.metathings.service.deviced.PatchConfigResponse
	60, // 63: ai.metathings.service.deviced.DevicedService.GetConfig:output_type -> ai.metathings.service.deviced.GetConfigResponse
	61, // 64: ai.metathings.service.deviced.DevicedService.ListConfigs:output_type -> ai.metathings.service.deviced.ListConfigsResponse
	50, // 65: ai.metathings.service.deviced.DevicedService.AddConfigsToDevice:output_type -> google.protobuf.Empty
	50, // 66: ai.metathings.service.deviced.DevicedService.RemoveConfigsFromDevice:output_type -> google.protobuf.Empty
	62, // 67: ai.metathings.service.deviced.DevicedService.ListConfigsByDevice:output_type -> ai.metathings.service.deviced.ListConfigsByDeviceResponse
	63, // 68: ai.metathings.service.deviced.DevicedService.UploadDescriptor:output_type -> ai.metathings.service.deviced.UploadDescriptorResponse
	64, // 69: ai.metathings.service.deviced.DevicedService.GetDescriptor:output_type -> ai.metathings.service.deviced.GetDescriptorResponse
	65, // 70: ai.metathings.service.deviced.DevicedService.UnaryCall:output_type -> ai.metathings.service.deviced.UnaryCallResponse
	66, // 71: ai.metathings.service.deviced.DevicedService.StreamCall:output_type -> ai.metathings.service.deviced.StreamCallResponse
	67, // 72: ai.metathings.service.deviced.DevicedService.PullFrameFromFlow:output_type -> ai.metathings.service.deviced.PullFrameFromFlowResponse
	68, // 73: ai.metathings.service.deviced.DevicedService.PushFrameToFlow:output_type -> ai.metathings.service.deviced.PushFrameToFlowResponse
	50, // 74: ai.metathings.service.deviced.DevicedService.PushFrameToFlowOnce:output_type -> google.protobuf.Empty
	69, // 75: ai.metathings.service.deviced.DevicedService.QueryFramesFromFlow:output_type -> ai.metathings.service.deviced.QueryFramesFromFlowResponse
	70, // 76: ai.metathings.service.deviced.DevicedService.CreateFlowSet:output_type -> ai.metathings.service.deviced.CreateFlowSetResponse
	50, // 77: ai.metathings.service.deviced.DevicedService.DeleteFlowSet:output_type -> google.protobuf.Empty
	71, // 78: ai.metathings.service.deviced.DevicedService.PatchFlowSet:output_type -> ai.metathings.service.deviced.PatchFlowSetResponse
	72, // 79: ai.metathings.service.deviced.DevicedService.GetFlowSet:output_type -> ai.metathings.service.deviced.GetFlowSetResponse
	73, // 80: ai.metathings.service.deviced.DevicedService.ListFlowSets:output_type -> ai.metathings.service.deviced.ListFlowSetsResponse
	50, // 81: ai.metathings.service.deviced.DevicedService.AddFlowsToFlowSet:output_type -> google.protobuf.Empty
	50, // 82: ai.metathings.service.deviced.DevicedService.RemoveFlowsFromFlowSet:output_type -> google.protobuf.Empty
	74, // 83: ai.metathings.service.deviced.DevicedService.PullFrameFromFlowSet:output_type -> ai.metathings.service.deviced.PullFrameFromFlowSetResponse
	50, // 84: ai.metathings.service.deviced.DevicedService.PutObject:output_type -> google.protobuf.Empty
	75, // 85: ai.metathings.service.deviced.DevicedService.PutObjectStreaming:output_type -> ai.metathings.service.deviced.PutObjectStreamingResponse
	50, // 86: ai.metathings.service.deviced.DevicedService.RemoveObject:output_type -> google.protobuf.Empty
	50, // 87: ai.metathings.service.deviced.DevicedService.RenameObject:output_type -> google.protobuf.Empty
	76, // 88: ai.metathings.service.deviced.DevicedService.GetObject:output_type -> ai.metathings.service.deviced.GetObjectResponse
	77, // 89: ai.metathings.service.deviced.DevicedService.GetObjectContent:output_type -> ai.metathings.service.deviced.GetObjectContentResponse
	78, // 90: ai.metathings.service.deviced.DevicedService.GetObjectStreamingContent:output_type -> ai.metathings.service.deviced.GetObjectStreamingContentResponse
	79, // 91: ai.metathings.service.deviced.DevicedService.ListObjects:output_type -> ai.metathings.service.deviced.ListObjectsResponse
	80, // 92: ai.metathings.service.deviced.DevicedService.CreateFirmwareHub:output_type -> ai.metathings.service.deviced.CreateFirmwareHubResponse
	50, // 93: ai.metathings.service.deviced.DevicedService.DeleteFirmwareHub:output_type -> google.protobuf.Empty
	81, // 94: ai.metathings.service.deviced.DevicedService.PatchFirmwareHub:output_type -> ai.metathings.service.deviced.PatchFirmwareHubResponse
	82, // 95: ai.metathings.service.deviced.DevicedService.GetFirmwareHub:output_type -> ai.metathings.service.deviced.GetFirmwareHubResponse
	83, // 96: ai.metathings.service.deviced.DevicedService.ListFirmwareHubs:output_type -> ai.metathings.service.deviced.ListFirmwareHubsResponse
	50, // 97: ai.metathings.service.deviced.DevicedService.AddDevicesToFirmwareHub:output_type -> google.protobuf.Empty
	50, // 98: ai.metathings.service.deviced.DevicedService.RemoveDevicesFromFirmwareHub:output_type -> google.protobuf.Empty
	50, // 99: ai.metathings.service.deviced.DevicedService.AddFirmwareDescriptorToFirmwareHub:output_type -> google.protobuf.Empty
	50, // 100: ai.metathings.service.deviced.DevicedService.RemoveFirmwareDescriptorFromFirmwareHub:output_type -> google.protobuf.Empty
	84, // 101: ai.metathings.service.deviced.DevicedService.GetDeviceFirmwareDescriptor:output_type -> ai.metathings.service.deviced.GetDeviceFirmwareDescriptorResponse
	50, // 102: ai.metathings.service.deviced.DevicedService.SetDeviceFirmwareDescriptor:output_type -> google.protobuf.Empty
	50, // 103: ai.metathings.service.deviced.DevicedService.SyncDeviceFirmwareDescriptor:output_type -> google.protobuf.Empty
	85, // 104: ai.metathings.service.deviced.DevicedService.ShowDevice:output_type -> ai.metathings.service.deviced.ShowDeviceResponse
	86, // 105: ai.metathings.service.deviced.DevicedService.ShowDeviceFirmwareDescriptor:output_type -> ai.metathings.service.deviced.ShowDeviceFirmwareDescriptorResponse
	87, // 106: ai.metathings.service.deviced.DevicedService.Connect:output_type -> ai.metathings.service.deviced.ConnectRequest
	50, // 107: ai.metathings.service.deviced.DevicedService.Heartbeat:output_type -> google.protobuf.Empty
	54, // [54:108] is the sub-list for method output_type
	0,  // [0:54] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	file_create_device_proto_init()
	file_delete_device_proto_init()
	file_patch_device_proto_init()
	file_get_device_proto_init()
	file_list_devices_proto_init()
	file_get_device_by_module_proto_init()
	file_create_config_proto_init()
	file_delete_config_proto_init()
	file_patch_config_proto_init()
	file_get_config_proto_init()
	file_list_configs_proto_init()
	file_add_configs_to_device_proto_init()
	file_remove_configs_from_device_proto_init()
	file_list_configs_by_device_proto_init()
	file_upload_descriptor_proto_init()
	file_get_descriptor_proto_init()
	file_unary_call_proto_init()
	file_stream_call_proto_init()
	file_pull_frame_from_flow_proto_init()
	file_push_frame_to_flow_proto_init()
	file_push_frame_to_flow_once_proto_init()
	file_query_frames_from_flow_proto_init()
	file_create_flow_set_proto_init()
	file_delete_flow_set_proto_init()
	file_patch_flow_set_proto_init()
	file_get_flow_set_proto_init()
	file_list_flow_sets_proto_init()
	file_add_flows_to_flow_set_proto_init()
	file_remove_flows_from_flow_set_proto_init()
	file_pull_frame_from_flow_set_proto_init()
	file_put_object_proto_init()
	file_put_object_streaming_proto_init()
	file_remove_object_proto_init()
	file_rename_object_proto_init()
	file_get_object_proto_init()
	file_get_object_content_proto_init()
	file_get_object_streaming_content_proto_init()
	file_list_objects_proto_init()
	file_create_firmware_hub_proto_init()
	file_delete_firmware_hub_proto_init()
	file_patch_firmware_hub_proto_init()
	file_get_firmware_hub_proto_init()
	file_list_firmware_hubs_proto_init()
	file_add_devices_to_firmware_hub_proto_init()
	file_remove_devices_from_firmware_hub_proto_init()
	file_add_firmware_descriptor_to_firmware_hub_proto_init()
	file_remove_firmware_descriptor_from_firmware_hub_proto_init()
	file_get_device_firmware_descriptor_proto_init()
	file_set_device_firmware_descriptor_proto_init()
	file_sync_device_firmware_descriptor_proto_init()
	file_show_device_proto_init()
	file_show_device_firmware_descriptor_proto_init()
	file_connect_proto_init()
	file_heartbeat_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DevicedServiceClient is the client API for DevicedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DevicedServiceClient interface {
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error)
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PatchDevice(ctx context.Context, in *PatchDeviceRequest, opts ...grpc.CallOption) (*PatchDeviceResponse, error)
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error)
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	GetDeviceByModule(ctx context.Context, in *GetDeviceByModuleRequest, opts ...grpc.CallOption) (*GetDeviceByModuleResponse, error)
	// Config
	CreateConfig(ctx context.Context, in *CreateConfigRequest, opts ...grpc.CallOption) (*CreateConfigResponse, error)
	DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PatchConfig(ctx context.Context, in *PatchConfigRequest, opts ...grpc.CallOption) (*PatchConfigResponse, error)
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	ListConfigs(ctx context.Context, in *ListConfigsRequest, opts ...grpc.CallOption) (*ListConfigsResponse, error)
	AddConfigsToDevice(ctx context.Context, in *AddConfigsToDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveConfigsFromDevice(ctx context.Context, in *RemoveConfigsFromDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListConfigsByDevice(ctx context.Context, in *ListConfigsByDeviceRequest, opts ...grpc.CallOption) (*ListConfigsByDeviceResponse, error)
	// Descriptor
	UploadDescriptor(ctx context.Context, in *UploadDescriptorRequest, opts ...grpc.CallOption) (*UploadDescriptorResponse, error)
	GetDescriptor(ctx context.Context, in *GetDescriptorRequest, opts ...grpc.CallOption) (*GetDescriptorResponse, error)
	// Calling
	UnaryCall(ctx context.Context, in *UnaryCallRequest, opts ...grpc.CallOption) (*UnaryCallResponse, error)
	StreamCall(ctx context.Context, opts ...grpc.CallOption) (DevicedService_StreamCallClient, error)
	// Flow
	PullFrameFromFlow(ctx context.Context, in *PullFrameFromFlowRequest, opts ...grpc.CallOption) (DevicedService_PullFrameFromFlowClient, error)
	PushFrameToFlow(ctx context.Context, opts ...grpc.CallOption) (DevicedService_PushFrameToFlowClient, error)
	PushFrameToFlowOnce(ctx context.Context, in *PushFrameToFlowOnceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QueryFramesFromFlow(ctx context.Context, in *QueryFramesFromFlowRequest, opts ...grpc.CallOption) (*QueryFramesFromFlowResponse, error)
	// Flow Set
	CreateFlowSet(ctx context.Context, in *CreateFlowSetRequest, opts ...grpc.CallOption) (*CreateFlowSetResponse, error)
	DeleteFlowSet(ctx context.Context, in *DeleteFlowSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PatchFlowSet(ctx context.Context, in *PatchFlowSetRequest, opts ...grpc.CallOption) (*PatchFlowSetResponse, error)
	GetFlowSet(ctx context.Context, in *GetFlowSetRequest, opts ...grpc.CallOption) (*GetFlowSetResponse, error)
	ListFlowSets(ctx context.Context, in *ListFlowSetsRequest, opts ...grpc.CallOption) (*ListFlowSetsResponse, error)
	AddFlowsToFlowSet(ctx context.Context, in *AddFlowsToFlowSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveFlowsFromFlowSet(ctx context.Context, in *RemoveFlowsFromFlowSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PullFrameFromFlowSet(ctx context.Context, in *PullFrameFromFlowSetRequest, opts ...grpc.CallOption) (DevicedService_PullFrameFromFlowSetClient, error)
	// Simple Storage
	PutObject(ctx context.Context, in *PutObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PutObjectStreaming(ctx context.Context, opts ...grpc.CallOption) (DevicedService_PutObjectStreamingClient, error)
	RemoveObject(ctx context.Context, in *RemoveObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RenameObject(ctx context.Context, in *RenameObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error)
	GetObjectContent(ctx context.Context, in *GetObjectContentRequest, opts ...grpc.CallOption) (*GetObjectContentResponse, error)
	GetObjectStreamingContent(ctx context.Context, in *GetObjectStreamingContentRequest, opts ...grpc.CallOption) (DevicedService_GetObjectStreamingContentClient, error)
	ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*ListObjectsResponse, error)
	// Firmware Hub
	CreateFirmwareHub(ctx context.Context, in *CreateFirmwareHubRequest, opts ...grpc.CallOption) (*CreateFirmwareHubResponse, error)
	DeleteFirmwareHub(ctx context.Context, in *DeleteFirmwareHubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PatchFirmwareHub(ctx context.Context, in *PatchFirmwareHubRequest, opts ...grpc.CallOption) (*PatchFirmwareHubResponse, error)
	GetFirmwareHub(ctx context.Context, in *GetFirmwareHubRequest, opts ...grpc.CallOption) (*GetFirmwareHubResponse, error)
	ListFirmwareHubs(ctx context.Context, in *ListFirmwareHubsRequest, opts ...grpc.CallOption) (*ListFirmwareHubsResponse, error)
	AddDevicesToFirmwareHub(ctx context.Context, in *AddDevicesToFirmwareHubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveDevicesFromFirmwareHub(ctx context.Context, in *RemoveDevicesFromFirmwareHubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddFirmwareDescriptorToFirmwareHub(ctx context.Context, in *AddFirmwareDescriptorToFirmwareHubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveFirmwareDescriptorFromFirmwareHub(ctx context.Context, in *RemoveFirmwareDescriptorFromFirmwareHubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDeviceFirmwareDescriptor(ctx context.Context, in *GetDeviceFirmwareDescriptorRequest, opts ...grpc.CallOption) (*GetDeviceFirmwareDescriptorResponse, error)
	SetDeviceFirmwareDescriptor(ctx context.Context, in *SetDeviceFirmwareDescriptorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SyncDeviceFirmwareDescriptor(ctx context.Context, in *SyncDeviceFirmwareDescriptorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// internal device only
	ShowDevice(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ShowDeviceResponse, error)
	ShowDeviceFirmwareDescriptor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ShowDeviceFirmwareDescriptorResponse, error)
	Connect(ctx context.Context, opts ...grpc.CallOption) (DevicedService_ConnectClient, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type devicedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDevicedServiceClient(cc grpc.ClientConnInterface) DevicedServiceClient {
	return &devicedServiceClient{cc}
}

func (c *devicedServiceClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error) {
	out := new(CreateDeviceResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) PatchDevice(ctx context.Context, in *PatchDeviceRequest, opts ...grpc.CallOption) (*PatchDeviceResponse, error) {
	out := new(PatchDeviceResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/PatchDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error) {
	out := new(GetDeviceResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/GetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) GetDeviceByModule(ctx context.Context, in *GetDeviceByModuleRequest, opts ...grpc.CallOption) (*GetDeviceByModuleResponse, error) {
	out := new(GetDeviceByModuleResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/GetDeviceByModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) CreateConfig(ctx context.Context, in *CreateConfigRequest, opts ...grpc.CallOption) (*CreateConfigResponse, error) {
	out := new(CreateConfigResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/CreateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/DeleteConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) PatchConfig(ctx context.Context, in *PatchConfigRequest, opts ...grpc.CallOption) (*PatchConfigResponse, error) {
	out := new(PatchConfigResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/PatchConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) ListConfigs(ctx context.Context, in *ListConfigsRequest, opts ...grpc.CallOption) (*ListConfigsResponse, error) {
	out := new(ListConfigsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/ListConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) AddConfigsToDevice(ctx context.Context, in *AddConfigsToDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/AddConfigsToDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) RemoveConfigsFromDevice(ctx context.Context, in *RemoveConfigsFromDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/RemoveConfigsFromDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) ListConfigsByDevice(ctx context.Context, in *ListConfigsByDeviceRequest, opts ...grpc.CallOption) (*ListConfigsByDeviceResponse, error) {
	out := new(ListConfigsByDeviceResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/ListConfigsByDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) UploadDescriptor(ctx context.Context, in *UploadDescriptorRequest, opts ...grpc.CallOption) (*UploadDescriptorResponse, error) {
	out := new(UploadDescriptorResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/UploadDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) GetDescriptor(ctx context.Context, in *GetDescriptorRequest, opts ...grpc.CallOption) (*GetDescriptorResponse, error) {
	out := new(GetDescriptorResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/GetDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) UnaryCall(ctx context.Context, in *UnaryCallRequest, opts ...grpc.CallOption) (*UnaryCallResponse, error) {
	out := new(UnaryCallResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/UnaryCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) StreamCall(ctx context.Context, opts ...grpc.CallOption) (DevicedService_StreamCallClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DevicedService_serviceDesc.Streams[0], "/ai.metathings.service.deviced.DevicedService/StreamCall", opts...)
	if err != nil {
		return nil, err
	}
	x := &devicedServiceStreamCallClient{stream}
	return x, nil
}

type DevicedService_StreamCallClient interface {
	Send(*StreamCallRequest) error
	Recv() (*StreamCallResponse, error)
	grpc.ClientStream
}

type devicedServiceStreamCallClient struct {
	grpc.ClientStream
}

func (x *devicedServiceStreamCallClient) Send(m *StreamCallRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *devicedServiceStreamCallClient) Recv() (*StreamCallResponse, error) {
	m := new(StreamCallResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *devicedServiceClient) PullFrameFromFlow(ctx context.Context, in *PullFrameFromFlowRequest, opts ...grpc.CallOption) (DevicedService_PullFrameFromFlowClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DevicedService_serviceDesc.Streams[1], "/ai.metathings.service.deviced.DevicedService/PullFrameFromFlow", opts...)
	if err != nil {
		return nil, err
	}
	x := &devicedServicePullFrameFromFlowClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DevicedService_PullFrameFromFlowClient interface {
	Recv() (*PullFrameFromFlowResponse, error)
	grpc.ClientStream
}

type devicedServicePullFrameFromFlowClient struct {
	grpc.ClientStream
}

func (x *devicedServicePullFrameFromFlowClient) Recv() (*PullFrameFromFlowResponse, error) {
	m := new(PullFrameFromFlowResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *devicedServiceClient) PushFrameToFlow(ctx context.Context, opts ...grpc.CallOption) (DevicedService_PushFrameToFlowClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DevicedService_serviceDesc.Streams[2], "/ai.metathings.service.deviced.DevicedService/PushFrameToFlow", opts...)
	if err != nil {
		return nil, err
	}
	x := &devicedServicePushFrameToFlowClient{stream}
	return x, nil
}

type DevicedService_PushFrameToFlowClient interface {
	Send(*PushFrameToFlowRequest) error
	Recv() (*PushFrameToFlowResponse, error)
	grpc.ClientStream
}

type devicedServicePushFrameToFlowClient struct {
	grpc.ClientStream
}

func (x *devicedServicePushFrameToFlowClient) Send(m *PushFrameToFlowRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *devicedServicePushFrameToFlowClient) Recv() (*PushFrameToFlowResponse, error) {
	m := new(PushFrameToFlowResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *devicedServiceClient) PushFrameToFlowOnce(ctx context.Context, in *PushFrameToFlowOnceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/PushFrameToFlowOnce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) QueryFramesFromFlow(ctx context.Context, in *QueryFramesFromFlowRequest, opts ...grpc.CallOption) (*QueryFramesFromFlowResponse, error) {
	out := new(QueryFramesFromFlowResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/QueryFramesFromFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) CreateFlowSet(ctx context.Context, in *CreateFlowSetRequest, opts ...grpc.CallOption) (*CreateFlowSetResponse, error) {
	out := new(CreateFlowSetResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/CreateFlowSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) DeleteFlowSet(ctx context.Context, in *DeleteFlowSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/DeleteFlowSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) PatchFlowSet(ctx context.Context, in *PatchFlowSetRequest, opts ...grpc.CallOption) (*PatchFlowSetResponse, error) {
	out := new(PatchFlowSetResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/PatchFlowSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) GetFlowSet(ctx context.Context, in *GetFlowSetRequest, opts ...grpc.CallOption) (*GetFlowSetResponse, error) {
	out := new(GetFlowSetResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/GetFlowSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) ListFlowSets(ctx context.Context, in *ListFlowSetsRequest, opts ...grpc.CallOption) (*ListFlowSetsResponse, error) {
	out := new(ListFlowSetsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/ListFlowSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) AddFlowsToFlowSet(ctx context.Context, in *AddFlowsToFlowSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/AddFlowsToFlowSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) RemoveFlowsFromFlowSet(ctx context.Context, in *RemoveFlowsFromFlowSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/RemoveFlowsFromFlowSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) PullFrameFromFlowSet(ctx context.Context, in *PullFrameFromFlowSetRequest, opts ...grpc.CallOption) (DevicedService_PullFrameFromFlowSetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DevicedService_serviceDesc.Streams[3], "/ai.metathings.service.deviced.DevicedService/PullFrameFromFlowSet", opts...)
	if err != nil {
		return nil, err
	}
	x := &devicedServicePullFrameFromFlowSetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DevicedService_PullFrameFromFlowSetClient interface {
	Recv() (*PullFrameFromFlowSetResponse, error)
	grpc.ClientStream
}

type devicedServicePullFrameFromFlowSetClient struct {
	grpc.ClientStream
}

func (x *devicedServicePullFrameFromFlowSetClient) Recv() (*PullFrameFromFlowSetResponse, error) {
	m := new(PullFrameFromFlowSetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *devicedServiceClient) PutObject(ctx context.Context, in *PutObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/PutObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) PutObjectStreaming(ctx context.Context, opts ...grpc.CallOption) (DevicedService_PutObjectStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DevicedService_serviceDesc.Streams[4], "/ai.metathings.service.deviced.DevicedService/PutObjectStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &devicedServicePutObjectStreamingClient{stream}
	return x, nil
}

type DevicedService_PutObjectStreamingClient interface {
	Send(*PutObjectStreamingRequest) error
	Recv() (*PutObjectStreamingResponse, error)
	grpc.ClientStream
}

type devicedServicePutObjectStreamingClient struct {
	grpc.ClientStream
}

func (x *devicedServicePutObjectStreamingClient) Send(m *PutObjectStreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *devicedServicePutObjectStreamingClient) Recv() (*PutObjectStreamingResponse, error) {
	m := new(PutObjectStreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *devicedServiceClient) RemoveObject(ctx context.Context, in *RemoveObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/RemoveObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) RenameObject(ctx context.Context, in *RenameObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/RenameObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error) {
	out := new(GetObjectResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/GetObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) GetObjectContent(ctx context.Context, in *GetObjectContentRequest, opts ...grpc.CallOption) (*GetObjectContentResponse, error) {
	out := new(GetObjectContentResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/GetObjectContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) GetObjectStreamingContent(ctx context.Context, in *GetObjectStreamingContentRequest, opts ...grpc.CallOption) (DevicedService_GetObjectStreamingContentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DevicedService_serviceDesc.Streams[5], "/ai.metathings.service.deviced.DevicedService/GetObjectStreamingContent", opts...)
	if err != nil {
		return nil, err
	}
	x := &devicedServiceGetObjectStreamingContentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DevicedService_GetObjectStreamingContentClient interface {
	Recv() (*GetObjectStreamingContentResponse, error)
	grpc.ClientStream
}

type devicedServiceGetObjectStreamingContentClient struct {
	grpc.ClientStream
}

func (x *devicedServiceGetObjectStreamingContentClient) Recv() (*GetObjectStreamingContentResponse, error) {
	m := new(GetObjectStreamingContentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *devicedServiceClient) ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*ListObjectsResponse, error) {
	out := new(ListObjectsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/ListObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) CreateFirmwareHub(ctx context.Context, in *CreateFirmwareHubRequest, opts ...grpc.CallOption) (*CreateFirmwareHubResponse, error) {
	out := new(CreateFirmwareHubResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/CreateFirmwareHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) DeleteFirmwareHub(ctx context.Context, in *DeleteFirmwareHubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/DeleteFirmwareHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) PatchFirmwareHub(ctx context.Context, in *PatchFirmwareHubRequest, opts ...grpc.CallOption) (*PatchFirmwareHubResponse, error) {
	out := new(PatchFirmwareHubResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/PatchFirmwareHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) GetFirmwareHub(ctx context.Context, in *GetFirmwareHubRequest, opts ...grpc.CallOption) (*GetFirmwareHubResponse, error) {
	out := new(GetFirmwareHubResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/GetFirmwareHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) ListFirmwareHubs(ctx context.Context, in *ListFirmwareHubsRequest, opts ...grpc.CallOption) (*ListFirmwareHubsResponse, error) {
	out := new(ListFirmwareHubsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/ListFirmwareHubs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) AddDevicesToFirmwareHub(ctx context.Context, in *AddDevicesToFirmwareHubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/AddDevicesToFirmwareHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) RemoveDevicesFromFirmwareHub(ctx context.Context, in *RemoveDevicesFromFirmwareHubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/RemoveDevicesFromFirmwareHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) AddFirmwareDescriptorToFirmwareHub(ctx context.Context, in *AddFirmwareDescriptorToFirmwareHubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/AddFirmwareDescriptorToFirmwareHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) RemoveFirmwareDescriptorFromFirmwareHub(ctx context.Context, in *RemoveFirmwareDescriptorFromFirmwareHubRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/RemoveFirmwareDescriptorFromFirmwareHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) GetDeviceFirmwareDescriptor(ctx context.Context, in *GetDeviceFirmwareDescriptorRequest, opts ...grpc.CallOption) (*GetDeviceFirmwareDescriptorResponse, error) {
	out := new(GetDeviceFirmwareDescriptorResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/GetDeviceFirmwareDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) SetDeviceFirmwareDescriptor(ctx context.Context, in *SetDeviceFirmwareDescriptorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/SetDeviceFirmwareDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) SyncDeviceFirmwareDescriptor(ctx context.Context, in *SyncDeviceFirmwareDescriptorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/SyncDeviceFirmwareDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) ShowDevice(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ShowDeviceResponse, error) {
	out := new(ShowDeviceResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/ShowDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) ShowDeviceFirmwareDescriptor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ShowDeviceFirmwareDescriptorResponse, error) {
	out := new(ShowDeviceFirmwareDescriptorResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/ShowDeviceFirmwareDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) Connect(ctx context.Context, opts ...grpc.CallOption) (DevicedService_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DevicedService_serviceDesc.Streams[6], "/ai.metathings.service.deviced.DevicedService/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &devicedServiceConnectClient{stream}
	return x, nil
}

type DevicedService_ConnectClient interface {
	Send(*ConnectResponse) error
	Recv() (*ConnectRequest, error)
	grpc.ClientStream
}

type devicedServiceConnectClient struct {
	grpc.ClientStream
}

func (x *devicedServiceConnectClient) Send(m *ConnectResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *devicedServiceConnectClient) Recv() (*ConnectRequest, error) {
	m := new(ConnectRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *devicedServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevicedServiceServer is the server API for DevicedService service.
type DevicedServiceServer interface {
	CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error)
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*emptypb.Empty, error)
	PatchDevice(context.Context, *PatchDeviceRequest) (*PatchDeviceResponse, error)
	GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceResponse, error)
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	GetDeviceByModule(context.Context, *GetDeviceByModuleRequest) (*GetDeviceByModuleResponse, error)
	// Config
	CreateConfig(context.Context, *CreateConfigRequest) (*CreateConfigResponse, error)
	DeleteConfig(context.Context, *DeleteConfigRequest) (*emptypb.Empty, error)
	PatchConfig(context.Context, *PatchConfigRequest) (*PatchConfigResponse, error)
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	ListConfigs(context.Context, *ListConfigsRequest) (*ListConfigsResponse, error)
	AddConfigsToDevice(context.Context, *AddConfigsToDeviceRequest) (*emptypb.Empty, error)
	RemoveConfigsFromDevice(context.Context, *RemoveConfigsFromDeviceRequest) (*emptypb.Empty, error)
	ListConfigsByDevice(context.Context, *ListConfigsByDeviceRequest) (*ListConfigsByDeviceResponse, error)
	// Descriptor
	UploadDescriptor(context.Context, *UploadDescriptorRequest) (*UploadDescriptorResponse, error)
	GetDescriptor(context.Context, *GetDescriptorRequest) (*GetDescriptorResponse, error)
	// Calling
	UnaryCall(context.Context, *UnaryCallRequest) (*UnaryCallResponse, error)
	StreamCall(DevicedService_StreamCallServer) error
	// Flow
	PullFrameFromFlow(*PullFrameFromFlowRequest, DevicedService_PullFrameFromFlowServer) error
	PushFrameToFlow(DevicedService_PushFrameToFlowServer) error
	PushFrameToFlowOnce(context.Context, *PushFrameToFlowOnceRequest) (*emptypb.Empty, error)
	QueryFramesFromFlow(context.Context, *QueryFramesFromFlowRequest) (*QueryFramesFromFlowResponse, error)
	// Flow Set
	CreateFlowSet(context.Context, *CreateFlowSetRequest) (*CreateFlowSetResponse, error)
	DeleteFlowSet(context.Context, *DeleteFlowSetRequest) (*emptypb.Empty, error)
	PatchFlowSet(context.Context, *PatchFlowSetRequest) (*PatchFlowSetResponse, error)
	GetFlowSet(context.Context, *GetFlowSetRequest) (*GetFlowSetResponse, error)
	ListFlowSets(context.Context, *ListFlowSetsRequest) (*ListFlowSetsResponse, error)
	AddFlowsToFlowSet(context.Context, *AddFlowsToFlowSetRequest) (*emptypb.Empty, error)
	RemoveFlowsFromFlowSet(context.Context, *RemoveFlowsFromFlowSetRequest) (*emptypb.Empty, error)
	PullFrameFromFlowSet(*PullFrameFromFlowSetRequest, DevicedService_PullFrameFromFlowSetServer) error
	// Simple Storage
	PutObject(context.Context, *PutObjectRequest) (*emptypb.Empty, error)
	PutObjectStreaming(DevicedService_PutObjectStreamingServer) error
	RemoveObject(context.Context, *RemoveObjectRequest) (*emptypb.Empty, error)
	RenameObject(context.Context, *RenameObjectRequest) (*emptypb.Empty, error)
	GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error)
	GetObjectContent(context.Context, *GetObjectContentRequest) (*GetObjectContentResponse, error)
	GetObjectStreamingContent(*GetObjectStreamingContentRequest, DevicedService_GetObjectStreamingContentServer) error
	ListObjects(context.Context, *ListObjectsRequest) (*ListObjectsResponse, error)
	// Firmware Hub
	CreateFirmwareHub(context.Context, *CreateFirmwareHubRequest) (*CreateFirmwareHubResponse, error)
	DeleteFirmwareHub(context.Context, *DeleteFirmwareHubRequest) (*emptypb.Empty, error)
	PatchFirmwareHub(context.Context, *PatchFirmwareHubRequest) (*PatchFirmwareHubResponse, error)
	GetFirmwareHub(context.Context, *GetFirmwareHubRequest) (*GetFirmwareHubResponse, error)
	ListFirmwareHubs(context.Context, *ListFirmwareHubsRequest) (*ListFirmwareHubsResponse, error)
	AddDevicesToFirmwareHub(context.Context, *AddDevicesToFirmwareHubRequest) (*emptypb.Empty, error)
	RemoveDevicesFromFirmwareHub(context.Context, *RemoveDevicesFromFirmwareHubRequest) (*emptypb.Empty, error)
	AddFirmwareDescriptorToFirmwareHub(context.Context, *AddFirmwareDescriptorToFirmwareHubRequest) (*emptypb.Empty, error)
	RemoveFirmwareDescriptorFromFirmwareHub(context.Context, *RemoveFirmwareDescriptorFromFirmwareHubRequest) (*emptypb.Empty, error)
	GetDeviceFirmwareDescriptor(context.Context, *GetDeviceFirmwareDescriptorRequest) (*GetDeviceFirmwareDescriptorResponse, error)
	SetDeviceFirmwareDescriptor(context.Context, *SetDeviceFirmwareDescriptorRequest) (*emptypb.Empty, error)
	SyncDeviceFirmwareDescriptor(context.Context, *SyncDeviceFirmwareDescriptorRequest) (*emptypb.Empty, error)
	// internal device only
	ShowDevice(context.Context, *emptypb.Empty) (*ShowDeviceResponse, error)
	ShowDeviceFirmwareDescriptor(context.Context, *emptypb.Empty) (*ShowDeviceFirmwareDescriptorResponse, error)
	Connect(DevicedService_ConnectServer) error
	Heartbeat(context.Context, *HeartbeatRequest) (*emptypb.Empty, error)
}

// UnimplementedDevicedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDevicedServiceServer struct {
}

func (*UnimplementedDevicedServiceServer) CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (*UnimplementedDevicedServiceServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (*UnimplementedDevicedServiceServer) PatchDevice(context.Context, *PatchDeviceRequest) (*PatchDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDevice not implemented")
}
func (*UnimplementedDevicedServiceServer) GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (*UnimplementedDevicedServiceServer) ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (*UnimplementedDevicedServiceServer) GetDeviceByModule(context.Context, *GetDeviceByModuleRequest) (*GetDeviceByModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceByModule not implemented")
}
func (*UnimplementedDevicedServiceServer) CreateConfig(context.Context, *CreateConfigRequest) (*CreateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfig not implemented")
}
func (*UnimplementedDevicedServiceServer) DeleteConfig(context.Context, *DeleteConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}
func (*UnimplementedDevicedServiceServer) PatchConfig(context.Context, *PatchConfigRequest) (*PatchConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchConfig not implemented")
}
func (*UnimplementedDevicedServiceServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedDevicedServiceServer) ListConfigs(context.Context, *ListConfigsRequest) (*ListConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigs not implemented")
}
func (*UnimplementedDevicedServiceServer) AddConfigsToDevice(context.Context, *AddConfigsToDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddConfigsToDevice not implemented")
}
func (*UnimplementedDevicedServiceServer) RemoveConfigsFromDevice(context.Context, *RemoveConfigsFromDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveConfigsFromDevice not implemented")
}
func (*UnimplementedDevicedServiceServer) ListConfigsByDevice(context.Context, *ListConfigsByDeviceRequest) (*ListConfigsByDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigsByDevice not implemented")
}
func (*UnimplementedDevicedServiceServer) UploadDescriptor(context.Context, *UploadDescriptorRequest) (*UploadDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDescriptor not implemented")
}
func (*UnimplementedDevicedServiceServer) GetDescriptor(context.Context, *GetDescriptorRequest) (*GetDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDescriptor not implemented")
}
func (*UnimplementedDevicedServiceServer) UnaryCall(context.Context, *UnaryCallRequest) (*UnaryCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryCall not implemented")
}
func (*UnimplementedDevicedServiceServer) StreamCall(DevicedService_StreamCallServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCall not implemented")
}
func (*UnimplementedDevicedServiceServer) PullFrameFromFlow(*PullFrameFromFlowRequest, DevicedService_PullFrameFromFlowServer) error {
	return status.Errorf(codes.Unimplemented, "method PullFrameFromFlow not implemented")
}
func (*UnimplementedDevicedServiceServer) PushFrameToFlow(DevicedService_PushFrameToFlowServer) error {
	return status.Errorf(codes.Unimplemented, "method PushFrameToFlow not implemented")
}
func (*UnimplementedDevicedServiceServer) PushFrameToFlowOnce(context.Context, *PushFrameToFlowOnceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushFrameToFlowOnce not implemented")
}
func (*UnimplementedDevicedServiceServer) QueryFramesFromFlow(context.Context, *QueryFramesFromFlowRequest) (*QueryFramesFromFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFramesFromFlow not implemented")
}
func (*UnimplementedDevicedServiceServer) CreateFlowSet(context.Context, *CreateFlowSetRequest) (*CreateFlowSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlowSet not implemented")
}
func (*UnimplementedDevicedServiceServer) DeleteFlowSet(context.Context, *DeleteFlowSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlowSet not implemented")
}
func (*UnimplementedDevicedServiceServer) PatchFlowSet(context.Context, *PatchFlowSetRequest) (*PatchFlowSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchFlowSet not implemented")
}
func (*UnimplementedDevicedServiceServer) GetFlowSet(context.Context, *GetFlowSetRequest) (*GetFlowSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlowSet not implemented")
}
func (*UnimplementedDevicedServiceServer) ListFlowSets(context.Context, *ListFlowSetsRequest) (*ListFlowSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlowSets not implemented")
}
func (*UnimplementedDevicedServiceServer) AddFlowsToFlowSet(context.Context, *AddFlowsToFlowSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFlowsToFlowSet not implemented")
}
func (*UnimplementedDevicedServiceServer) RemoveFlowsFromFlowSet(context.Context, *RemoveFlowsFromFlowSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFlowsFromFlowSet not implemented")
}
func (*UnimplementedDevicedServiceServer) PullFrameFromFlowSet(*PullFrameFromFlowSetRequest, DevicedService_PullFrameFromFlowSetServer) error {
	return status.Errorf(codes.Unimplemented, "method PullFrameFromFlowSet not implemented")
}
func (*UnimplementedDevicedServiceServer) PutObject(context.Context, *PutObjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutObject not implemented")
}
func (*UnimplementedDevicedServiceServer) PutObjectStreaming(DevicedService_PutObjectStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method PutObjectStreaming not implemented")
}
func (*UnimplementedDevicedServiceServer) RemoveObject(context.Context, *RemoveObjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveObject not implemented")
}
func (*UnimplementedDevicedServiceServer) RenameObject(context.Context, *RenameObjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameObject not implemented")
}
func (*UnimplementedDevicedServiceServer) GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (*UnimplementedDevicedServiceServer) GetObjectContent(context.Context, *GetObjectContentRequest) (*GetObjectContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectContent not implemented")
}
func (*UnimplementedDevicedServiceServer) GetObjectStreamingContent(*GetObjectStreamingContentRequest, DevicedService_GetObjectStreamingContentServer) error {
	return status.Errorf(codes.Unimplemented, "method GetObjectStreamingContent not implemented")
}
func (*UnimplementedDevicedServiceServer) ListObjects(context.Context, *ListObjectsRequest) (*ListObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjects not implemented")
}
func (*UnimplementedDevicedServiceServer) CreateFirmwareHub(context.Context, *CreateFirmwareHubRequest) (*CreateFirmwareHubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFirmwareHub not implemented")
}
func (*UnimplementedDevicedServiceServer) DeleteFirmwareHub(context.Context, *DeleteFirmwareHubRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFirmwareHub not implemented")
}
func (*UnimplementedDevicedServiceServer) PatchFirmwareHub(context.Context, *PatchFirmwareHubRequest) (*PatchFirmwareHubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchFirmwareHub not implemented")
}
func (*UnimplementedDevicedServiceServer) GetFirmwareHub(context.Context, *GetFirmwareHubRequest) (*GetFirmwareHubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirmwareHub not implemented")
}
func (*UnimplementedDevicedServiceServer) ListFirmwareHubs(context.Context, *ListFirmwareHubsRequest) (*ListFirmwareHubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFirmwareHubs not implemented")
}
func (*UnimplementedDevicedServiceServer) AddDevicesToFirmwareHub(context.Context, *AddDevicesToFirmwareHubRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDevicesToFirmwareHub not implemented")
}
func (*UnimplementedDevicedServiceServer) RemoveDevicesFromFirmwareHub(context.Context, *RemoveDevicesFromFirmwareHubRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDevicesFromFirmwareHub not implemented")
}
func (*UnimplementedDevicedServiceServer) AddFirmwareDescriptorToFirmwareHub(context.Context, *AddFirmwareDescriptorToFirmwareHubRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFirmwareDescriptorToFirmwareHub not implemented")
}
func (*UnimplementedDevicedServiceServer) RemoveFirmwareDescriptorFromFirmwareHub(context.Context, *RemoveFirmwareDescriptorFromFirmwareHubRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFirmwareDescriptorFromFirmwareHub not implemented")
}
func (*UnimplementedDevicedServiceServer) GetDeviceFirmwareDescriptor(context.Context, *GetDeviceFirmwareDescriptorRequest) (*GetDeviceFirmwareDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceFirmwareDescriptor not implemented")
}
func (*UnimplementedDevicedServiceServer) SetDeviceFirmwareDescriptor(context.Context, *SetDeviceFirmwareDescriptorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceFirmwareDescriptor not implemented")
}
func (*UnimplementedDevicedServiceServer) SyncDeviceFirmwareDescriptor(context.Context, *SyncDeviceFirmwareDescriptorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncDeviceFirmwareDescriptor not implemented")
}
func (*UnimplementedDevicedServiceServer) ShowDevice(context.Context, *emptypb.Empty) (*ShowDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowDevice not implemented")
}
func (*UnimplementedDevicedServiceServer) ShowDeviceFirmwareDescriptor(context.Context, *emptypb.Empty) (*ShowDeviceFirmwareDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowDeviceFirmwareDescriptor not implemented")
}
func (*UnimplementedDevicedServiceServer) Connect(DevicedService_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedDevicedServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}

func RegisterDevicedServiceServer(s *grpc.Server, srv DevicedServiceServer) {
	s.RegisterService(&_DevicedService_serviceDesc, srv)
}

func _DevicedService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_PatchDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).PatchDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/PatchDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).PatchDevice(ctx, req.(*PatchDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_GetDeviceByModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceByModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).GetDeviceByModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/GetDeviceByModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).GetDeviceByModule(ctx, req.(*GetDeviceByModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_CreateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).CreateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/CreateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).CreateConfig(ctx, req.(*CreateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/DeleteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).DeleteConfig(ctx, req.(*DeleteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_PatchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).PatchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/PatchConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).PatchConfig(ctx, req.(*PatchConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_ListConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).ListConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/ListConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).ListConfigs(ctx, req.(*ListConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_AddConfigsToDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConfigsToDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).AddConfigsToDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/AddConfigsToDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).AddConfigsToDevice(ctx, req.(*AddConfigsToDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_RemoveConfigsFromDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveConfigsFromDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).RemoveConfigsFromDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/RemoveConfigsFromDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).RemoveConfigsFromDevice(ctx, req.(*RemoveConfigsFromDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_ListConfigsByDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigsByDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).ListConfigsByDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/ListConfigsByDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).ListConfigsByDevice(ctx, req.(*ListConfigsByDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_UploadDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).UploadDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/UploadDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).UploadDescriptor(ctx, req.(*UploadDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_GetDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).GetDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/GetDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).GetDescriptor(ctx, req.(*GetDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_UnaryCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).UnaryCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/UnaryCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).UnaryCall(ctx, req.(*UnaryCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_StreamCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DevicedServiceServer).StreamCall(&devicedServiceStreamCallServer{stream})
}

type DevicedService_StreamCallServer interface {
	Send(*StreamCallResponse) error
	Recv() (*StreamCallRequest, error)
	grpc.ServerStream
}

type devicedServiceStreamCallServer struct {
	grpc.ServerStream
}

func (x *devicedServiceStreamCallServer) Send(m *StreamCallResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *devicedServiceStreamCallServer) Recv() (*StreamCallRequest, error) {
	m := new(StreamCallRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DevicedService_PullFrameFromFlow_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullFrameFromFlowRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DevicedServiceServer).PullFrameFromFlow(m, &devicedServicePullFrameFromFlowServer{stream})
}

type DevicedService_PullFrameFromFlowServer interface {
	Send(*PullFrameFromFlowResponse) error
	grpc.ServerStream
}

type devicedServicePullFrameFromFlowServer struct {
	grpc.ServerStream
}

func (x *devicedServicePullFrameFromFlowServer) Send(m *PullFrameFromFlowResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DevicedService_PushFrameToFlow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DevicedServiceServer).PushFrameToFlow(&devicedServicePushFrameToFlowServer{stream})
}

type DevicedService_PushFrameToFlowServer interface {
	Send(*PushFrameToFlowResponse) error
	Recv() (*PushFrameToFlowRequest, error)
	grpc.ServerStream
}

type devicedServicePushFrameToFlowServer struct {
	grpc.ServerStream
}

func (x *devicedServicePushFrameToFlowServer) Send(m *PushFrameToFlowResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *devicedServicePushFrameToFlowServer) Recv() (*PushFrameToFlowRequest, error) {
	m := new(PushFrameToFlowRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DevicedService_PushFrameToFlowOnce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushFrameToFlowOnceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).PushFrameToFlowOnce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/PushFrameToFlowOnce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).PushFrameToFlowOnce(ctx, req.(*PushFrameToFlowOnceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_QueryFramesFromFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFramesFromFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).QueryFramesFromFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/QueryFramesFromFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).QueryFramesFromFlow(ctx, req.(*QueryFramesFromFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_CreateFlowSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlowSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).CreateFlowSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/CreateFlowSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).CreateFlowSet(ctx, req.(*CreateFlowSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_DeleteFlowSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlowSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).DeleteFlowSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/DeleteFlowSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).DeleteFlowSet(ctx, req.(*DeleteFlowSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_PatchFlowSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchFlowSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).PatchFlowSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/PatchFlowSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).PatchFlowSet(ctx, req.(*PatchFlowSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_GetFlowSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlowSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).GetFlowSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/GetFlowSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).GetFlowSet(ctx, req.(*GetFlowSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_ListFlowSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlowSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).ListFlowSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/ListFlowSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).ListFlowSets(ctx, req.(*ListFlowSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_AddFlowsToFlowSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFlowsToFlowSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).AddFlowsToFlowSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/AddFlowsToFlowSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).AddFlowsToFlowSet(ctx, req.(*AddFlowsToFlowSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_RemoveFlowsFromFlowSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFlowsFromFlowSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).RemoveFlowsFromFlowSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/RemoveFlowsFromFlowSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).RemoveFlowsFromFlowSet(ctx, req.(*RemoveFlowsFromFlowSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_PullFrameFromFlowSet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullFrameFromFlowSetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DevicedServiceServer).PullFrameFromFlowSet(m, &devicedServicePullFrameFromFlowSetServer{stream})
}

type DevicedService_PullFrameFromFlowSetServer interface {
	Send(*PullFrameFromFlowSetResponse) error
	grpc.ServerStream
}

type devicedServicePullFrameFromFlowSetServer struct {
	grpc.ServerStream
}

func (x *devicedServicePullFrameFromFlowSetServer) Send(m *PullFrameFromFlowSetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DevicedService_PutObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).PutObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/PutObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).PutObject(ctx, req.(*PutObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_PutObjectStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DevicedServiceServer).PutObjectStreaming(&devicedServicePutObjectStreamingServer{stream})
}

type DevicedService_PutObjectStreamingServer interface {
	Send(*PutObjectStreamingResponse) error
	Recv() (*PutObjectStreamingRequest, error)
	grpc.ServerStream
}

type devicedServicePutObjectStreamingServer struct {
	grpc.ServerStream
}

func (x *devicedServicePutObjectStreamingServer) Send(m *PutObjectStreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *devicedServicePutObjectStreamingServer) Recv() (*PutObjectStreamingRequest, error) {
	m := new(PutObjectStreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DevicedService_RemoveObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).RemoveObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/RemoveObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).RemoveObject(ctx, req.(*RemoveObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_RenameObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).RenameObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/RenameObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).RenameObject(ctx, req.(*RenameObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/GetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).GetObject(ctx, req.(*GetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_GetObjectContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).GetObjectContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/GetObjectContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).GetObjectContent(ctx, req.(*GetObjectContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_GetObjectStreamingContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetObjectStreamingContentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DevicedServiceServer).GetObjectStreamingContent(m, &devicedServiceGetObjectStreamingContentServer{stream})
}

type DevicedService_GetObjectStreamingContentServer interface {
	Send(*GetObjectStreamingContentResponse) error
	grpc.ServerStream
}

type devicedServiceGetObjectStreamingContentServer struct {
	grpc.ServerStream
}

func (x *devicedServiceGetObjectStreamingContentServer) Send(m *GetObjectStreamingContentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DevicedService_ListObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).ListObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/ListObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).ListObjects(ctx, req.(*ListObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_CreateFirmwareHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFirmwareHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).CreateFirmwareHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/CreateFirmwareHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).CreateFirmwareHub(ctx, req.(*CreateFirmwareHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_DeleteFirmwareHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFirmwareHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).DeleteFirmwareHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/DeleteFirmwareHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).DeleteFirmwareHub(ctx, req.(*DeleteFirmwareHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_PatchFirmwareHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchFirmwareHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).PatchFirmwareHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/PatchFirmwareHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).PatchFirmwareHub(ctx, req.(*PatchFirmwareHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_GetFirmwareHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFirmwareHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).GetFirmwareHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/GetFirmwareHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).GetFirmwareHub(ctx, req.(*GetFirmwareHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_ListFirmwareHubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFirmwareHubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).ListFirmwareHubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/ListFirmwareHubs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).ListFirmwareHubs(ctx, req.(*ListFirmwareHubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_AddDevicesToFirmwareHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDevicesToFirmwareHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).AddDevicesToFirmwareHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/AddDevicesToFirmwareHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).AddDevicesToFirmwareHub(ctx, req.(*AddDevicesToFirmwareHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_RemoveDevicesFromFirmwareHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDevicesFromFirmwareHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).RemoveDevicesFromFirmwareHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/RemoveDevicesFromFirmwareHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).RemoveDevicesFromFirmwareHub(ctx, req.(*RemoveDevicesFromFirmwareHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_AddFirmwareDescriptorToFirmwareHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFirmwareDescriptorToFirmwareHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).AddFirmwareDescriptorToFirmwareHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/AddFirmwareDescriptorToFirmwareHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).AddFirmwareDescriptorToFirmwareHub(ctx, req.(*AddFirmwareDescriptorToFirmwareHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_RemoveFirmwareDescriptorFromFirmwareHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFirmwareDescriptorFromFirmwareHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).RemoveFirmwareDescriptorFromFirmwareHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/RemoveFirmwareDescriptorFromFirmwareHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).RemoveFirmwareDescriptorFromFirmwareHub(ctx, req.(*RemoveFirmwareDescriptorFromFirmwareHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_GetDeviceFirmwareDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceFirmwareDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).GetDeviceFirmwareDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/GetDeviceFirmwareDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).GetDeviceFirmwareDescriptor(ctx, req.(*GetDeviceFirmwareDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_SetDeviceFirmwareDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceFirmwareDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).SetDeviceFirmwareDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/SetDeviceFirmwareDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).SetDeviceFirmwareDescriptor(ctx, req.(*SetDeviceFirmwareDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_SyncDeviceFirmwareDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncDeviceFirmwareDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).SyncDeviceFirmwareDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/SyncDeviceFirmwareDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).SyncDeviceFirmwareDescriptor(ctx, req.(*SyncDeviceFirmwareDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_ShowDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).ShowDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/ShowDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).ShowDevice(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_ShowDeviceFirmwareDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).ShowDeviceFirmwareDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/ShowDeviceFirmwareDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).ShowDeviceFirmwareDescriptor(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DevicedServiceServer).Connect(&devicedServiceConnectServer{stream})
}

type DevicedService_ConnectServer interface {
	Send(*ConnectRequest) error
	Recv() (*ConnectResponse, error)
	grpc.ServerStream
}

type devicedServiceConnectServer struct {
	grpc.ServerStream
}

func (x *devicedServiceConnectServer) Send(m *ConnectRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *devicedServiceConnectServer) Recv() (*ConnectResponse, error) {
	m := new(ConnectResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DevicedService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DevicedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.deviced.DevicedService",
	HandlerType: (*DevicedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDevice",
			Handler:    _DevicedService_CreateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _DevicedService_DeleteDevice_Handler,
		},
		{
			MethodName: "PatchDevice",
			Handler:    _DevicedService_PatchDevice_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _DevicedService_GetDevice_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _DevicedService_ListDevices_Handler,
		},
		{
			MethodName: "GetDeviceByModule",
			Handler:    _DevicedService_GetDeviceByModule_Handler,
		},
		{
			MethodName: "CreateConfig",
			Handler:    _DevicedService_CreateConfig_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _DevicedService_DeleteConfig_Handler,
		},
		{
			MethodName: "PatchConfig",
			Handler:    _DevicedService_PatchConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _DevicedService_GetConfig_Handler,
		},
		{
			MethodName: "ListConfigs",
			Handler:    _DevicedService_ListConfigs_Handler,
		},
		{
			MethodName: "AddConfigsToDevice",
			Handler:    _DevicedService_AddConfigsToDevice_Handler,
		},
		{
			MethodName: "RemoveConfigsFromDevice",
			Handler:    _DevicedService_RemoveConfigsFromDevice_Handler,
		},
		{
			MethodName: "ListConfigsByDevice",
			Handler:    _DevicedService_ListConfigsByDevice_Handler,
		},
		{
			MethodName: "UploadDescriptor",
			Handler:    _DevicedService_UploadDescriptor_Handler,
		},
		{
			MethodName: "GetDescriptor",
			Handler:    _DevicedService_GetDescriptor_Handler,
		},
		{
			MethodName: "UnaryCall",
			Handler:    _DevicedService_UnaryCall_Handler,
		},
		{
			MethodName: "PushFrameToFlowOnce",
			Handler:    _DevicedService_PushFrameToFlowOnce_Handler,
		},
		{
			MethodName: "QueryFramesFromFlow",
			Handler:    _DevicedService_QueryFramesFromFlow_Handler,
		},
		{
			MethodName: "CreateFlowSet",
			Handler:    _DevicedService_CreateFlowSet_Handler,
		},
		{
			MethodName: "DeleteFlowSet",
			Handler:    _DevicedService_DeleteFlowSet_Handler,
		},
		{
			MethodName: "PatchFlowSet",
			Handler:    _DevicedService_PatchFlowSet_Handler,
		},
		{
			MethodName: "GetFlowSet",
			Handler:    _DevicedService_GetFlowSet_Handler,
		},
		{
			MethodName: "ListFlowSets",
			Handler:    _DevicedService_ListFlowSets_Handler,
		},
		{
			MethodName: "AddFlowsToFlowSet",
			Handler:    _DevicedService_AddFlowsToFlowSet_Handler,
		},
		{
			MethodName: "RemoveFlowsFromFlowSet",
			Handler:    _DevicedService_RemoveFlowsFromFlowSet_Handler,
		},
		{
			MethodName: "PutObject",
			Handler:    _DevicedService_PutObject_Handler,
		},
		{
			MethodName: "RemoveObject",
			Handler:    _DevicedService_RemoveObject_Handler,
		},
		{
			MethodName: "RenameObject",
			Handler:    _DevicedService_RenameObject_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _DevicedService_GetObject_Handler,
		},
		{
			MethodName: "GetObjectContent",
			Handler:    _DevicedService_GetObjectContent_Handler,
		},
		{
			MethodName: "ListObjects",
			Handler:    _DevicedService_ListObjects_Handler,
		},
		{
			MethodName: "CreateFirmwareHub",
			Handler:    _DevicedService_CreateFirmwareHub_Handler,
		},
		{
			MethodName: "DeleteFirmwareHub",
			Handler:    _DevicedService_DeleteFirmwareHub_Handler,
		},
		{
			MethodName: "PatchFirmwareHub",
			Handler:    _DevicedService_PatchFirmwareHub_Handler,
		},
		{
			MethodName: "GetFirmwareHub",
			Handler:    _DevicedService_GetFirmwareHub_Handler,
		},
		{
			MethodName: "ListFirmwareHubs",
			Handler:    _DevicedService_ListFirmwareHubs_Handler,
		},
		{
			MethodName: "AddDevicesToFirmwareHub",
			Handler:    _DevicedService_AddDevicesToFirmwareHub_Handler,
		},
		{
			MethodName: "RemoveDevicesFromFirmwareHub",
			Handler:    _DevicedService_RemoveDevicesFromFirmwareHub_Handler,
		},
		{
			MethodName: "AddFirmwareDescriptorToFirmwareHub",
			Handler:    _DevicedService_AddFirmwareDescriptorToFirmwareHub_Handler,
		},
		{
			MethodName: "RemoveFirmwareDescriptorFromFirmwareHub",
			Handler:    _DevicedService_RemoveFirmwareDescriptorFromFirmwareHub_Handler,
		},
		{
			MethodName: "GetDeviceFirmwareDescriptor",
			Handler:    _DevicedService_GetDeviceFirmwareDescriptor_Handler,
		},
		{
			MethodName: "SetDeviceFirmwareDescriptor",
			Handler:    _DevicedService_SetDeviceFirmwareDescriptor_Handler,
		},
		{
			MethodName: "SyncDeviceFirmwareDescriptor",
			Handler:    _DevicedService_SyncDeviceFirmwareDescriptor_Handler,
		},
		{
			MethodName: "ShowDevice",
			Handler:    _DevicedService_ShowDevice_Handler,
		},
		{
			MethodName: "ShowDeviceFirmwareDescriptor",
			Handler:    _DevicedService_ShowDeviceFirmwareDescriptor_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _DevicedService_Heartbeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCall",
			Handler:       _DevicedService_StreamCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PullFrameFromFlow",
			Handler:       _DevicedService_PullFrameFromFlow_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushFrameToFlow",
			Handler:       _DevicedService_PushFrameToFlow_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PullFrameFromFlowSet",
			Handler:       _DevicedService_PullFrameFromFlowSet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutObjectStreaming",
			Handler:       _DevicedService_PutObjectStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetObjectStreamingContent",
			Handler:       _DevicedService_GetObjectStreamingContent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Connect",
			Handler:       _DevicedService_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
