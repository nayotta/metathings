// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pull_frame_from_flow_set.proto

package deviced

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _pull_frame_from_flow_set_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on PullFrameFromFlowSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PullFrameFromFlowSetRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() == nil {
		return PullFrameFromFlowSetRequestValidationError{
			field:  "Id",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PullFrameFromFlowSetRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Request.(type) {

	case *PullFrameFromFlowSetRequest_Config_:

		if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PullFrameFromFlowSetRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PullFrameFromFlowSetRequestValidationError is the validation error returned
// by PullFrameFromFlowSetRequest.Validate if the designated constraints
// aren't met.
type PullFrameFromFlowSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PullFrameFromFlowSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PullFrameFromFlowSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PullFrameFromFlowSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PullFrameFromFlowSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PullFrameFromFlowSetRequestValidationError) ErrorName() string {
	return "PullFrameFromFlowSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PullFrameFromFlowSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPullFrameFromFlowSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PullFrameFromFlowSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PullFrameFromFlowSetRequestValidationError{}

// Validate checks the field values on PullFrameFromFlowSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PullFrameFromFlowSetResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	switch m.Response.(type) {

	case *PullFrameFromFlowSetResponse_Ack_:

		if v, ok := interface{}(m.GetAck()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PullFrameFromFlowSetResponseValidationError{
					field:  "Ack",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PullFrameFromFlowSetResponse_Pack_:

		if v, ok := interface{}(m.GetPack()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PullFrameFromFlowSetResponseValidationError{
					field:  "Pack",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PullFrameFromFlowSetResponseValidationError is the validation error returned
// by PullFrameFromFlowSetResponse.Validate if the designated constraints
// aren't met.
type PullFrameFromFlowSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PullFrameFromFlowSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PullFrameFromFlowSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PullFrameFromFlowSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PullFrameFromFlowSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PullFrameFromFlowSetResponseValidationError) ErrorName() string {
	return "PullFrameFromFlowSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PullFrameFromFlowSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPullFrameFromFlowSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PullFrameFromFlowSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PullFrameFromFlowSetResponseValidationError{}

// Validate checks the field values on PullFrameFromFlowSetRequest_Config with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *PullFrameFromFlowSetRequest_Config) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFlowSet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PullFrameFromFlowSetRequest_ConfigValidationError{
				field:  "FlowSet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetConfigAck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PullFrameFromFlowSetRequest_ConfigValidationError{
				field:  "ConfigAck",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PullFrameFromFlowSetRequest_ConfigValidationError is the validation error
// returned by PullFrameFromFlowSetRequest_Config.Validate if the designated
// constraints aren't met.
type PullFrameFromFlowSetRequest_ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PullFrameFromFlowSetRequest_ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PullFrameFromFlowSetRequest_ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PullFrameFromFlowSetRequest_ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PullFrameFromFlowSetRequest_ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PullFrameFromFlowSetRequest_ConfigValidationError) ErrorName() string {
	return "PullFrameFromFlowSetRequest_ConfigValidationError"
}

// Error satisfies the builtin error interface
func (e PullFrameFromFlowSetRequest_ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPullFrameFromFlowSetRequest_Config.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PullFrameFromFlowSetRequest_ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PullFrameFromFlowSetRequest_ConfigValidationError{}

// Validate checks the field values on PullFrameFromFlowSetResponse_Ack with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *PullFrameFromFlowSetResponse_Ack) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// PullFrameFromFlowSetResponse_AckValidationError is the validation error
// returned by PullFrameFromFlowSetResponse_Ack.Validate if the designated
// constraints aren't met.
type PullFrameFromFlowSetResponse_AckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PullFrameFromFlowSetResponse_AckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PullFrameFromFlowSetResponse_AckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PullFrameFromFlowSetResponse_AckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PullFrameFromFlowSetResponse_AckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PullFrameFromFlowSetResponse_AckValidationError) ErrorName() string {
	return "PullFrameFromFlowSetResponse_AckValidationError"
}

// Error satisfies the builtin error interface
func (e PullFrameFromFlowSetResponse_AckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPullFrameFromFlowSetResponse_Ack.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PullFrameFromFlowSetResponse_AckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PullFrameFromFlowSetResponse_AckValidationError{}

// Validate checks the field values on PullFrameFromFlowSetResponse_Pack with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *PullFrameFromFlowSetResponse_Pack) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PullFrameFromFlowSetResponse_PackValidationError{
				field:  "Device",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFrames() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PullFrameFromFlowSetResponse_PackValidationError{
					field:  fmt.Sprintf("Frames[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PullFrameFromFlowSetResponse_PackValidationError is the validation error
// returned by PullFrameFromFlowSetResponse_Pack.Validate if the designated
// constraints aren't met.
type PullFrameFromFlowSetResponse_PackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PullFrameFromFlowSetResponse_PackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PullFrameFromFlowSetResponse_PackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PullFrameFromFlowSetResponse_PackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PullFrameFromFlowSetResponse_PackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PullFrameFromFlowSetResponse_PackValidationError) ErrorName() string {
	return "PullFrameFromFlowSetResponse_PackValidationError"
}

// Error satisfies the builtin error interface
func (e PullFrameFromFlowSetResponse_PackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPullFrameFromFlowSetResponse_Pack.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PullFrameFromFlowSetResponse_PackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PullFrameFromFlowSetResponse_PackValidationError{}
