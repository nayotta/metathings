// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: query_frames_from_flow.proto

package deviced

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _query_frames_from_flow_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on QueryFramesFromFlowRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *QueryFramesFromFlowRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryFramesFromFlowRequestValidationError{
				field:  "Device",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryFramesFromFlowRequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryFramesFromFlowRequestValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// QueryFramesFromFlowRequestValidationError is the validation error returned
// by QueryFramesFromFlowRequest.Validate if the designated constraints aren't met.
type QueryFramesFromFlowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryFramesFromFlowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryFramesFromFlowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryFramesFromFlowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryFramesFromFlowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryFramesFromFlowRequestValidationError) ErrorName() string {
	return "QueryFramesFromFlowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryFramesFromFlowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryFramesFromFlowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryFramesFromFlowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryFramesFromFlowRequestValidationError{}

// Validate checks the field values on QueryFramesFromFlowResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *QueryFramesFromFlowResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPacks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryFramesFromFlowResponseValidationError{
					field:  fmt.Sprintf("Packs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// QueryFramesFromFlowResponseValidationError is the validation error returned
// by QueryFramesFromFlowResponse.Validate if the designated constraints
// aren't met.
type QueryFramesFromFlowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryFramesFromFlowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryFramesFromFlowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryFramesFromFlowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryFramesFromFlowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryFramesFromFlowResponseValidationError) ErrorName() string {
	return "QueryFramesFromFlowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryFramesFromFlowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryFramesFromFlowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryFramesFromFlowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryFramesFromFlowResponseValidationError{}

// Validate checks the field values on QueryFramesFromFlowResponse_Pack with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *QueryFramesFromFlowResponse_Pack) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFlow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryFramesFromFlowResponse_PackValidationError{
				field:  "Flow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFrames() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryFramesFromFlowResponse_PackValidationError{
					field:  fmt.Sprintf("Frames[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// QueryFramesFromFlowResponse_PackValidationError is the validation error
// returned by QueryFramesFromFlowResponse_Pack.Validate if the designated
// constraints aren't met.
type QueryFramesFromFlowResponse_PackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryFramesFromFlowResponse_PackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryFramesFromFlowResponse_PackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryFramesFromFlowResponse_PackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryFramesFromFlowResponse_PackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryFramesFromFlowResponse_PackValidationError) ErrorName() string {
	return "QueryFramesFromFlowResponse_PackValidationError"
}

// Error satisfies the builtin error interface
func (e QueryFramesFromFlowResponse_PackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryFramesFromFlowResponse_Pack.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryFramesFromFlowResponse_PackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryFramesFromFlowResponse_PackValidationError{}
