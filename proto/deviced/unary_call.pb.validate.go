// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: unary_call.proto

package deviced

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _unary_call_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on UnaryCallRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UnaryCallRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetDevice() == nil {
		return UnaryCallRequestValidationError{
			field:  "Device",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnaryCallRequestValidationError{
				field:  "Device",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetValue() == nil {
		return UnaryCallRequestValidationError{
			field:  "Value",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnaryCallRequestValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UnaryCallRequestValidationError is the validation error returned by
// UnaryCallRequest.Validate if the designated constraints aren't met.
type UnaryCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnaryCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnaryCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnaryCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnaryCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnaryCallRequestValidationError) ErrorName() string { return "UnaryCallRequestValidationError" }

// Error satisfies the builtin error interface
func (e UnaryCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnaryCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnaryCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnaryCallRequestValidationError{}

// Validate checks the field values on UnaryCallResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UnaryCallResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnaryCallResponseValidationError{
				field:  "Device",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnaryCallResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UnaryCallResponseValidationError is the validation error returned by
// UnaryCallResponse.Validate if the designated constraints aren't met.
type UnaryCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnaryCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnaryCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnaryCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnaryCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnaryCallResponseValidationError) ErrorName() string {
	return "UnaryCallResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnaryCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnaryCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnaryCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnaryCallResponseValidationError{}
