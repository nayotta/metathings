// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: service.proto

package identityd2

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x20, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64,
	0x32, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x67, 0x65,
	0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e,
	0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61,
	0x64, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x12, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x61, 0x64, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x61, 0x64, 0x64, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0f, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x74, 0x6f,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x61, 0x64, 0x64, 0x5f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x65,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x72, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xe3, 0x33,
	0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x7f, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x76, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x32, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x64, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0b, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x64, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x36, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x64, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0b, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x64, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7c, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x34, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x64, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x33, 0x2e, 0x61,
	0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x64, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x30, 0x2e, 0x61, 0x69, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x69,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x76, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x2e,
	0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x64, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x3b, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x64, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61,
	0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0f,
	0x41, 0x64, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x38, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x64, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x3d, 0x2e, 0x61, 0x69,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x69,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x63, 0x68, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x69,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x32, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x64, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x61,
	0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x0a, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0f, 0x41,
	0x64, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x6f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x38,
	0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64,
	0x32, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x6f, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x6f, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x2e, 0x61, 0x69, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x6f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3a, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x73,
	0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x72,
	0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3f, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5d, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x64, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x79, 0x0a, 0x0a, 0x50, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x33,
	0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64,
	0x32, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x31, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x69, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x79, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x33,
	0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x3d, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3c, 0x2e,
	0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x61, 0x69,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0a,
	0x53, 0x68, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x34, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x37, 0x2e, 0x61,
	0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e,
	0x41, 0x64, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x6d, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3c, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x69,
	0x0a, 0x11, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x3a, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x16, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x3f, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x67,
	0x0a, 0x10, 0x41, 0x64, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x39, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x3e, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x64, 0x32, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x39, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x64, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x69, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x39, 0x2e, 0x61,
	0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x38, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x64, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x36,
	0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x38, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x64, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa3, 0x01, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x46, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x41, 0x2e, 0x61, 0x69, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x61,
	0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46,
	0x6f, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x9d, 0x01, 0x0a, 0x16, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x3f, 0x2e,
	0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40,
	0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64,
	0x32, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x14, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x2e, 0x61, 0x69,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x61, 0x69, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a,
	0x11, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x3a, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64,
	0x32, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a,
	0x0b, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x2e, 0x61,
	0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e,
	0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a,
	0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36,
	0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64,
	0x32, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x64, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x33, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x64, 0x32, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x63,
	0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x37, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x64, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6e, 0x61, 0x79, 0x6f, 0x74, 0x74, 0x61, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x64, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_service_proto_goTypes = []interface{}{
	(*CreateDomainRequest)(nil),              // 0: ai.metathings.service.identityd2.CreateDomainRequest
	(*DeleteDomainRequest)(nil),              // 1: ai.metathings.service.identityd2.DeleteDomainRequest
	(*PatchDomainRequest)(nil),               // 2: ai.metathings.service.identityd2.PatchDomainRequest
	(*GetDomainRequest)(nil),                 // 3: ai.metathings.service.identityd2.GetDomainRequest
	(*ListDomainsRequest)(nil),               // 4: ai.metathings.service.identityd2.ListDomainsRequest
	(*CreateActionRequest)(nil),              // 5: ai.metathings.service.identityd2.CreateActionRequest
	(*DeleteActionRequest)(nil),              // 6: ai.metathings.service.identityd2.DeleteActionRequest
	(*PatchActionRequest)(nil),               // 7: ai.metathings.service.identityd2.PatchActionRequest
	(*GetActionRequest)(nil),                 // 8: ai.metathings.service.identityd2.GetActionRequest
	(*ListActionsRequest)(nil),               // 9: ai.metathings.service.identityd2.ListActionsRequest
	(*CreateRoleRequest)(nil),                // 10: ai.metathings.service.identityd2.CreateRoleRequest
	(*DeleteRoleRequest)(nil),                // 11: ai.metathings.service.identityd2.DeleteRoleRequest
	(*PatchRoleRequest)(nil),                 // 12: ai.metathings.service.identityd2.PatchRoleRequest
	(*GetRoleRequest)(nil),                   // 13: ai.metathings.service.identityd2.GetRoleRequest
	(*ListRolesRequest)(nil),                 // 14: ai.metathings.service.identityd2.ListRolesRequest
	(*ListRolesForEntityRequest)(nil),        // 15: ai.metathings.service.identityd2.ListRolesForEntityRequest
	(*AddActionToRoleRequest)(nil),           // 16: ai.metathings.service.identityd2.AddActionToRoleRequest
	(*RemoveActionFromRoleRequest)(nil),      // 17: ai.metathings.service.identityd2.RemoveActionFromRoleRequest
	(*CreateEntityRequest)(nil),              // 18: ai.metathings.service.identityd2.CreateEntityRequest
	(*DeleteEntityRequest)(nil),              // 19: ai.metathings.service.identityd2.DeleteEntityRequest
	(*PatchEntityRequest)(nil),               // 20: ai.metathings.service.identityd2.PatchEntityRequest
	(*GetEntityRequest)(nil),                 // 21: ai.metathings.service.identityd2.GetEntityRequest
	(*ListEntitiesRequest)(nil),              // 22: ai.metathings.service.identityd2.ListEntitiesRequest
	(*emptypb.Empty)(nil),                    // 23: google.protobuf.Empty
	(*AddRoleToEntityRequest)(nil),           // 24: ai.metathings.service.identityd2.AddRoleToEntityRequest
	(*RemoveRoleFromEntityRequest)(nil),      // 25: ai.metathings.service.identityd2.RemoveRoleFromEntityRequest
	(*AddEntityToDomainRequest)(nil),         // 26: ai.metathings.service.identityd2.AddEntityToDomainRequest
	(*RemoveEntityFromDomainRequest)(nil),    // 27: ai.metathings.service.identityd2.RemoveEntityFromDomainRequest
	(*CreateGroupRequest)(nil),               // 28: ai.metathings.service.identityd2.CreateGroupRequest
	(*DeleteGroupRequest)(nil),               // 29: ai.metathings.service.identityd2.DeleteGroupRequest
	(*PatchGroupRequest)(nil),                // 30: ai.metathings.service.identityd2.PatchGroupRequest
	(*GetGroupRequest)(nil),                  // 31: ai.metathings.service.identityd2.GetGroupRequest
	(*ListGroupsRequest)(nil),                // 32: ai.metathings.service.identityd2.ListGroupsRequest
	(*ListGroupsForSubjectRequest)(nil),      // 33: ai.metathings.service.identityd2.ListGroupsForSubjectRequest
	(*ListGroupsForObjectRequest)(nil),       // 34: ai.metathings.service.identityd2.ListGroupsForObjectRequest
	(*AddRoleToGroupRequest)(nil),            // 35: ai.metathings.service.identityd2.AddRoleToGroupRequest
	(*RemoveRoleFromGroupRequest)(nil),       // 36: ai.metathings.service.identityd2.RemoveRoleFromGroupRequest
	(*AddSubjectToGroupRequest)(nil),         // 37: ai.metathings.service.identityd2.AddSubjectToGroupRequest
	(*RemoveSubjectFromGroupRequest)(nil),    // 38: ai.metathings.service.identityd2.RemoveSubjectFromGroupRequest
	(*AddObjectToGroupRequest)(nil),          // 39: ai.metathings.service.identityd2.AddObjectToGroupRequest
	(*RemoveObjectFromGroupRequest)(nil),     // 40: ai.metathings.service.identityd2.RemoveObjectFromGroupRequest
	(*CreateCredentialRequest)(nil),          // 41: ai.metathings.service.identityd2.CreateCredentialRequest
	(*DeleteCredentialRequest)(nil),          // 42: ai.metathings.service.identityd2.DeleteCredentialRequest
	(*PatchCredentialRequest)(nil),           // 43: ai.metathings.service.identityd2.PatchCredentialRequest
	(*GetCredentialRequest)(nil),             // 44: ai.metathings.service.identityd2.GetCredentialRequest
	(*ListCredentialsRequest)(nil),           // 45: ai.metathings.service.identityd2.ListCredentialsRequest
	(*ListCredentialsForEntityRequest)(nil),  // 46: ai.metathings.service.identityd2.ListCredentialsForEntityRequest
	(*IssueTokenByCredentialRequest)(nil),    // 47: ai.metathings.service.identityd2.IssueTokenByCredentialRequest
	(*IssueTokenByPasswordRequest)(nil),      // 48: ai.metathings.service.identityd2.IssueTokenByPasswordRequest
	(*IssueTokenByTokenRequest)(nil),         // 49: ai.metathings.service.identityd2.IssueTokenByTokenRequest
	(*RevokeTokenRequest)(nil),               // 50: ai.metathings.service.identityd2.RevokeTokenRequest
	(*ValidateTokenRequest)(nil),             // 51: ai.metathings.service.identityd2.ValidateTokenRequest
	(*CheckTokenRequest)(nil),                // 52: ai.metathings.service.identityd2.CheckTokenRequest
	(*AuthorizeTokenRequest)(nil),            // 53: ai.metathings.service.identityd2.AuthorizeTokenRequest
	(*CreateDomainResponse)(nil),             // 54: ai.metathings.service.identityd2.CreateDomainResponse
	(*PatchDomainResponse)(nil),              // 55: ai.metathings.service.identityd2.PatchDomainResponse
	(*GetDomainResponse)(nil),                // 56: ai.metathings.service.identityd2.GetDomainResponse
	(*ListDomainsResponse)(nil),              // 57: ai.metathings.service.identityd2.ListDomainsResponse
	(*CreateActionResponse)(nil),             // 58: ai.metathings.service.identityd2.CreateActionResponse
	(*PatchActionResponse)(nil),              // 59: ai.metathings.service.identityd2.PatchActionResponse
	(*GetActionResponse)(nil),                // 60: ai.metathings.service.identityd2.GetActionResponse
	(*ListActionsResponse)(nil),              // 61: ai.metathings.service.identityd2.ListActionsResponse
	(*CreateRoleResponse)(nil),               // 62: ai.metathings.service.identityd2.CreateRoleResponse
	(*PatchRoleResponse)(nil),                // 63: ai.metathings.service.identityd2.PatchRoleResponse
	(*GetRoleResponse)(nil),                  // 64: ai.metathings.service.identityd2.GetRoleResponse
	(*ListRolesResponse)(nil),                // 65: ai.metathings.service.identityd2.ListRolesResponse
	(*ListRolesForEntityResponse)(nil),       // 66: ai.metathings.service.identityd2.ListRolesForEntityResponse
	(*CreateEntityResponse)(nil),             // 67: ai.metathings.service.identityd2.CreateEntityResponse
	(*PatchEntityResponse)(nil),              // 68: ai.metathings.service.identityd2.PatchEntityResponse
	(*GetEntityResponse)(nil),                // 69: ai.metathings.service.identityd2.GetEntityResponse
	(*ListEntitiesResponse)(nil),             // 70: ai.metathings.service.identityd2.ListEntitiesResponse
	(*ShowEntityResponse)(nil),               // 71: ai.metathings.service.identityd2.ShowEntityResponse
	(*CreateGroupResponse)(nil),              // 72: ai.metathings.service.identityd2.CreateGroupResponse
	(*PatchGroupResponse)(nil),               // 73: ai.metathings.service.identityd2.PatchGroupResponse
	(*GetGroupResponse)(nil),                 // 74: ai.metathings.service.identityd2.GetGroupResponse
	(*ListGroupsResponse)(nil),               // 75: ai.metathings.service.identityd2.ListGroupsResponse
	(*ListGroupsForSubjectResponse)(nil),     // 76: ai.metathings.service.identityd2.ListGroupsForSubjectResponse
	(*ListGroupsForObjectResponse)(nil),      // 77: ai.metathings.service.identityd2.ListGroupsForObjectResponse
	(*ShowGroupsResponse)(nil),               // 78: ai.metathings.service.identityd2.ShowGroupsResponse
	(*CreateCredentialResponse)(nil),         // 79: ai.metathings.service.identityd2.CreateCredentialResponse
	(*PatchCredentialResponse)(nil),          // 80: ai.metathings.service.identityd2.PatchCredentialResponse
	(*GetCredentialResponse)(nil),            // 81: ai.metathings.service.identityd2.GetCredentialResponse
	(*ListCredentialsResponse)(nil),          // 82: ai.metathings.service.identityd2.ListCredentialsResponse
	(*ListCredentialsForEntityResponse)(nil), // 83: ai.metathings.service.identityd2.ListCredentialsForEntityResponse
	(*IssueTokenByCredentialResponse)(nil),   // 84: ai.metathings.service.identityd2.IssueTokenByCredentialResponse
	(*IssueTokenByPasswordResponse)(nil),     // 85: ai.metathings.service.identityd2.IssueTokenByPasswordResponse
	(*IssueTokenByTokenResponse)(nil),        // 86: ai.metathings.service.identityd2.IssueTokenByTokenResponse
	(*ValidateTokenResponse)(nil),            // 87: ai.metathings.service.identityd2.ValidateTokenResponse
}
var file_service_proto_depIdxs = []int32{
	0,  // 0: ai.metathings.service.identityd2.IdentitydService.CreateDomain:input_type -> ai.metathings.service.identityd2.CreateDomainRequest
	1,  // 1: ai.metathings.service.identityd2.IdentitydService.DeleteDomain:input_type -> ai.metathings.service.identityd2.DeleteDomainRequest
	2,  // 2: ai.metathings.service.identityd2.IdentitydService.PatchDomain:input_type -> ai.metathings.service.identityd2.PatchDomainRequest
	3,  // 3: ai.metathings.service.identityd2.IdentitydService.GetDomain:input_type -> ai.metathings.service.identityd2.GetDomainRequest
	4,  // 4: ai.metathings.service.identityd2.IdentitydService.ListDomains:input_type -> ai.metathings.service.identityd2.ListDomainsRequest
	5,  // 5: ai.metathings.service.identityd2.IdentitydService.CreateAction:input_type -> ai.metathings.service.identityd2.CreateActionRequest
	6,  // 6: ai.metathings.service.identityd2.IdentitydService.DeleteAction:input_type -> ai.metathings.service.identityd2.DeleteActionRequest
	7,  // 7: ai.metathings.service.identityd2.IdentitydService.PatchAction:input_type -> ai.metathings.service.identityd2.PatchActionRequest
	8,  // 8: ai.metathings.service.identityd2.IdentitydService.GetAction:input_type -> ai.metathings.service.identityd2.GetActionRequest
	9,  // 9: ai.metathings.service.identityd2.IdentitydService.ListActions:input_type -> ai.metathings.service.identityd2.ListActionsRequest
	10, // 10: ai.metathings.service.identityd2.IdentitydService.CreateRole:input_type -> ai.metathings.service.identityd2.CreateRoleRequest
	11, // 11: ai.metathings.service.identityd2.IdentitydService.DeleteRole:input_type -> ai.metathings.service.identityd2.DeleteRoleRequest
	12, // 12: ai.metathings.service.identityd2.IdentitydService.PatchRole:input_type -> ai.metathings.service.identityd2.PatchRoleRequest
	13, // 13: ai.metathings.service.identityd2.IdentitydService.GetRole:input_type -> ai.metathings.service.identityd2.GetRoleRequest
	14, // 14: ai.metathings.service.identityd2.IdentitydService.ListRoles:input_type -> ai.metathings.service.identityd2.ListRolesRequest
	15, // 15: ai.metathings.service.identityd2.IdentitydService.ListRolesForEntity:input_type -> ai.metathings.service.identityd2.ListRolesForEntityRequest
	16, // 16: ai.metathings.service.identityd2.IdentitydService.AddActionToRole:input_type -> ai.metathings.service.identityd2.AddActionToRoleRequest
	17, // 17: ai.metathings.service.identityd2.IdentitydService.RemoveActionFromRole:input_type -> ai.metathings.service.identityd2.RemoveActionFromRoleRequest
	18, // 18: ai.metathings.service.identityd2.IdentitydService.CreateEntity:input_type -> ai.metathings.service.identityd2.CreateEntityRequest
	19, // 19: ai.metathings.service.identityd2.IdentitydService.DeleteEntity:input_type -> ai.metathings.service.identityd2.DeleteEntityRequest
	20, // 20: ai.metathings.service.identityd2.IdentitydService.PatchEntity:input_type -> ai.metathings.service.identityd2.PatchEntityRequest
	21, // 21: ai.metathings.service.identityd2.IdentitydService.GetEntity:input_type -> ai.metathings.service.identityd2.GetEntityRequest
	22, // 22: ai.metathings.service.identityd2.IdentitydService.ListEntities:input_type -> ai.metathings.service.identityd2.ListEntitiesRequest
	23, // 23: ai.metathings.service.identityd2.IdentitydService.ShowEntity:input_type -> google.protobuf.Empty
	24, // 24: ai.metathings.service.identityd2.IdentitydService.AddRoleToEntity:input_type -> ai.metathings.service.identityd2.AddRoleToEntityRequest
	25, // 25: ai.metathings.service.identityd2.IdentitydService.RemoveRoleFromEntity:input_type -> ai.metathings.service.identityd2.RemoveRoleFromEntityRequest
	26, // 26: ai.metathings.service.identityd2.IdentitydService.AddEntityToDomain:input_type -> ai.metathings.service.identityd2.AddEntityToDomainRequest
	27, // 27: ai.metathings.service.identityd2.IdentitydService.RemoveEntityFromDomain:input_type -> ai.metathings.service.identityd2.RemoveEntityFromDomainRequest
	28, // 28: ai.metathings.service.identityd2.IdentitydService.CreateGroup:input_type -> ai.metathings.service.identityd2.CreateGroupRequest
	29, // 29: ai.metathings.service.identityd2.IdentitydService.DeleteGroup:input_type -> ai.metathings.service.identityd2.DeleteGroupRequest
	30, // 30: ai.metathings.service.identityd2.IdentitydService.PatchGroup:input_type -> ai.metathings.service.identityd2.PatchGroupRequest
	31, // 31: ai.metathings.service.identityd2.IdentitydService.GetGroup:input_type -> ai.metathings.service.identityd2.GetGroupRequest
	32, // 32: ai.metathings.service.identityd2.IdentitydService.ListGroups:input_type -> ai.metathings.service.identityd2.ListGroupsRequest
	33, // 33: ai.metathings.service.identityd2.IdentitydService.ListGroupsForSubject:input_type -> ai.metathings.service.identityd2.ListGroupsForSubjectRequest
	34, // 34: ai.metathings.service.identityd2.IdentitydService.ListGroupsForObject:input_type -> ai.metathings.service.identityd2.ListGroupsForObjectRequest
	23, // 35: ai.metathings.service.identityd2.IdentitydService.ShowGroups:input_type -> google.protobuf.Empty
	35, // 36: ai.metathings.service.identityd2.IdentitydService.AddRoleToGroup:input_type -> ai.metathings.service.identityd2.AddRoleToGroupRequest
	36, // 37: ai.metathings.service.identityd2.IdentitydService.RemoveRoleFromGroup:input_type -> ai.metathings.service.identityd2.RemoveRoleFromGroupRequest
	37, // 38: ai.metathings.service.identityd2.IdentitydService.AddSubjectToGroup:input_type -> ai.metathings.service.identityd2.AddSubjectToGroupRequest
	38, // 39: ai.metathings.service.identityd2.IdentitydService.RemoveSubjectFromGroup:input_type -> ai.metathings.service.identityd2.RemoveSubjectFromGroupRequest
	39, // 40: ai.metathings.service.identityd2.IdentitydService.AddObjectToGroup:input_type -> ai.metathings.service.identityd2.AddObjectToGroupRequest
	40, // 41: ai.metathings.service.identityd2.IdentitydService.RemoveObjectFromGroup:input_type -> ai.metathings.service.identityd2.RemoveObjectFromGroupRequest
	41, // 42: ai.metathings.service.identityd2.IdentitydService.CreateCredential:input_type -> ai.metathings.service.identityd2.CreateCredentialRequest
	42, // 43: ai.metathings.service.identityd2.IdentitydService.DeleteCredential:input_type -> ai.metathings.service.identityd2.DeleteCredentialRequest
	43, // 44: ai.metathings.service.identityd2.IdentitydService.PatchCredential:input_type -> ai.metathings.service.identityd2.PatchCredentialRequest
	44, // 45: ai.metathings.service.identityd2.IdentitydService.GetCredential:input_type -> ai.metathings.service.identityd2.GetCredentialRequest
	45, // 46: ai.metathings.service.identityd2.IdentitydService.ListCredentials:input_type -> ai.metathings.service.identityd2.ListCredentialsRequest
	46, // 47: ai.metathings.service.identityd2.IdentitydService.ListCredentialsForEntity:input_type -> ai.metathings.service.identityd2.ListCredentialsForEntityRequest
	47, // 48: ai.metathings.service.identityd2.IdentitydService.IssueTokenByCredential:input_type -> ai.metathings.service.identityd2.IssueTokenByCredentialRequest
	48, // 49: ai.metathings.service.identityd2.IdentitydService.IssueTokenByPassword:input_type -> ai.metathings.service.identityd2.IssueTokenByPasswordRequest
	49, // 50: ai.metathings.service.identityd2.IdentitydService.IssueTokenByToken:input_type -> ai.metathings.service.identityd2.IssueTokenByTokenRequest
	50, // 51: ai.metathings.service.identityd2.IdentitydService.RevokeToken:input_type -> ai.metathings.service.identityd2.RevokeTokenRequest
	51, // 52: ai.metathings.service.identityd2.IdentitydService.ValidateToken:input_type -> ai.metathings.service.identityd2.ValidateTokenRequest
	52, // 53: ai.metathings.service.identityd2.IdentitydService.CheckToken:input_type -> ai.metathings.service.identityd2.CheckTokenRequest
	53, // 54: ai.metathings.service.identityd2.IdentitydService.AuthorizeToken:input_type -> ai.metathings.service.identityd2.AuthorizeTokenRequest
	54, // 55: ai.metathings.service.identityd2.IdentitydService.CreateDomain:output_type -> ai.metathings.service.identityd2.CreateDomainResponse
	23, // 56: ai.metathings.service.identityd2.IdentitydService.DeleteDomain:output_type -> google.protobuf.Empty
	55, // 57: ai.metathings.service.identityd2.IdentitydService.PatchDomain:output_type -> ai.metathings.service.identityd2.PatchDomainResponse
	56, // 58: ai.metathings.service.identityd2.IdentitydService.GetDomain:output_type -> ai.metathings.service.identityd2.GetDomainResponse
	57, // 59: ai.metathings.service.identityd2.IdentitydService.ListDomains:output_type -> ai.metathings.service.identityd2.ListDomainsResponse
	58, // 60: ai.metathings.service.identityd2.IdentitydService.CreateAction:output_type -> ai.metathings.service.identityd2.CreateActionResponse
	23, // 61: ai.metathings.service.identityd2.IdentitydService.DeleteAction:output_type -> google.protobuf.Empty
	59, // 62: ai.metathings.service.identityd2.IdentitydService.PatchAction:output_type -> ai.metathings.service.identityd2.PatchActionResponse
	60, // 63: ai.metathings.service.identityd2.IdentitydService.GetAction:output_type -> ai.metathings.service.identityd2.GetActionResponse
	61, // 64: ai.metathings.service.identityd2.IdentitydService.ListActions:output_type -> ai.metathings.service.identityd2.ListActionsResponse
	62, // 65: ai.metathings.service.identityd2.IdentitydService.CreateRole:output_type -> ai.metathings.service.identityd2.CreateRoleResponse
	23, // 66: ai.metathings.service.identityd2.IdentitydService.DeleteRole:output_type -> google.protobuf.Empty
	63, // 67: ai.metathings.service.identityd2.IdentitydService.PatchRole:output_type -> ai.metathings.service.identityd2.PatchRoleResponse
	64, // 68: ai.metathings.service.identityd2.IdentitydService.GetRole:output_type -> ai.metathings.service.identityd2.GetRoleResponse
	65, // 69: ai.metathings.service.identityd2.IdentitydService.ListRoles:output_type -> ai.metathings.service.identityd2.ListRolesResponse
	66, // 70: ai.metathings.service.identityd2.IdentitydService.ListRolesForEntity:output_type -> ai.metathings.service.identityd2.ListRolesForEntityResponse
	23, // 71: ai.metathings.service.identityd2.IdentitydService.AddActionToRole:output_type -> google.protobuf.Empty
	23, // 72: ai.metathings.service.identityd2.IdentitydService.RemoveActionFromRole:output_type -> google.protobuf.Empty
	67, // 73: ai.metathings.service.identityd2.IdentitydService.CreateEntity:output_type -> ai.metathings.service.identityd2.CreateEntityResponse
	23, // 74: ai.metathings.service.identityd2.IdentitydService.DeleteEntity:output_type -> google.protobuf.Empty
	68, // 75: ai.metathings.service.identityd2.IdentitydService.PatchEntity:output_type -> ai.metathings.service.identityd2.PatchEntityResponse
	69, // 76: ai.metathings.service.identityd2.IdentitydService.GetEntity:output_type -> ai.metathings.service.identityd2.GetEntityResponse
	70, // 77: ai.metathings.service.identityd2.IdentitydService.ListEntities:output_type -> ai.metathings.service.identityd2.ListEntitiesResponse
	71, // 78: ai.metathings.service.identityd2.IdentitydService.ShowEntity:output_type -> ai.metathings.service.identityd2.ShowEntityResponse
	23, // 79: ai.metathings.service.identityd2.IdentitydService.AddRoleToEntity:output_type -> google.protobuf.Empty
	23, // 80: ai.metathings.service.identityd2.IdentitydService.RemoveRoleFromEntity:output_type -> google.protobuf.Empty
	23, // 81: ai.metathings.service.identityd2.IdentitydService.AddEntityToDomain:output_type -> google.protobuf.Empty
	23, // 82: ai.metathings.service.identityd2.IdentitydService.RemoveEntityFromDomain:output_type -> google.protobuf.Empty
	72, // 83: ai.metathings.service.identityd2.IdentitydService.CreateGroup:output_type -> ai.metathings.service.identityd2.CreateGroupResponse
	23, // 84: ai.metathings.service.identityd2.IdentitydService.DeleteGroup:output_type -> google.protobuf.Empty
	73, // 85: ai.metathings.service.identityd2.IdentitydService.PatchGroup:output_type -> ai.metathings.service.identityd2.PatchGroupResponse
	74, // 86: ai.metathings.service.identityd2.IdentitydService.GetGroup:output_type -> ai.metathings.service.identityd2.GetGroupResponse
	75, // 87: ai.metathings.service.identityd2.IdentitydService.ListGroups:output_type -> ai.metathings.service.identityd2.ListGroupsResponse
	76, // 88: ai.metathings.service.identityd2.IdentitydService.ListGroupsForSubject:output_type -> ai.metathings.service.identityd2.ListGroupsForSubjectResponse
	77, // 89: ai.metathings.service.identityd2.IdentitydService.ListGroupsForObject:output_type -> ai.metathings.service.identityd2.ListGroupsForObjectResponse
	78, // 90: ai.metathings.service.identityd2.IdentitydService.ShowGroups:output_type -> ai.metathings.service.identityd2.ShowGroupsResponse
	23, // 91: ai.metathings.service.identityd2.IdentitydService.AddRoleToGroup:output_type -> google.protobuf.Empty
	23, // 92: ai.metathings.service.identityd2.IdentitydService.RemoveRoleFromGroup:output_type -> google.protobuf.Empty
	23, // 93: ai.metathings.service.identityd2.IdentitydService.AddSubjectToGroup:output_type -> google.protobuf.Empty
	23, // 94: ai.metathings.service.identityd2.IdentitydService.RemoveSubjectFromGroup:output_type -> google.protobuf.Empty
	23, // 95: ai.metathings.service.identityd2.IdentitydService.AddObjectToGroup:output_type -> google.protobuf.Empty
	23, // 96: ai.metathings.service.identityd2.IdentitydService.RemoveObjectFromGroup:output_type -> google.protobuf.Empty
	79, // 97: ai.metathings.service.identityd2.IdentitydService.CreateCredential:output_type -> ai.metathings.service.identityd2.CreateCredentialResponse
	23, // 98: ai.metathings.service.identityd2.IdentitydService.DeleteCredential:output_type -> google.protobuf.Empty
	80, // 99: ai.metathings.service.identityd2.IdentitydService.PatchCredential:output_type -> ai.metathings.service.identityd2.PatchCredentialResponse
	81, // 100: ai.metathings.service.identityd2.IdentitydService.GetCredential:output_type -> ai.metathings.service.identityd2.GetCredentialResponse
	82, // 101: ai.metathings.service.identityd2.IdentitydService.ListCredentials:output_type -> ai.metathings.service.identityd2.ListCredentialsResponse
	83, // 102: ai.metathings.service.identityd2.IdentitydService.ListCredentialsForEntity:output_type -> ai.metathings.service.identityd2.ListCredentialsForEntityResponse
	84, // 103: ai.metathings.service.identityd2.IdentitydService.IssueTokenByCredential:output_type -> ai.metathings.service.identityd2.IssueTokenByCredentialResponse
	85, // 104: ai.metathings.service.identityd2.IdentitydService.IssueTokenByPassword:output_type -> ai.metathings.service.identityd2.IssueTokenByPasswordResponse
	86, // 105: ai.metathings.service.identityd2.IdentitydService.IssueTokenByToken:output_type -> ai.metathings.service.identityd2.IssueTokenByTokenResponse
	23, // 106: ai.metathings.service.identityd2.IdentitydService.RevokeToken:output_type -> google.protobuf.Empty
	87, // 107: ai.metathings.service.identityd2.IdentitydService.ValidateToken:output_type -> ai.metathings.service.identityd2.ValidateTokenResponse
	23, // 108: ai.metathings.service.identityd2.IdentitydService.CheckToken:output_type -> google.protobuf.Empty
	23, // 109: ai.metathings.service.identityd2.IdentitydService.AuthorizeToken:output_type -> google.protobuf.Empty
	55, // [55:110] is the sub-list for method output_type
	0,  // [0:55] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	file_create_domain_proto_init()
	file_delete_domain_proto_init()
	file_patch_domain_proto_init()
	file_get_domain_proto_init()
	file_list_domains_proto_init()
	file_create_action_proto_init()
	file_delete_action_proto_init()
	file_patch_action_proto_init()
	file_get_action_proto_init()
	file_list_actions_proto_init()
	file_create_role_proto_init()
	file_delete_role_proto_init()
	file_patch_role_proto_init()
	file_get_role_proto_init()
	file_list_roles_proto_init()
	file_list_roles_for_entity_proto_init()
	file_add_action_to_role_proto_init()
	file_remove_action_from_role_proto_init()
	file_create_entity_proto_init()
	file_delete_entity_proto_init()
	file_patch_entity_proto_init()
	file_get_entity_proto_init()
	file_list_entities_proto_init()
	file_show_entity_proto_init()
	file_add_role_to_entity_proto_init()
	file_remove_role_from_entity_proto_init()
	file_add_entity_to_domain_proto_init()
	file_remove_entity_from_domain_proto_init()
	file_create_group_proto_init()
	file_delete_group_proto_init()
	file_patch_group_proto_init()
	file_get_group_proto_init()
	file_list_groups_proto_init()
	file_list_groups_for_subject_proto_init()
	file_list_groups_for_object_proto_init()
	file_show_groups_proto_init()
	file_add_role_to_group_proto_init()
	file_remove_role_from_group_proto_init()
	file_add_subject_to_group_proto_init()
	file_remove_subject_from_group_proto_init()
	file_add_object_to_group_proto_init()
	file_remove_object_from_group_proto_init()
	file_create_credential_proto_init()
	file_delete_credential_proto_init()
	file_patch_credential_proto_init()
	file_get_credential_proto_init()
	file_list_credentials_proto_init()
	file_list_credentials_for_entity_proto_init()
	file_issue_token_by_credential_proto_init()
	file_issue_token_by_password_proto_init()
	file_issue_token_by_token_proto_init()
	file_revoke_token_proto_init()
	file_validate_token_proto_init()
	file_check_token_proto_init()
	file_authorize_token_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IdentitydServiceClient is the client API for IdentitydService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IdentitydServiceClient interface {
	//
	// @fn CreateDomain
	// @arg domain.id <optional> "domain id"
	// @arg domain.parent.id "domain parent id"
	// @arg domain.name "domain name"
	// @arg domain.alias <optional> "domain alias"
	// @arg domain.extra <optional> "extra data, json string"
	// @ret domain
	// @req
	//   {
	//     "domain": {
	//       "name": "test",
	//       "parent": {
	//         "id": "default"
	//       }
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error)
	//
	// @fn DeleteDomain
	// @arg domain.id "domain id"
	// @ret
	// @req
	//   {
	//     "domain": {
	//       "id": "domain-id"
	//     }
	//   }
	// @res
	//   { }
	// @err FailedPrecondition
	// @err Internal
	DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// @fn PatchDomain
	// @arg domain.id "domain id"
	// @arg domain.alias <optional> "domain alias"
	// @arg domain.extra <optional> "extra data, json string"
	// @ret domain
	// @req
	//   {
	//     "domain": {
	//       "id": "domain-id"
	//       "alias": "renamed-domain"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchDomain(ctx context.Context, in *PatchDomainRequest, opts ...grpc.CallOption) (*PatchDomainResponse, error)
	//
	// @fn GetDomain
	// @arg domain.id "domain id"
	// @ret domain
	// @req
	//   {
	//     "domain": {
	//       "id": "domain-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err InvalidArgument
	// @err Internal
	GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*GetDomainResponse, error)
	//
	// @fn ListDomains
	// @arg domain.id <optional> "domain id"
	// @arg domain.name <optional> "domain name"
	// @arg domain.alias <optional> "domain alias"
	// @ret domains "list of domains"
	// @req
	//   { ... }
	// @res
	//   { ... }
	// @err Internal
	ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error)
	//
	// @fn CreateAction
	// @arg action.id <optional> "action id"
	// @arg action.name "action name, format: <service>:<action>, example: identtiyd2:create_action"
	// @arg action.alias <optional> "action alias"
	// @arg action.description <optional> "action description"
	// @arg action.extra <optional> "extra data, json string"
	// @ret action
	// @req
	//   {
	//     "action": {
	//       "name": "identityd2:create_action"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateAction(ctx context.Context, in *CreateActionRequest, opts ...grpc.CallOption) (*CreateActionResponse, error)
	//
	// @fn DeleteAction
	// @arg action.id "action id"
	// @ret
	// @req
	//   {
	//     "action": {
	//       "id": "action-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	DeleteAction(ctx context.Context, in *DeleteActionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// @fn PatchAction
	// @arg action.id "action id"
	// @arg action.alias <optional> "action alias"
	// @arg action.description <optional> "action description"
	// @arg action.extra <optional> "extra data, json string"
	// @ret action
	// @req
	//   {
	//     "action": {
	//       "id": "action-id",
	//       "alias": "renamed-action-alias"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchAction(ctx context.Context, in *PatchActionRequest, opts ...grpc.CallOption) (*PatchActionResponse, error)
	//
	// @fn GetAction
	// @arg action.id "action id"
	// @ret action
	// @req
	//   {
	//     "action": {
	//       "id": "action-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	GetAction(ctx context.Context, in *GetActionRequest, opts ...grpc.CallOption) (*GetActionResponse, error)
	//
	// @fn ListActions
	// @unimplemented
	// @arg action.id <optional> "action id"
	// @arg action.name <optional> "action name"
	// @arg action.alias <optional> "action alias"
	// @ret actions "list of action"
	// @req
	//   { ... }
	// @res
	//   { ... }
	// @err Internal
	ListActions(ctx context.Context, in *ListActionsRequest, opts ...grpc.CallOption) (*ListActionsResponse, error)
	//
	// @fn CreateRole
	// @arg role.id <optional> "role id"
	// @arg role.name "role name"
	// @arg role.alias <optional> "role alias"
	// @arg role.description <optional> "role description"
	// @arg role.extra <optional> "extra data, json string"
	// @ret role
	// @req
	//   {
	//     "role": {
	//       "name": "admin"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	//
	// @fn DeleteRole
	// @arg role.id "role id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// @fn PatchRole
	// @arg role.id "role id"
	// @arg role.alias <optional> "role alias"
	// @arg role.description <optional> "role description"
	// @arg role.extra <optional> "extra data, json string"
	// @ret role
	// @req
	//   {
	//     "role": {
	//       "id": "role-id",
	//       "alias": "renamed-role-alias"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchRole(ctx context.Context, in *PatchRoleRequest, opts ...grpc.CallOption) (*PatchRoleResponse, error)
	//
	// @fn GetRole
	// @arg role.id "role id"
	// @ret role
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err InvalidArgument
	// @err Internal
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error)
	//
	// @fn ListRoles
	// @arg role.id <optional> "role id"
	// @arg role.name <optional> "role name"
	// @arg role.alias <optional> "role alias"
	// @ret roles "list of role"
	// @req
	//   {
	//     "role": {
	//       "id": "role-id",
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	//
	// @fn ListRolesForEntity
	// @unimplemented
	ListRolesForEntity(ctx context.Context, in *ListRolesForEntityRequest, opts ...grpc.CallOption) (*ListRolesForEntityResponse, error)
	//
	// @fn AddActionToRole
	// @arg role.id "role id"
	// @arg action.id "action id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "action": {
	//       "id": "action-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	AddActionToRole(ctx context.Context, in *AddActionToRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// @fn RemoveActionFromRole
	// @arg role.id "role id"
	// @arg action.id "action id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "action": {
	//       "id": "action-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	RemoveActionFromRole(ctx context.Context, in *RemoveActionFromRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// @fn CreateEntity
	// @arg entity.id <optional> "entity id"
	// @arg entity.name "entity name"
	// @arg entity.alias <optional> "entity alias"
	// @arg entity.password <optional> "if create entity for user, password MUST exists, password size from 8 to 128 bytes"
	// @arg entity.extra <optional> "extra data, json string"
	// @ret entity
	// @req
	//   {
	//     "entity": {
	//       "name": "entity-name",
	//       "password": "password",
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error)
	//
	// @fn DeleteEntity
	// @arg entity.id "entity id"
	// @ret
	// @req
	//   {
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// @fn PatchEntity
	// @arg entity.id "entity id"
	// @arg entity.alias <optional> "entity alias"
	// @arg enttiy.password <optional> "entity password"
	// @arg entity.extra <optional> "extra data, json string"
	// @ret entity
	// @req
	//   {
	//     "entity": {
	//       "id": "entity-id",
	//       "password": "new-password"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchEntity(ctx context.Context, in *PatchEntityRequest, opts ...grpc.CallOption) (*PatchEntityResponse, error)
	//
	// @fn GetEnttiy
	// @arg entity.id "entity id"
	// @ret entity
	// @req
	//   {
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error)
	//
	// @fn ListEntities
	// @arg entity.id <optional> "entity id"
	// @arg entity.name <optional> "entity name"
	// @arg entity.alias <optional> "entity alias"
	// @ret entities "list of entity"
	// @req
	//   {
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error)
	//
	// @fn ShowEntity
	// @unimplemented
	ShowEntity(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ShowEntityResponse, error)
	//
	// @fn AddRoleToEntity
	// @arg role.id "role id"
	// @arg entity.id "entity id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	AddRoleToEntity(ctx context.Context, in *AddRoleToEntityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// @fn RemoveRoleFromEntity
	// @arg role.id "role id"
	// @arg entity.id "entity id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	RemoveRoleFromEntity(ctx context.Context, in *RemoveRoleFromEntityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// @fn AddEntityToDomain
	// @arg domain.id "domain id"
	// @arg entity.id "entity id"
	// @ret
	// @req
	//   {
	//     "domain": {
	//       "id": "domain-id"
	//     },
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	AddEntityToDomain(ctx context.Context, in *AddEntityToDomainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// @fn RemoveEntityFromDomain
	// @arg domain.id "domain id"
	// @arg entity.id "entity id"
	// @ret
	// @req
	//   {
	//     "domain": {
	//       "id": "domain-id"
	//     },
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	RemoveEntityFromDomain(ctx context.Context, in *RemoveEntityFromDomainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// @fn CreateGroup
	// @arg group.id <optional> "group id"
	// @arg group.domain.id "create group in domain"
	// @arg group.name "group name"
	// @arg group.alias "group alias"
	// @arg group.description "group description"
	// @arg group.extra "extra data, json string"
	// @ret group
	// @req
	//   {
	//     "group": {
	//       "name": "group-name",
	//       "domain": {
	//         "id": "domain-id"
	//       }
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	//
	// @fn DeleteGroup
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// @fn PatchGroup
	// @arg group.id "group id"
	// @arg group.alias <optional> "group alias"
	// @arg group.description <optional> "group description"
	// @arg group.extra <optional> "extra data, json string"
	// @ret group
	// @req
	//   {
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchGroup(ctx context.Context, in *PatchGroupRequest, opts ...grpc.CallOption) (*PatchGroupResponse, error)
	//
	// @fn GetGroup
	// @arg group.id "group id"
	// @ret group
	// @req
	//   {
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	//
	// @fn ListGroups
	// @arg group.id <optional> "group id"
	// @arg group.domain.id <optional> "domain id"
	// @arg group.name <optional> "group name"
	// @arg group.alias <optional> "group alias"
	// @ret groups "list of group"
	// @req
	//   {
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error)
	//
	// @fn ListGroupsForSubject
	// @arg subject.id "subject id"
	// @ret groups
	// @req
	//   { ... }
	// @err Internal
	ListGroupsForSubject(ctx context.Context, in *ListGroupsForSubjectRequest, opts ...grpc.CallOption) (*ListGroupsForSubjectResponse, error)
	//
	// @fn ListGroupsForObject
	// @arg object.id "object id"
	// @ret groups
	// @req
	//   { ... }
	// @err Internal
	ListGroupsForObject(ctx context.Context, in *ListGroupsForObjectRequest, opts ...grpc.CallOption) (*ListGroupsForObjectResponse, error)
	//
	// @fn ShowGroups
	// @unimplemented
	ShowGroups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ShowGroupsResponse, error)
	//
	// @fn AddRoleToGroup
	// @arg role.id "role id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	AddRoleToGroup(ctx context.Context, in *AddRoleToGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// @fn RemoveRoleFromGroup
	// @arg role.id "role id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	RemoveRoleFromGroup(ctx context.Context, in *RemoveRoleFromGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// @fn AddSubjectToGroup
	// @arg subject.id "subject id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "subject": {
	//       "id": "subject-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	AddSubjectToGroup(ctx context.Context, in *AddSubjectToGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// @fn RemoveSubjectFromGroup
	// @arg subject.id "subject id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "subject": {
	//       "id": "subject-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	RemoveSubjectFromGroup(ctx context.Context, in *RemoveSubjectFromGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// @fn AddObjectToGroup
	// @arg object.id "object id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "object": {
	//       "id": "object-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	AddObjectToGroup(ctx context.Context, in *AddObjectToGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// @fn RemoveObjectFromGroup
	// @arg object.id "object id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "object": {
	//       "id": "object-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	RemoveObjectFromGroup(ctx context.Context, in *RemoveObjectFromGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// @fn CreateCredential
	// @arg credential.id <optional> "credential id"
	// @arg credential.domain.id "domain id"
	// @arg credential.entity.id "entity id"
	// @arg credential.name "credential name"
	// @arg credential.alias <optional> "credential alias"
	// @arg credential.secret <optional> "credential secret"
	// @arg credential.description <optional> "credential description"
	// @arg credential.expires_at <optional> "expires time"
	// @arg credential.roles.id <list> <optional> "list of role"
	// @arg secret_size <optional> "secret size, default 32 bytes"
	// @ret credential
	// @req
	//   {
	//     "credential": {
	//       "domain": {
	//         "id": "domain-id"
	//       },
	//       "entity": {
	//         "id": "entity-id"
	//       },
	//       "name": "cred-name",
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateCredential(ctx context.Context, in *CreateCredentialRequest, opts ...grpc.CallOption) (*CreateCredentialResponse, error)
	//
	// @fn DeleteCredential
	// @arg credential.id "credential id"
	// @ret
	// @req
	//   {
	//     "credential": {
	//       "id": "credential-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// @fn PatchCredential
	// @arg credential.id "credential id"
	// @arg credential.alias "credential alias"
	// @arg credential.description "credential description"
	// @ret credential
	// @req
	//   {
	//     "credential": {
	//       "id": "credential-id",
	//       "alias": "renamed-credential-alias"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchCredential(ctx context.Context, in *PatchCredentialRequest, opts ...grpc.CallOption) (*PatchCredentialResponse, error)
	//
	// @fn GetCredential
	// @arg credential.id "credential id"
	// @ret credential
	// @req
	//   {
	//     "credential": {
	//       "id": "credential-id",
	//     }
	//   }
	// @res
	//   { ... }
	GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error)
	//
	// @fn ListCredentials
	// @arg credential.id <optional> "credential id"
	// @arg credential.domain.id <optional> "domain id"
	// @arg credential.entity.id <optional> "entity id"
	// @arg credential.name <optional> "credential name"
	// @arg credential.alias <optional> "credential alias"
	// @ret credentials "list of credential"
	// @req
	//   {
	//     "credential": {
	//       "id": "credential-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	ListCredentials(ctx context.Context, in *ListCredentialsRequest, opts ...grpc.CallOption) (*ListCredentialsResponse, error)
	//
	// @fn ListCredentialsForEntity
	// @arg entity.id "entity id"
	// @req
	//   {
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	ListCredentialsForEntity(ctx context.Context, in *ListCredentialsForEntityRequest, opts ...grpc.CallOption) (*ListCredentialsForEntityResponse, error)
	//
	// @fn IssueTokenByCredential
	// @arg credential.id "credential id"
	// @arg credential.domain.id "domain id"
	// @arg timestamp "timestamp"
	// @arg nonce "nonce"
	// @arg hmac "=hmac(key, credential.id+timestamp+nonce), helper: pkg/identityd2/contrib/issue_token_by_credential.go:NewIssueTokenByCredentialRequest"
	// @ret token
	// @req
	//   {
	//     "credential": {
	//       "id": "credential-id"
	//     },
	//     "timestamp": {
	//       "seconds": 0,
	//       "nanos": 0
	//     },
	//     "nonce": 0,
	//     "hmac": "hmac"
	//   }
	// @res
	//   { ... }
	// @err Internal
	// @err Unauthenticated
	IssueTokenByCredential(ctx context.Context, in *IssueTokenByCredentialRequest, opts ...grpc.CallOption) (*IssueTokenByCredentialResponse, error)
	//
	// @fn IssueTokenByPassword
	// @arg entity.domains.id "domain id, less 1 domain"
	// @arg entity.id <optional> "entity id"
	// @arg entity.name <optional> "entity name"
	// @arg entity.password "entity password"
	// @ret token
	// @req
	//   {
	//     "entity": {
	//       "domains": [{"id": "domain-id"}],
	//       "name": "test",
	//       "password": "test"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	// @err Unauthenticated
	IssueTokenByPassword(ctx context.Context, in *IssueTokenByPasswordRequest, opts ...grpc.CallOption) (*IssueTokenByPasswordResponse, error)
	//
	// @fn IssueTokenByToken
	// @arg token.domain.id "domain id"
	// @arg token.text "token text"
	// @ret token
	// @req
	//   {
	//     "token": {
	//       "domain": {
	//         "id": "domain-id"
	//       },
	//       "text": "token-text"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	// @err Unauthenticated
	IssueTokenByToken(ctx context.Context, in *IssueTokenByTokenRequest, opts ...grpc.CallOption) (*IssueTokenByTokenResponse, error)
	//
	// @fn RevokeToken
	// @arg token.text "token text"
	// @ret
	// @req
	//   {
	//     "token": {
	//       "text": "token-text"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	// @err FailedPrecondition
	RevokeToken(ctx context.Context, in *RevokeTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// @fn ValidateToken
	// @arg token.text "token text"
	// @ret
	// @req
	//   {
	//     "token": {
	//       "text": "token-text"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	// @err InvalidArgument
	// @err Unauthenticated
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
	//
	// @fn CheckToken
	// @arg token.text "token text"
	// @arg token.domain.id "domain id"
	// @ret
	// @req
	//   {
	//     "token": {
	//       "domain": {
	//         "id": "domain-id"
	//       },
	//       "text": "token-text"
	//     }
	//   }
	// @err Internal
	// @err InvalidArgument
	// @err Unauthenticated
	CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// @fn AuthorizeToken
	// @arg object.id "object id"
	// @arg action.name "action name"
	// @ret
	// @req
	//   {
	//     "object": {
	//       "id": "object-id"
	//     },
	//     "action": {
	//       "name": "action-name"
	//     }
	//   }
	// @res
	// @err PermissionDenied
	// @err Internal
	AuthorizeToken(ctx context.Context, in *AuthorizeTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type identitydServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentitydServiceClient(cc grpc.ClientConnInterface) IdentitydServiceClient {
	return &identitydServiceClient{cc}
}

func (c *identitydServiceClient) CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error) {
	out := new(CreateDomainResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/CreateDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/DeleteDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchDomain(ctx context.Context, in *PatchDomainRequest, opts ...grpc.CallOption) (*PatchDomainResponse, error) {
	out := new(PatchDomainResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/PatchDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*GetDomainResponse, error) {
	out := new(GetDomainResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/GetDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error) {
	out := new(ListDomainsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CreateAction(ctx context.Context, in *CreateActionRequest, opts ...grpc.CallOption) (*CreateActionResponse, error) {
	out := new(CreateActionResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/CreateAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteAction(ctx context.Context, in *DeleteActionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/DeleteAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchAction(ctx context.Context, in *PatchActionRequest, opts ...grpc.CallOption) (*PatchActionResponse, error) {
	out := new(PatchActionResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/PatchAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetAction(ctx context.Context, in *GetActionRequest, opts ...grpc.CallOption) (*GetActionResponse, error) {
	out := new(GetActionResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/GetAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListActions(ctx context.Context, in *ListActionsRequest, opts ...grpc.CallOption) (*ListActionsResponse, error) {
	out := new(ListActionsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchRole(ctx context.Context, in *PatchRoleRequest, opts ...grpc.CallOption) (*PatchRoleResponse, error) {
	out := new(PatchRoleResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/PatchRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListRolesForEntity(ctx context.Context, in *ListRolesForEntityRequest, opts ...grpc.CallOption) (*ListRolesForEntityResponse, error) {
	out := new(ListRolesForEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListRolesForEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AddActionToRole(ctx context.Context, in *AddActionToRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/AddActionToRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RemoveActionFromRole(ctx context.Context, in *RemoveActionFromRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/RemoveActionFromRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error) {
	out := new(CreateEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/CreateEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/DeleteEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchEntity(ctx context.Context, in *PatchEntityRequest, opts ...grpc.CallOption) (*PatchEntityResponse, error) {
	out := new(PatchEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/PatchEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error) {
	out := new(GetEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/GetEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error) {
	out := new(ListEntitiesResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ShowEntity(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ShowEntityResponse, error) {
	out := new(ShowEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ShowEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AddRoleToEntity(ctx context.Context, in *AddRoleToEntityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/AddRoleToEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RemoveRoleFromEntity(ctx context.Context, in *RemoveRoleFromEntityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/RemoveRoleFromEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AddEntityToDomain(ctx context.Context, in *AddEntityToDomainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/AddEntityToDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RemoveEntityFromDomain(ctx context.Context, in *RemoveEntityFromDomainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/RemoveEntityFromDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchGroup(ctx context.Context, in *PatchGroupRequest, opts ...grpc.CallOption) (*PatchGroupResponse, error) {
	out := new(PatchGroupResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/PatchGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	out := new(ListGroupsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListGroupsForSubject(ctx context.Context, in *ListGroupsForSubjectRequest, opts ...grpc.CallOption) (*ListGroupsForSubjectResponse, error) {
	out := new(ListGroupsForSubjectResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListGroupsForSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListGroupsForObject(ctx context.Context, in *ListGroupsForObjectRequest, opts ...grpc.CallOption) (*ListGroupsForObjectResponse, error) {
	out := new(ListGroupsForObjectResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListGroupsForObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ShowGroups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ShowGroupsResponse, error) {
	out := new(ShowGroupsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ShowGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AddRoleToGroup(ctx context.Context, in *AddRoleToGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/AddRoleToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RemoveRoleFromGroup(ctx context.Context, in *RemoveRoleFromGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/RemoveRoleFromGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AddSubjectToGroup(ctx context.Context, in *AddSubjectToGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/AddSubjectToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RemoveSubjectFromGroup(ctx context.Context, in *RemoveSubjectFromGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/RemoveSubjectFromGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AddObjectToGroup(ctx context.Context, in *AddObjectToGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/AddObjectToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RemoveObjectFromGroup(ctx context.Context, in *RemoveObjectFromGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/RemoveObjectFromGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CreateCredential(ctx context.Context, in *CreateCredentialRequest, opts ...grpc.CallOption) (*CreateCredentialResponse, error) {
	out := new(CreateCredentialResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/CreateCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/DeleteCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchCredential(ctx context.Context, in *PatchCredentialRequest, opts ...grpc.CallOption) (*PatchCredentialResponse, error) {
	out := new(PatchCredentialResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/PatchCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error) {
	out := new(GetCredentialResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/GetCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListCredentials(ctx context.Context, in *ListCredentialsRequest, opts ...grpc.CallOption) (*ListCredentialsResponse, error) {
	out := new(ListCredentialsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListCredentialsForEntity(ctx context.Context, in *ListCredentialsForEntityRequest, opts ...grpc.CallOption) (*ListCredentialsForEntityResponse, error) {
	out := new(ListCredentialsForEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListCredentialsForEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) IssueTokenByCredential(ctx context.Context, in *IssueTokenByCredentialRequest, opts ...grpc.CallOption) (*IssueTokenByCredentialResponse, error) {
	out := new(IssueTokenByCredentialResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/IssueTokenByCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) IssueTokenByPassword(ctx context.Context, in *IssueTokenByPasswordRequest, opts ...grpc.CallOption) (*IssueTokenByPasswordResponse, error) {
	out := new(IssueTokenByPasswordResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/IssueTokenByPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) IssueTokenByToken(ctx context.Context, in *IssueTokenByTokenRequest, opts ...grpc.CallOption) (*IssueTokenByTokenResponse, error) {
	out := new(IssueTokenByTokenResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/IssueTokenByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RevokeToken(ctx context.Context, in *RevokeTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/RevokeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	out := new(ValidateTokenResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/CheckToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AuthorizeToken(ctx context.Context, in *AuthorizeTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/AuthorizeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentitydServiceServer is the server API for IdentitydService service.
type IdentitydServiceServer interface {
	//
	// @fn CreateDomain
	// @arg domain.id <optional> "domain id"
	// @arg domain.parent.id "domain parent id"
	// @arg domain.name "domain name"
	// @arg domain.alias <optional> "domain alias"
	// @arg domain.extra <optional> "extra data, json string"
	// @ret domain
	// @req
	//   {
	//     "domain": {
	//       "name": "test",
	//       "parent": {
	//         "id": "default"
	//       }
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateDomain(context.Context, *CreateDomainRequest) (*CreateDomainResponse, error)
	//
	// @fn DeleteDomain
	// @arg domain.id "domain id"
	// @ret
	// @req
	//   {
	//     "domain": {
	//       "id": "domain-id"
	//     }
	//   }
	// @res
	//   { }
	// @err FailedPrecondition
	// @err Internal
	DeleteDomain(context.Context, *DeleteDomainRequest) (*emptypb.Empty, error)
	//
	// @fn PatchDomain
	// @arg domain.id "domain id"
	// @arg domain.alias <optional> "domain alias"
	// @arg domain.extra <optional> "extra data, json string"
	// @ret domain
	// @req
	//   {
	//     "domain": {
	//       "id": "domain-id"
	//       "alias": "renamed-domain"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchDomain(context.Context, *PatchDomainRequest) (*PatchDomainResponse, error)
	//
	// @fn GetDomain
	// @arg domain.id "domain id"
	// @ret domain
	// @req
	//   {
	//     "domain": {
	//       "id": "domain-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err InvalidArgument
	// @err Internal
	GetDomain(context.Context, *GetDomainRequest) (*GetDomainResponse, error)
	//
	// @fn ListDomains
	// @arg domain.id <optional> "domain id"
	// @arg domain.name <optional> "domain name"
	// @arg domain.alias <optional> "domain alias"
	// @ret domains "list of domains"
	// @req
	//   { ... }
	// @res
	//   { ... }
	// @err Internal
	ListDomains(context.Context, *ListDomainsRequest) (*ListDomainsResponse, error)
	//
	// @fn CreateAction
	// @arg action.id <optional> "action id"
	// @arg action.name "action name, format: <service>:<action>, example: identtiyd2:create_action"
	// @arg action.alias <optional> "action alias"
	// @arg action.description <optional> "action description"
	// @arg action.extra <optional> "extra data, json string"
	// @ret action
	// @req
	//   {
	//     "action": {
	//       "name": "identityd2:create_action"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateAction(context.Context, *CreateActionRequest) (*CreateActionResponse, error)
	//
	// @fn DeleteAction
	// @arg action.id "action id"
	// @ret
	// @req
	//   {
	//     "action": {
	//       "id": "action-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	DeleteAction(context.Context, *DeleteActionRequest) (*emptypb.Empty, error)
	//
	// @fn PatchAction
	// @arg action.id "action id"
	// @arg action.alias <optional> "action alias"
	// @arg action.description <optional> "action description"
	// @arg action.extra <optional> "extra data, json string"
	// @ret action
	// @req
	//   {
	//     "action": {
	//       "id": "action-id",
	//       "alias": "renamed-action-alias"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchAction(context.Context, *PatchActionRequest) (*PatchActionResponse, error)
	//
	// @fn GetAction
	// @arg action.id "action id"
	// @ret action
	// @req
	//   {
	//     "action": {
	//       "id": "action-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	GetAction(context.Context, *GetActionRequest) (*GetActionResponse, error)
	//
	// @fn ListActions
	// @unimplemented
	// @arg action.id <optional> "action id"
	// @arg action.name <optional> "action name"
	// @arg action.alias <optional> "action alias"
	// @ret actions "list of action"
	// @req
	//   { ... }
	// @res
	//   { ... }
	// @err Internal
	ListActions(context.Context, *ListActionsRequest) (*ListActionsResponse, error)
	//
	// @fn CreateRole
	// @arg role.id <optional> "role id"
	// @arg role.name "role name"
	// @arg role.alias <optional> "role alias"
	// @arg role.description <optional> "role description"
	// @arg role.extra <optional> "extra data, json string"
	// @ret role
	// @req
	//   {
	//     "role": {
	//       "name": "admin"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	//
	// @fn DeleteRole
	// @arg role.id "role id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error)
	//
	// @fn PatchRole
	// @arg role.id "role id"
	// @arg role.alias <optional> "role alias"
	// @arg role.description <optional> "role description"
	// @arg role.extra <optional> "extra data, json string"
	// @ret role
	// @req
	//   {
	//     "role": {
	//       "id": "role-id",
	//       "alias": "renamed-role-alias"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchRole(context.Context, *PatchRoleRequest) (*PatchRoleResponse, error)
	//
	// @fn GetRole
	// @arg role.id "role id"
	// @ret role
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err InvalidArgument
	// @err Internal
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
	//
	// @fn ListRoles
	// @arg role.id <optional> "role id"
	// @arg role.name <optional> "role name"
	// @arg role.alias <optional> "role alias"
	// @ret roles "list of role"
	// @req
	//   {
	//     "role": {
	//       "id": "role-id",
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	//
	// @fn ListRolesForEntity
	// @unimplemented
	ListRolesForEntity(context.Context, *ListRolesForEntityRequest) (*ListRolesForEntityResponse, error)
	//
	// @fn AddActionToRole
	// @arg role.id "role id"
	// @arg action.id "action id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "action": {
	//       "id": "action-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	AddActionToRole(context.Context, *AddActionToRoleRequest) (*emptypb.Empty, error)
	//
	// @fn RemoveActionFromRole
	// @arg role.id "role id"
	// @arg action.id "action id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "action": {
	//       "id": "action-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	RemoveActionFromRole(context.Context, *RemoveActionFromRoleRequest) (*emptypb.Empty, error)
	//
	// @fn CreateEntity
	// @arg entity.id <optional> "entity id"
	// @arg entity.name "entity name"
	// @arg entity.alias <optional> "entity alias"
	// @arg entity.password <optional> "if create entity for user, password MUST exists, password size from 8 to 128 bytes"
	// @arg entity.extra <optional> "extra data, json string"
	// @ret entity
	// @req
	//   {
	//     "entity": {
	//       "name": "entity-name",
	//       "password": "password",
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateEntity(context.Context, *CreateEntityRequest) (*CreateEntityResponse, error)
	//
	// @fn DeleteEntity
	// @arg entity.id "entity id"
	// @ret
	// @req
	//   {
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	DeleteEntity(context.Context, *DeleteEntityRequest) (*emptypb.Empty, error)
	//
	// @fn PatchEntity
	// @arg entity.id "entity id"
	// @arg entity.alias <optional> "entity alias"
	// @arg enttiy.password <optional> "entity password"
	// @arg entity.extra <optional> "extra data, json string"
	// @ret entity
	// @req
	//   {
	//     "entity": {
	//       "id": "entity-id",
	//       "password": "new-password"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchEntity(context.Context, *PatchEntityRequest) (*PatchEntityResponse, error)
	//
	// @fn GetEnttiy
	// @arg entity.id "entity id"
	// @ret entity
	// @req
	//   {
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error)
	//
	// @fn ListEntities
	// @arg entity.id <optional> "entity id"
	// @arg entity.name <optional> "entity name"
	// @arg entity.alias <optional> "entity alias"
	// @ret entities "list of entity"
	// @req
	//   {
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error)
	//
	// @fn ShowEntity
	// @unimplemented
	ShowEntity(context.Context, *emptypb.Empty) (*ShowEntityResponse, error)
	//
	// @fn AddRoleToEntity
	// @arg role.id "role id"
	// @arg entity.id "entity id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	AddRoleToEntity(context.Context, *AddRoleToEntityRequest) (*emptypb.Empty, error)
	//
	// @fn RemoveRoleFromEntity
	// @arg role.id "role id"
	// @arg entity.id "entity id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	RemoveRoleFromEntity(context.Context, *RemoveRoleFromEntityRequest) (*emptypb.Empty, error)
	//
	// @fn AddEntityToDomain
	// @arg domain.id "domain id"
	// @arg entity.id "entity id"
	// @ret
	// @req
	//   {
	//     "domain": {
	//       "id": "domain-id"
	//     },
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	AddEntityToDomain(context.Context, *AddEntityToDomainRequest) (*emptypb.Empty, error)
	//
	// @fn RemoveEntityFromDomain
	// @arg domain.id "domain id"
	// @arg entity.id "entity id"
	// @ret
	// @req
	//   {
	//     "domain": {
	//       "id": "domain-id"
	//     },
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	RemoveEntityFromDomain(context.Context, *RemoveEntityFromDomainRequest) (*emptypb.Empty, error)
	//
	// @fn CreateGroup
	// @arg group.id <optional> "group id"
	// @arg group.domain.id "create group in domain"
	// @arg group.name "group name"
	// @arg group.alias "group alias"
	// @arg group.description "group description"
	// @arg group.extra "extra data, json string"
	// @ret group
	// @req
	//   {
	//     "group": {
	//       "name": "group-name",
	//       "domain": {
	//         "id": "domain-id"
	//       }
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	//
	// @fn DeleteGroup
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	DeleteGroup(context.Context, *DeleteGroupRequest) (*emptypb.Empty, error)
	//
	// @fn PatchGroup
	// @arg group.id "group id"
	// @arg group.alias <optional> "group alias"
	// @arg group.description <optional> "group description"
	// @arg group.extra <optional> "extra data, json string"
	// @ret group
	// @req
	//   {
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchGroup(context.Context, *PatchGroupRequest) (*PatchGroupResponse, error)
	//
	// @fn GetGroup
	// @arg group.id "group id"
	// @ret group
	// @req
	//   {
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	//
	// @fn ListGroups
	// @arg group.id <optional> "group id"
	// @arg group.domain.id <optional> "domain id"
	// @arg group.name <optional> "group name"
	// @arg group.alias <optional> "group alias"
	// @ret groups "list of group"
	// @req
	//   {
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error)
	//
	// @fn ListGroupsForSubject
	// @arg subject.id "subject id"
	// @ret groups
	// @req
	//   { ... }
	// @err Internal
	ListGroupsForSubject(context.Context, *ListGroupsForSubjectRequest) (*ListGroupsForSubjectResponse, error)
	//
	// @fn ListGroupsForObject
	// @arg object.id "object id"
	// @ret groups
	// @req
	//   { ... }
	// @err Internal
	ListGroupsForObject(context.Context, *ListGroupsForObjectRequest) (*ListGroupsForObjectResponse, error)
	//
	// @fn ShowGroups
	// @unimplemented
	ShowGroups(context.Context, *emptypb.Empty) (*ShowGroupsResponse, error)
	//
	// @fn AddRoleToGroup
	// @arg role.id "role id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	AddRoleToGroup(context.Context, *AddRoleToGroupRequest) (*emptypb.Empty, error)
	//
	// @fn RemoveRoleFromGroup
	// @arg role.id "role id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	RemoveRoleFromGroup(context.Context, *RemoveRoleFromGroupRequest) (*emptypb.Empty, error)
	//
	// @fn AddSubjectToGroup
	// @arg subject.id "subject id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "subject": {
	//       "id": "subject-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	AddSubjectToGroup(context.Context, *AddSubjectToGroupRequest) (*emptypb.Empty, error)
	//
	// @fn RemoveSubjectFromGroup
	// @arg subject.id "subject id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "subject": {
	//       "id": "subject-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	RemoveSubjectFromGroup(context.Context, *RemoveSubjectFromGroupRequest) (*emptypb.Empty, error)
	//
	// @fn AddObjectToGroup
	// @arg object.id "object id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "object": {
	//       "id": "object-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	AddObjectToGroup(context.Context, *AddObjectToGroupRequest) (*emptypb.Empty, error)
	//
	// @fn RemoveObjectFromGroup
	// @arg object.id "object id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "object": {
	//       "id": "object-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	RemoveObjectFromGroup(context.Context, *RemoveObjectFromGroupRequest) (*emptypb.Empty, error)
	//
	// @fn CreateCredential
	// @arg credential.id <optional> "credential id"
	// @arg credential.domain.id "domain id"
	// @arg credential.entity.id "entity id"
	// @arg credential.name "credential name"
	// @arg credential.alias <optional> "credential alias"
	// @arg credential.secret <optional> "credential secret"
	// @arg credential.description <optional> "credential description"
	// @arg credential.expires_at <optional> "expires time"
	// @arg credential.roles.id <list> <optional> "list of role"
	// @arg secret_size <optional> "secret size, default 32 bytes"
	// @ret credential
	// @req
	//   {
	//     "credential": {
	//       "domain": {
	//         "id": "domain-id"
	//       },
	//       "entity": {
	//         "id": "entity-id"
	//       },
	//       "name": "cred-name",
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateCredential(context.Context, *CreateCredentialRequest) (*CreateCredentialResponse, error)
	//
	// @fn DeleteCredential
	// @arg credential.id "credential id"
	// @ret
	// @req
	//   {
	//     "credential": {
	//       "id": "credential-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	DeleteCredential(context.Context, *DeleteCredentialRequest) (*emptypb.Empty, error)
	//
	// @fn PatchCredential
	// @arg credential.id "credential id"
	// @arg credential.alias "credential alias"
	// @arg credential.description "credential description"
	// @ret credential
	// @req
	//   {
	//     "credential": {
	//       "id": "credential-id",
	//       "alias": "renamed-credential-alias"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchCredential(context.Context, *PatchCredentialRequest) (*PatchCredentialResponse, error)
	//
	// @fn GetCredential
	// @arg credential.id "credential id"
	// @ret credential
	// @req
	//   {
	//     "credential": {
	//       "id": "credential-id",
	//     }
	//   }
	// @res
	//   { ... }
	GetCredential(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error)
	//
	// @fn ListCredentials
	// @arg credential.id <optional> "credential id"
	// @arg credential.domain.id <optional> "domain id"
	// @arg credential.entity.id <optional> "entity id"
	// @arg credential.name <optional> "credential name"
	// @arg credential.alias <optional> "credential alias"
	// @ret credentials "list of credential"
	// @req
	//   {
	//     "credential": {
	//       "id": "credential-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	ListCredentials(context.Context, *ListCredentialsRequest) (*ListCredentialsResponse, error)
	//
	// @fn ListCredentialsForEntity
	// @arg entity.id "entity id"
	// @req
	//   {
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	ListCredentialsForEntity(context.Context, *ListCredentialsForEntityRequest) (*ListCredentialsForEntityResponse, error)
	//
	// @fn IssueTokenByCredential
	// @arg credential.id "credential id"
	// @arg credential.domain.id "domain id"
	// @arg timestamp "timestamp"
	// @arg nonce "nonce"
	// @arg hmac "=hmac(key, credential.id+timestamp+nonce), helper: pkg/identityd2/contrib/issue_token_by_credential.go:NewIssueTokenByCredentialRequest"
	// @ret token
	// @req
	//   {
	//     "credential": {
	//       "id": "credential-id"
	//     },
	//     "timestamp": {
	//       "seconds": 0,
	//       "nanos": 0
	//     },
	//     "nonce": 0,
	//     "hmac": "hmac"
	//   }
	// @res
	//   { ... }
	// @err Internal
	// @err Unauthenticated
	IssueTokenByCredential(context.Context, *IssueTokenByCredentialRequest) (*IssueTokenByCredentialResponse, error)
	//
	// @fn IssueTokenByPassword
	// @arg entity.domains.id "domain id, less 1 domain"
	// @arg entity.id <optional> "entity id"
	// @arg entity.name <optional> "entity name"
	// @arg entity.password "entity password"
	// @ret token
	// @req
	//   {
	//     "entity": {
	//       "domains": [{"id": "domain-id"}],
	//       "name": "test",
	//       "password": "test"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	// @err Unauthenticated
	IssueTokenByPassword(context.Context, *IssueTokenByPasswordRequest) (*IssueTokenByPasswordResponse, error)
	//
	// @fn IssueTokenByToken
	// @arg token.domain.id "domain id"
	// @arg token.text "token text"
	// @ret token
	// @req
	//   {
	//     "token": {
	//       "domain": {
	//         "id": "domain-id"
	//       },
	//       "text": "token-text"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	// @err Unauthenticated
	IssueTokenByToken(context.Context, *IssueTokenByTokenRequest) (*IssueTokenByTokenResponse, error)
	//
	// @fn RevokeToken
	// @arg token.text "token text"
	// @ret
	// @req
	//   {
	//     "token": {
	//       "text": "token-text"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	// @err FailedPrecondition
	RevokeToken(context.Context, *RevokeTokenRequest) (*emptypb.Empty, error)
	//
	// @fn ValidateToken
	// @arg token.text "token text"
	// @ret
	// @req
	//   {
	//     "token": {
	//       "text": "token-text"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	// @err InvalidArgument
	// @err Unauthenticated
	ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
	//
	// @fn CheckToken
	// @arg token.text "token text"
	// @arg token.domain.id "domain id"
	// @ret
	// @req
	//   {
	//     "token": {
	//       "domain": {
	//         "id": "domain-id"
	//       },
	//       "text": "token-text"
	//     }
	//   }
	// @err Internal
	// @err InvalidArgument
	// @err Unauthenticated
	CheckToken(context.Context, *CheckTokenRequest) (*emptypb.Empty, error)
	//
	// @fn AuthorizeToken
	// @arg object.id "object id"
	// @arg action.name "action name"
	// @ret
	// @req
	//   {
	//     "object": {
	//       "id": "object-id"
	//     },
	//     "action": {
	//       "name": "action-name"
	//     }
	//   }
	// @res
	// @err PermissionDenied
	// @err Internal
	AuthorizeToken(context.Context, *AuthorizeTokenRequest) (*emptypb.Empty, error)
}

// UnimplementedIdentitydServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIdentitydServiceServer struct {
}

func (*UnimplementedIdentitydServiceServer) CreateDomain(context.Context, *CreateDomainRequest) (*CreateDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDomain not implemented")
}
func (*UnimplementedIdentitydServiceServer) DeleteDomain(context.Context, *DeleteDomainRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomain not implemented")
}
func (*UnimplementedIdentitydServiceServer) PatchDomain(context.Context, *PatchDomainRequest) (*PatchDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDomain not implemented")
}
func (*UnimplementedIdentitydServiceServer) GetDomain(context.Context, *GetDomainRequest) (*GetDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomain not implemented")
}
func (*UnimplementedIdentitydServiceServer) ListDomains(context.Context, *ListDomainsRequest) (*ListDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomains not implemented")
}
func (*UnimplementedIdentitydServiceServer) CreateAction(context.Context, *CreateActionRequest) (*CreateActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAction not implemented")
}
func (*UnimplementedIdentitydServiceServer) DeleteAction(context.Context, *DeleteActionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAction not implemented")
}
func (*UnimplementedIdentitydServiceServer) PatchAction(context.Context, *PatchActionRequest) (*PatchActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchAction not implemented")
}
func (*UnimplementedIdentitydServiceServer) GetAction(context.Context, *GetActionRequest) (*GetActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAction not implemented")
}
func (*UnimplementedIdentitydServiceServer) ListActions(context.Context, *ListActionsRequest) (*ListActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActions not implemented")
}
func (*UnimplementedIdentitydServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (*UnimplementedIdentitydServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedIdentitydServiceServer) PatchRole(context.Context, *PatchRoleRequest) (*PatchRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchRole not implemented")
}
func (*UnimplementedIdentitydServiceServer) GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (*UnimplementedIdentitydServiceServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (*UnimplementedIdentitydServiceServer) ListRolesForEntity(context.Context, *ListRolesForEntityRequest) (*ListRolesForEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRolesForEntity not implemented")
}
func (*UnimplementedIdentitydServiceServer) AddActionToRole(context.Context, *AddActionToRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddActionToRole not implemented")
}
func (*UnimplementedIdentitydServiceServer) RemoveActionFromRole(context.Context, *RemoveActionFromRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveActionFromRole not implemented")
}
func (*UnimplementedIdentitydServiceServer) CreateEntity(context.Context, *CreateEntityRequest) (*CreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (*UnimplementedIdentitydServiceServer) DeleteEntity(context.Context, *DeleteEntityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntity not implemented")
}
func (*UnimplementedIdentitydServiceServer) PatchEntity(context.Context, *PatchEntityRequest) (*PatchEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchEntity not implemented")
}
func (*UnimplementedIdentitydServiceServer) GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (*UnimplementedIdentitydServiceServer) ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntities not implemented")
}
func (*UnimplementedIdentitydServiceServer) ShowEntity(context.Context, *emptypb.Empty) (*ShowEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowEntity not implemented")
}
func (*UnimplementedIdentitydServiceServer) AddRoleToEntity(context.Context, *AddRoleToEntityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleToEntity not implemented")
}
func (*UnimplementedIdentitydServiceServer) RemoveRoleFromEntity(context.Context, *RemoveRoleFromEntityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoleFromEntity not implemented")
}
func (*UnimplementedIdentitydServiceServer) AddEntityToDomain(context.Context, *AddEntityToDomainRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEntityToDomain not implemented")
}
func (*UnimplementedIdentitydServiceServer) RemoveEntityFromDomain(context.Context, *RemoveEntityFromDomainRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEntityFromDomain not implemented")
}
func (*UnimplementedIdentitydServiceServer) CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (*UnimplementedIdentitydServiceServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (*UnimplementedIdentitydServiceServer) PatchGroup(context.Context, *PatchGroupRequest) (*PatchGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchGroup not implemented")
}
func (*UnimplementedIdentitydServiceServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (*UnimplementedIdentitydServiceServer) ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (*UnimplementedIdentitydServiceServer) ListGroupsForSubject(context.Context, *ListGroupsForSubjectRequest) (*ListGroupsForSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupsForSubject not implemented")
}
func (*UnimplementedIdentitydServiceServer) ListGroupsForObject(context.Context, *ListGroupsForObjectRequest) (*ListGroupsForObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupsForObject not implemented")
}
func (*UnimplementedIdentitydServiceServer) ShowGroups(context.Context, *emptypb.Empty) (*ShowGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowGroups not implemented")
}
func (*UnimplementedIdentitydServiceServer) AddRoleToGroup(context.Context, *AddRoleToGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleToGroup not implemented")
}
func (*UnimplementedIdentitydServiceServer) RemoveRoleFromGroup(context.Context, *RemoveRoleFromGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoleFromGroup not implemented")
}
func (*UnimplementedIdentitydServiceServer) AddSubjectToGroup(context.Context, *AddSubjectToGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubjectToGroup not implemented")
}
func (*UnimplementedIdentitydServiceServer) RemoveSubjectFromGroup(context.Context, *RemoveSubjectFromGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSubjectFromGroup not implemented")
}
func (*UnimplementedIdentitydServiceServer) AddObjectToGroup(context.Context, *AddObjectToGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddObjectToGroup not implemented")
}
func (*UnimplementedIdentitydServiceServer) RemoveObjectFromGroup(context.Context, *RemoveObjectFromGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveObjectFromGroup not implemented")
}
func (*UnimplementedIdentitydServiceServer) CreateCredential(context.Context, *CreateCredentialRequest) (*CreateCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredential not implemented")
}
func (*UnimplementedIdentitydServiceServer) DeleteCredential(context.Context, *DeleteCredentialRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (*UnimplementedIdentitydServiceServer) PatchCredential(context.Context, *PatchCredentialRequest) (*PatchCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchCredential not implemented")
}
func (*UnimplementedIdentitydServiceServer) GetCredential(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (*UnimplementedIdentitydServiceServer) ListCredentials(context.Context, *ListCredentialsRequest) (*ListCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredentials not implemented")
}
func (*UnimplementedIdentitydServiceServer) ListCredentialsForEntity(context.Context, *ListCredentialsForEntityRequest) (*ListCredentialsForEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredentialsForEntity not implemented")
}
func (*UnimplementedIdentitydServiceServer) IssueTokenByCredential(context.Context, *IssueTokenByCredentialRequest) (*IssueTokenByCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueTokenByCredential not implemented")
}
func (*UnimplementedIdentitydServiceServer) IssueTokenByPassword(context.Context, *IssueTokenByPasswordRequest) (*IssueTokenByPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueTokenByPassword not implemented")
}
func (*UnimplementedIdentitydServiceServer) IssueTokenByToken(context.Context, *IssueTokenByTokenRequest) (*IssueTokenByTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueTokenByToken not implemented")
}
func (*UnimplementedIdentitydServiceServer) RevokeToken(context.Context, *RevokeTokenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeToken not implemented")
}
func (*UnimplementedIdentitydServiceServer) ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (*UnimplementedIdentitydServiceServer) CheckToken(context.Context, *CheckTokenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (*UnimplementedIdentitydServiceServer) AuthorizeToken(context.Context, *AuthorizeTokenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeToken not implemented")
}

func RegisterIdentitydServiceServer(s *grpc.Server, srv IdentitydServiceServer) {
	s.RegisterService(&_IdentitydService_serviceDesc, srv)
}

func _IdentitydService_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/CreateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateDomain(ctx, req.(*CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/DeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteDomain(ctx, req.(*DeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/PatchDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchDomain(ctx, req.(*PatchDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/GetDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetDomain(ctx, req.(*GetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListDomains(ctx, req.(*ListDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CreateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/CreateAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateAction(ctx, req.(*CreateActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/DeleteAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteAction(ctx, req.(*DeleteActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/PatchAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchAction(ctx, req.(*PatchActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/GetAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetAction(ctx, req.(*GetActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListActions(ctx, req.(*ListActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/PatchRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchRole(ctx, req.(*PatchRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListRolesForEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesForEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListRolesForEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListRolesForEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListRolesForEntity(ctx, req.(*ListRolesForEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AddActionToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddActionToRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AddActionToRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/AddActionToRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AddActionToRole(ctx, req.(*AddActionToRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RemoveActionFromRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveActionFromRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RemoveActionFromRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/RemoveActionFromRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RemoveActionFromRole(ctx, req.(*RemoveActionFromRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateEntity(ctx, req.(*CreateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/DeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteEntity(ctx, req.(*DeleteEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/PatchEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchEntity(ctx, req.(*PatchEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/GetEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListEntities(ctx, req.(*ListEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ShowEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ShowEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ShowEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ShowEntity(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AddRoleToEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleToEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AddRoleToEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/AddRoleToEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AddRoleToEntity(ctx, req.(*AddRoleToEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RemoveRoleFromEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RemoveRoleFromEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/RemoveRoleFromEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RemoveRoleFromEntity(ctx, req.(*RemoveRoleFromEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AddEntityToDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEntityToDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AddEntityToDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/AddEntityToDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AddEntityToDomain(ctx, req.(*AddEntityToDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RemoveEntityFromDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEntityFromDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RemoveEntityFromDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/RemoveEntityFromDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RemoveEntityFromDomain(ctx, req.(*RemoveEntityFromDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/PatchGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchGroup(ctx, req.(*PatchGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListGroups(ctx, req.(*ListGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListGroupsForSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsForSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListGroupsForSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListGroupsForSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListGroupsForSubject(ctx, req.(*ListGroupsForSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListGroupsForObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsForObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListGroupsForObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListGroupsForObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListGroupsForObject(ctx, req.(*ListGroupsForObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ShowGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ShowGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ShowGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ShowGroups(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AddRoleToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AddRoleToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/AddRoleToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AddRoleToGroup(ctx, req.(*AddRoleToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RemoveRoleFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RemoveRoleFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/RemoveRoleFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RemoveRoleFromGroup(ctx, req.(*RemoveRoleFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AddSubjectToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubjectToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AddSubjectToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/AddSubjectToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AddSubjectToGroup(ctx, req.(*AddSubjectToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RemoveSubjectFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSubjectFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RemoveSubjectFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/RemoveSubjectFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RemoveSubjectFromGroup(ctx, req.(*RemoveSubjectFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AddObjectToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddObjectToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AddObjectToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/AddObjectToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AddObjectToGroup(ctx, req.(*AddObjectToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RemoveObjectFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveObjectFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RemoveObjectFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/RemoveObjectFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RemoveObjectFromGroup(ctx, req.(*RemoveObjectFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/CreateCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateCredential(ctx, req.(*CreateCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/DeleteCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteCredential(ctx, req.(*DeleteCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/PatchCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchCredential(ctx, req.(*PatchCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/GetCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetCredential(ctx, req.(*GetCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListCredentials(ctx, req.(*ListCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListCredentialsForEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialsForEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListCredentialsForEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListCredentialsForEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListCredentialsForEntity(ctx, req.(*ListCredentialsForEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_IssueTokenByCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTokenByCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).IssueTokenByCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/IssueTokenByCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).IssueTokenByCredential(ctx, req.(*IssueTokenByCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_IssueTokenByPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTokenByPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).IssueTokenByPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/IssueTokenByPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).IssueTokenByPassword(ctx, req.(*IssueTokenByPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_IssueTokenByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTokenByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).IssueTokenByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/IssueTokenByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).IssueTokenByToken(ctx, req.(*IssueTokenByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RevokeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RevokeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/RevokeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RevokeToken(ctx, req.(*RevokeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/CheckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CheckToken(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AuthorizeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AuthorizeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/AuthorizeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AuthorizeToken(ctx, req.(*AuthorizeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdentitydService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.identityd2.IdentitydService",
	HandlerType: (*IdentitydServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDomain",
			Handler:    _IdentitydService_CreateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _IdentitydService_DeleteDomain_Handler,
		},
		{
			MethodName: "PatchDomain",
			Handler:    _IdentitydService_PatchDomain_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _IdentitydService_GetDomain_Handler,
		},
		{
			MethodName: "ListDomains",
			Handler:    _IdentitydService_ListDomains_Handler,
		},
		{
			MethodName: "CreateAction",
			Handler:    _IdentitydService_CreateAction_Handler,
		},
		{
			MethodName: "DeleteAction",
			Handler:    _IdentitydService_DeleteAction_Handler,
		},
		{
			MethodName: "PatchAction",
			Handler:    _IdentitydService_PatchAction_Handler,
		},
		{
			MethodName: "GetAction",
			Handler:    _IdentitydService_GetAction_Handler,
		},
		{
			MethodName: "ListActions",
			Handler:    _IdentitydService_ListActions_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _IdentitydService_CreateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _IdentitydService_DeleteRole_Handler,
		},
		{
			MethodName: "PatchRole",
			Handler:    _IdentitydService_PatchRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _IdentitydService_GetRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _IdentitydService_ListRoles_Handler,
		},
		{
			MethodName: "ListRolesForEntity",
			Handler:    _IdentitydService_ListRolesForEntity_Handler,
		},
		{
			MethodName: "AddActionToRole",
			Handler:    _IdentitydService_AddActionToRole_Handler,
		},
		{
			MethodName: "RemoveActionFromRole",
			Handler:    _IdentitydService_RemoveActionFromRole_Handler,
		},
		{
			MethodName: "CreateEntity",
			Handler:    _IdentitydService_CreateEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _IdentitydService_DeleteEntity_Handler,
		},
		{
			MethodName: "PatchEntity",
			Handler:    _IdentitydService_PatchEntity_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _IdentitydService_GetEntity_Handler,
		},
		{
			MethodName: "ListEntities",
			Handler:    _IdentitydService_ListEntities_Handler,
		},
		{
			MethodName: "ShowEntity",
			Handler:    _IdentitydService_ShowEntity_Handler,
		},
		{
			MethodName: "AddRoleToEntity",
			Handler:    _IdentitydService_AddRoleToEntity_Handler,
		},
		{
			MethodName: "RemoveRoleFromEntity",
			Handler:    _IdentitydService_RemoveRoleFromEntity_Handler,
		},
		{
			MethodName: "AddEntityToDomain",
			Handler:    _IdentitydService_AddEntityToDomain_Handler,
		},
		{
			MethodName: "RemoveEntityFromDomain",
			Handler:    _IdentitydService_RemoveEntityFromDomain_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _IdentitydService_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _IdentitydService_DeleteGroup_Handler,
		},
		{
			MethodName: "PatchGroup",
			Handler:    _IdentitydService_PatchGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _IdentitydService_GetGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _IdentitydService_ListGroups_Handler,
		},
		{
			MethodName: "ListGroupsForSubject",
			Handler:    _IdentitydService_ListGroupsForSubject_Handler,
		},
		{
			MethodName: "ListGroupsForObject",
			Handler:    _IdentitydService_ListGroupsForObject_Handler,
		},
		{
			MethodName: "ShowGroups",
			Handler:    _IdentitydService_ShowGroups_Handler,
		},
		{
			MethodName: "AddRoleToGroup",
			Handler:    _IdentitydService_AddRoleToGroup_Handler,
		},
		{
			MethodName: "RemoveRoleFromGroup",
			Handler:    _IdentitydService_RemoveRoleFromGroup_Handler,
		},
		{
			MethodName: "AddSubjectToGroup",
			Handler:    _IdentitydService_AddSubjectToGroup_Handler,
		},
		{
			MethodName: "RemoveSubjectFromGroup",
			Handler:    _IdentitydService_RemoveSubjectFromGroup_Handler,
		},
		{
			MethodName: "AddObjectToGroup",
			Handler:    _IdentitydService_AddObjectToGroup_Handler,
		},
		{
			MethodName: "RemoveObjectFromGroup",
			Handler:    _IdentitydService_RemoveObjectFromGroup_Handler,
		},
		{
			MethodName: "CreateCredential",
			Handler:    _IdentitydService_CreateCredential_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _IdentitydService_DeleteCredential_Handler,
		},
		{
			MethodName: "PatchCredential",
			Handler:    _IdentitydService_PatchCredential_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _IdentitydService_GetCredential_Handler,
		},
		{
			MethodName: "ListCredentials",
			Handler:    _IdentitydService_ListCredentials_Handler,
		},
		{
			MethodName: "ListCredentialsForEntity",
			Handler:    _IdentitydService_ListCredentialsForEntity_Handler,
		},
		{
			MethodName: "IssueTokenByCredential",
			Handler:    _IdentitydService_IssueTokenByCredential_Handler,
		},
		{
			MethodName: "IssueTokenByPassword",
			Handler:    _IdentitydService_IssueTokenByPassword_Handler,
		},
		{
			MethodName: "IssueTokenByToken",
			Handler:    _IdentitydService_IssueTokenByToken_Handler,
		},
		{
			MethodName: "RevokeToken",
			Handler:    _IdentitydService_RevokeToken_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _IdentitydService_ValidateToken_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _IdentitydService_CheckToken_Handler,
		},
		{
			MethodName: "AuthorizeToken",
			Handler:    _IdentitydService_AuthorizeToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
