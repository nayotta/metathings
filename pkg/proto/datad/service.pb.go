// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package datad

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0x5b, 0xe9, 0xff, 0xa9, 0xb8, 0x14, 0x04, 0x46, 0x62, 0x68, 0xb7, 0x4e, 0x45, 0x80,
	0x53, 0xe0, 0x0d, 0x4a, 0xa1, 0x0b, 0x03, 0x02, 0x89, 0xa1, 0x0b, 0x4a, 0x9b, 0xdb, 0x34, 0xd2,
	0x6d, 0x1d, 0x62, 0x87, 0x8a, 0x57, 0xe3, 0xe9, 0x50, 0xec, 0x38, 0x35, 0x0c, 0x89, 0xd9, 0x9c,
	0xe3, 0x73, 0xcf, 0x97, 0xeb, 0x03, 0x87, 0x12, 0xb3, 0x8f, 0x64, 0x81, 0x3c, 0xcd, 0x84, 0x12,
	0xac, 0x1f, 0x26, 0x7c, 0x8d, 0x2a, 0x54, 0xab, 0x64, 0x13, 0x4b, 0x6e, 0x2f, 0xa3, 0x50, 0x85,
	0x51, 0xaf, 0x1f, 0x0b, 0x11, 0x13, 0x06, 0xda, 0x3a, 0xcf, 0x97, 0x01, 0xae, 0x53, 0xf5, 0x69,
	0x26, 0x7b, 0xa7, 0x8b, 0x0c, 0x43, 0x85, 0x6f, 0xf3, 0x7c, 0x13, 0x11, 0x5a, 0x31, 0x42, 0xc2,
	0xdf, 0xe2, 0x71, 0x8c, 0xea, 0xa7, 0xc2, 0x28, 0x91, 0x56, 0x92, 0xa5, 0x76, 0x52, 0xe6, 0x2d,
	0x49, 0x6c, 0xad, 0x54, 0xa6, 0x39, 0xd2, 0x51, 0x91, 0xe5, 0x7c, 0x43, 0x9a, 0xcb, 0xd5, 0xee,
	0x4c, 0x64, 0xce, 0x37, 0x5f, 0x1d, 0xe8, 0x4e, 0x8a, 0x25, 0x5e, 0xcc, 0x46, 0x2c, 0x87, 0xee,
	0x9d, 0x06, 0x8c, 0x35, 0x95, 0x8d, 0x78, 0xcd, 0xe6, 0xdc, 0xb5, 0x3e, 0xe3, 0x7b, 0x8e, 0x52,
	0xf5, 0xae, 0xff, 0x30, 0x21, 0x53, 0xb1, 0x91, 0x38, 0x68, 0xb1, 0x19, 0x74, 0x27, 0x7a, 0x09,
	0x2f, 0xac, 0x6b, 0xb5, 0xd8, 0x33, 0x6e, 0x5a, 0xe0, 0xb6, 0x05, 0x7e, 0x5f, 0xb4, 0x30, 0x68,
	0x31, 0x82, 0xfd, 0x29, 0xaa, 0x32, 0xf8, 0xaa, 0x36, 0xb8, 0xf2, 0xd9, 0x54, 0xee, 0x6b, 0xaf,
	0x36, 0xc9, 0xe0, 0xe0, 0x31, 0x91, 0xa5, 0x2e, 0x59, 0x50, 0x1b, 0xe0, 0x38, 0x2d, 0x71, 0xe4,
	0x3f, 0x50, 0x31, 0x05, 0x80, 0x79, 0xd7, 0x07, 0x12, 0x5b, 0xc6, 0x3d, 0x0a, 0x28, 0x8c, 0x96,
	0x18, 0x78, 0xfb, 0x2b, 0xe0, 0x2b, 0x80, 0xe9, 0xc0, 0x03, 0xb8, 0x33, 0x36, 0x57, 0xb5, 0x84,
	0xce, 0x14, 0x95, 0x0e, 0xbd, 0x68, 0x7a, 0x79, 0x37, 0xf1, 0xd2, 0xcf, 0x5c, 0xfd, 0x7f, 0x08,
	0xff, 0x9e, 0x72, 0xb9, 0x62, 0xc3, 0xda, 0xb9, 0xc2, 0x62, 0x09, 0xe7, 0x1e, 0x4e, 0x1b, 0x3f,
	0x6c, 0x8f, 0xda, 0x06, 0x41, 0xd4, 0x88, 0x20, 0xf2, 0x45, 0x14, 0x4e, 0x17, 0x31, 0xee, 0xcc,
	0xfe, 0xeb, 0xbb, 0xf9, 0x9e, 0x7e, 0xc8, 0xdb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd4, 0xec,
	0x9f, 0x37, 0xb5, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DatadServiceClient is the client API for DatadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatadServiceClient interface {
	CreateBundle(ctx context.Context, in *CreateBundleRequest, opts ...grpc.CallOption) (*CreateBundleResponse, error)
	DeleteBundle(ctx context.Context, in *DeleteBundleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetBundle(ctx context.Context, in *GetBundleRequest, opts ...grpc.CallOption) (*GetBundleResponse, error)
	ListBundles(ctx context.Context, in *ListBundlesRequest, opts ...grpc.CallOption) (*ListBundlesResponse, error)
	CreateFlow(ctx context.Context, in *CreateFlowRequest, opts ...grpc.CallOption) (*CreateFlowResponse, error)
	DeleteFlow(ctx context.Context, in *DeleteFlowRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetFlow(ctx context.Context, in *GetFlowRequest, opts ...grpc.CallOption) (*GetFlowResponse, error)
	Push(ctx context.Context, opts ...grpc.CallOption) (DatadService_PushClient, error)
	Pull(ctx context.Context, opts ...grpc.CallOption) (DatadService_PullClient, error)
}

type datadServiceClient struct {
	cc *grpc.ClientConn
}

func NewDatadServiceClient(cc *grpc.ClientConn) DatadServiceClient {
	return &datadServiceClient{cc}
}

func (c *datadServiceClient) CreateBundle(ctx context.Context, in *CreateBundleRequest, opts ...grpc.CallOption) (*CreateBundleResponse, error) {
	out := new(CreateBundleResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.datad.DatadService/CreateBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datadServiceClient) DeleteBundle(ctx context.Context, in *DeleteBundleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.datad.DatadService/DeleteBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datadServiceClient) GetBundle(ctx context.Context, in *GetBundleRequest, opts ...grpc.CallOption) (*GetBundleResponse, error) {
	out := new(GetBundleResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.datad.DatadService/GetBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datadServiceClient) ListBundles(ctx context.Context, in *ListBundlesRequest, opts ...grpc.CallOption) (*ListBundlesResponse, error) {
	out := new(ListBundlesResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.datad.DatadService/ListBundles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datadServiceClient) CreateFlow(ctx context.Context, in *CreateFlowRequest, opts ...grpc.CallOption) (*CreateFlowResponse, error) {
	out := new(CreateFlowResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.datad.DatadService/CreateFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datadServiceClient) DeleteFlow(ctx context.Context, in *DeleteFlowRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.datad.DatadService/DeleteFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datadServiceClient) GetFlow(ctx context.Context, in *GetFlowRequest, opts ...grpc.CallOption) (*GetFlowResponse, error) {
	out := new(GetFlowResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.datad.DatadService/GetFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datadServiceClient) Push(ctx context.Context, opts ...grpc.CallOption) (DatadService_PushClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DatadService_serviceDesc.Streams[0], "/ai.metathings.service.datad.DatadService/Push", opts...)
	if err != nil {
		return nil, err
	}
	x := &datadServicePushClient{stream}
	return x, nil
}

type DatadService_PushClient interface {
	Send(*PushRequest) error
	Recv() (*PushResponse, error)
	grpc.ClientStream
}

type datadServicePushClient struct {
	grpc.ClientStream
}

func (x *datadServicePushClient) Send(m *PushRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *datadServicePushClient) Recv() (*PushResponse, error) {
	m := new(PushResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *datadServiceClient) Pull(ctx context.Context, opts ...grpc.CallOption) (DatadService_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DatadService_serviceDesc.Streams[1], "/ai.metathings.service.datad.DatadService/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &datadServicePullClient{stream}
	return x, nil
}

type DatadService_PullClient interface {
	Send(*PullRequest) error
	Recv() (*PullResponse, error)
	grpc.ClientStream
}

type datadServicePullClient struct {
	grpc.ClientStream
}

func (x *datadServicePullClient) Send(m *PullRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *datadServicePullClient) Recv() (*PullResponse, error) {
	m := new(PullResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DatadServiceServer is the server API for DatadService service.
type DatadServiceServer interface {
	CreateBundle(context.Context, *CreateBundleRequest) (*CreateBundleResponse, error)
	DeleteBundle(context.Context, *DeleteBundleRequest) (*empty.Empty, error)
	GetBundle(context.Context, *GetBundleRequest) (*GetBundleResponse, error)
	ListBundles(context.Context, *ListBundlesRequest) (*ListBundlesResponse, error)
	CreateFlow(context.Context, *CreateFlowRequest) (*CreateFlowResponse, error)
	DeleteFlow(context.Context, *DeleteFlowRequest) (*empty.Empty, error)
	GetFlow(context.Context, *GetFlowRequest) (*GetFlowResponse, error)
	Push(DatadService_PushServer) error
	Pull(DatadService_PullServer) error
}

func RegisterDatadServiceServer(s *grpc.Server, srv DatadServiceServer) {
	s.RegisterService(&_DatadService_serviceDesc, srv)
}

func _DatadService_CreateBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatadServiceServer).CreateBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.datad.DatadService/CreateBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatadServiceServer).CreateBundle(ctx, req.(*CreateBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatadService_DeleteBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatadServiceServer).DeleteBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.datad.DatadService/DeleteBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatadServiceServer).DeleteBundle(ctx, req.(*DeleteBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatadService_GetBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatadServiceServer).GetBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.datad.DatadService/GetBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatadServiceServer).GetBundle(ctx, req.(*GetBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatadService_ListBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatadServiceServer).ListBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.datad.DatadService/ListBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatadServiceServer).ListBundles(ctx, req.(*ListBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatadService_CreateFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatadServiceServer).CreateFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.datad.DatadService/CreateFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatadServiceServer).CreateFlow(ctx, req.(*CreateFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatadService_DeleteFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatadServiceServer).DeleteFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.datad.DatadService/DeleteFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatadServiceServer).DeleteFlow(ctx, req.(*DeleteFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatadService_GetFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatadServiceServer).GetFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.datad.DatadService/GetFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatadServiceServer).GetFlow(ctx, req.(*GetFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatadService_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DatadServiceServer).Push(&datadServicePushServer{stream})
}

type DatadService_PushServer interface {
	Send(*PushResponse) error
	Recv() (*PushRequest, error)
	grpc.ServerStream
}

type datadServicePushServer struct {
	grpc.ServerStream
}

func (x *datadServicePushServer) Send(m *PushResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *datadServicePushServer) Recv() (*PushRequest, error) {
	m := new(PushRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DatadService_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DatadServiceServer).Pull(&datadServicePullServer{stream})
}

type DatadService_PullServer interface {
	Send(*PullResponse) error
	Recv() (*PullRequest, error)
	grpc.ServerStream
}

type datadServicePullServer struct {
	grpc.ServerStream
}

func (x *datadServicePullServer) Send(m *PullResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *datadServicePullServer) Recv() (*PullRequest, error) {
	m := new(PullRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DatadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.datad.DatadService",
	HandlerType: (*DatadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBundle",
			Handler:    _DatadService_CreateBundle_Handler,
		},
		{
			MethodName: "DeleteBundle",
			Handler:    _DatadService_DeleteBundle_Handler,
		},
		{
			MethodName: "GetBundle",
			Handler:    _DatadService_GetBundle_Handler,
		},
		{
			MethodName: "ListBundles",
			Handler:    _DatadService_ListBundles_Handler,
		},
		{
			MethodName: "CreateFlow",
			Handler:    _DatadService_CreateFlow_Handler,
		},
		{
			MethodName: "DeleteFlow",
			Handler:    _DatadService_DeleteFlow_Handler,
		},
		{
			MethodName: "GetFlow",
			Handler:    _DatadService_GetFlow_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Push",
			Handler:       _DatadService_Push_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Pull",
			Handler:       _DatadService_Pull_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
