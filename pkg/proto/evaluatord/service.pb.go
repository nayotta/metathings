// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package evaluatord

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x4f, 0x4f, 0xf2, 0x40,
	0x10, 0xc6, 0xe1, 0xf2, 0xe6, 0xcd, 0x06, 0x25, 0xd6, 0xc0, 0xa1, 0x26, 0x6a, 0xf0, 0xbe, 0x24,
	0x1a, 0x15, 0x2f, 0xfe, 0x01, 0xd1, 0x8b, 0x07, 0x03, 0x9e, 0xbc, 0x34, 0x4b, 0x3b, 0x94, 0x26,
	0x2d, 0x5b, 0x76, 0xb7, 0x24, 0xc4, 0x83, 0x27, 0x13, 0xbf, 0x84, 0x57, 0x3f, 0xa7, 0xa1, 0x65,
	0xb7, 0xb4, 0xc5, 0xac, 0xe5, 0x3a, 0xf3, 0xfc, 0x66, 0x9e, 0x3e, 0xb3, 0x45, 0x3b, 0x1c, 0xd8,
	0xdc, 0xb3, 0x01, 0x87, 0x8c, 0x0a, 0x6a, 0x1c, 0x13, 0x0f, 0x07, 0x20, 0x88, 0x98, 0x78, 0x53,
	0x97, 0x63, 0xd9, 0x84, 0x39, 0xf1, 0x23, 0x22, 0x28, 0x73, 0xcc, 0x03, 0x97, 0x52, 0xd7, 0x87,
	0x76, 0xac, 0x1f, 0x45, 0xe3, 0x36, 0x04, 0xa1, 0x58, 0x24, 0xb8, 0xd9, 0xb4, 0x19, 0x10, 0x01,
	0x96, 0xd2, 0xcb, 0xba, 0x03, 0x3e, 0x6c, 0xa8, 0x37, 0x42, 0x22, 0xec, 0x49, 0xa1, 0xbc, 0xef,
	0x82, 0x28, 0x6a, 0x7d, 0x8f, 0xaf, 0x55, 0xf9, 0xaa, 0x7c, 0x48, 0x1c, 0xc7, 0xe2, 0x34, 0x62,
	0x36, 0x70, 0x4b, 0xd0, 0x02, 0x76, 0xc2, 0x20, 0xa0, 0x73, 0x50, 0x92, 0x31, 0xa3, 0x41, 0x41,
	0x74, 0x94, 0x9b, 0x6d, 0x8d, 0x16, 0x2b, 0x20, 0x11, 0x9c, 0x7e, 0xff, 0x47, 0x7b, 0x7d, 0x15,
	0xc2, 0x30, 0x89, 0xc5, 0xf8, 0xac, 0xa2, 0x7a, 0x2f, 0xfe, 0x62, 0xd5, 0x33, 0x3a, 0x58, 0x17,
	0x21, 0xce, 0x21, 0x03, 0x98, 0x45, 0xc0, 0x85, 0x79, 0xb5, 0x05, 0xc9, 0x43, 0x3a, 0xe5, 0xd0,
	0xaa, 0x18, 0x80, 0xea, 0xf7, 0x71, 0xc6, 0xa5, 0x9c, 0xe4, 0x10, 0xe9, 0xa4, 0x89, 0x93, 0x23,
	0x63, 0x79, 0x64, 0xdc, 0x5f, 0x1e, 0xb9, 0x55, 0x31, 0x3e, 0xaa, 0x68, 0xf7, 0x79, 0x79, 0xb3,
	0x74, 0xcd, 0xa5, 0x7e, 0x4d, 0x96, 0x90, 0x5b, 0x3a, 0xe5, 0x41, 0xf5, 0xb9, 0xef, 0xa8, 0xf6,
	0x08, 0x22, 0x35, 0x71, 0xae, 0x9f, 0xb5, 0xae, 0x97, 0x16, 0x2e, 0xca, 0x62, 0xca, 0xc0, 0x32,
	0x88, 0x27, 0x8f, 0xa7, 0x3d, 0xfe, 0x97, 0x20, 0xb2, 0x44, 0x89, 0x20, 0xf2, 0xa0, 0xf2, 0x31,
	0x43, 0x8d, 0x3b, 0xc7, 0x19, 0x26, 0x8f, 0xfb, 0x85, 0xa6, 0x89, 0x5c, 0xeb, 0x87, 0x6e, 0x04,
	0xf5, 0x6f, 0xe0, 0x0d, 0x99, 0x83, 0xf8, 0x9f, 0x5a, 0xc1, 0x0f, 0x8c, 0x06, 0xe9, 0xde, 0x9e,
	0x7e, 0xef, 0xef, 0xb4, 0x7e, 0xf9, 0x57, 0x15, 0x35, 0xb3, 0x61, 0x74, 0x17, 0xc9, 0x24, 0xe3,
	0xa6, 0x6c, 0x8c, 0x92, 0x94, 0x5b, 0x6f, 0xb7, 0x1f, 0x20, 0xef, 0xd1, 0xad, 0xbd, 0xa2, 0x54,
	0x3e, 0xfa, 0x17, 0xfb, 0x3f, 0xfb, 0x09, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x39, 0x51, 0x99, 0x66,
	0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EvaluatordServiceClient is the client API for EvaluatordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EvaluatordServiceClient interface {
	CreateEvaluator(ctx context.Context, in *CreateEvaluatorRequest, opts ...grpc.CallOption) (*CreateEvaluatorResponse, error)
	DeleteEvaluator(ctx context.Context, in *DeleteEvaluatorRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PatchEvaluator(ctx context.Context, in *PatchEvaluatorRequest, opts ...grpc.CallOption) (*PatchEvaluatorResponse, error)
	GetEvaluator(ctx context.Context, in *GetEvaluatorRequest, opts ...grpc.CallOption) (*GetEvaluatorResponse, error)
	ListEvaluators(ctx context.Context, in *ListEvaluatorsRequest, opts ...grpc.CallOption) (*ListEvaluatorsResponse, error)
	AddSourcesToEvaluator(ctx context.Context, in *AddSourcesToEvaluatorRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveSourcesFromEvaluator(ctx context.Context, in *RemoveSourcesFromEvaluatorRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListEvaluatorsBySource(ctx context.Context, in *ListEvaluatorsBySourceRequest, opts ...grpc.CallOption) (*ListEvaluatorsBySourceResponse, error)
}

type evaluatordServiceClient struct {
	cc *grpc.ClientConn
}

func NewEvaluatordServiceClient(cc *grpc.ClientConn) EvaluatordServiceClient {
	return &evaluatordServiceClient{cc}
}

func (c *evaluatordServiceClient) CreateEvaluator(ctx context.Context, in *CreateEvaluatorRequest, opts ...grpc.CallOption) (*CreateEvaluatorResponse, error) {
	out := new(CreateEvaluatorResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/CreateEvaluator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) DeleteEvaluator(ctx context.Context, in *DeleteEvaluatorRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/DeleteEvaluator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) PatchEvaluator(ctx context.Context, in *PatchEvaluatorRequest, opts ...grpc.CallOption) (*PatchEvaluatorResponse, error) {
	out := new(PatchEvaluatorResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/PatchEvaluator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) GetEvaluator(ctx context.Context, in *GetEvaluatorRequest, opts ...grpc.CallOption) (*GetEvaluatorResponse, error) {
	out := new(GetEvaluatorResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/GetEvaluator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) ListEvaluators(ctx context.Context, in *ListEvaluatorsRequest, opts ...grpc.CallOption) (*ListEvaluatorsResponse, error) {
	out := new(ListEvaluatorsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/ListEvaluators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) AddSourcesToEvaluator(ctx context.Context, in *AddSourcesToEvaluatorRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/AddSourcesToEvaluator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) RemoveSourcesFromEvaluator(ctx context.Context, in *RemoveSourcesFromEvaluatorRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/RemoveSourcesFromEvaluator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluatordServiceClient) ListEvaluatorsBySource(ctx context.Context, in *ListEvaluatorsBySourceRequest, opts ...grpc.CallOption) (*ListEvaluatorsBySourceResponse, error) {
	out := new(ListEvaluatorsBySourceResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.evaluatord.EvaluatordService/ListEvaluatorsBySource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EvaluatordServiceServer is the server API for EvaluatordService service.
type EvaluatordServiceServer interface {
	CreateEvaluator(context.Context, *CreateEvaluatorRequest) (*CreateEvaluatorResponse, error)
	DeleteEvaluator(context.Context, *DeleteEvaluatorRequest) (*empty.Empty, error)
	PatchEvaluator(context.Context, *PatchEvaluatorRequest) (*PatchEvaluatorResponse, error)
	GetEvaluator(context.Context, *GetEvaluatorRequest) (*GetEvaluatorResponse, error)
	ListEvaluators(context.Context, *ListEvaluatorsRequest) (*ListEvaluatorsResponse, error)
	AddSourcesToEvaluator(context.Context, *AddSourcesToEvaluatorRequest) (*empty.Empty, error)
	RemoveSourcesFromEvaluator(context.Context, *RemoveSourcesFromEvaluatorRequest) (*empty.Empty, error)
	ListEvaluatorsBySource(context.Context, *ListEvaluatorsBySourceRequest) (*ListEvaluatorsBySourceResponse, error)
}

// UnimplementedEvaluatordServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEvaluatordServiceServer struct {
}

func (*UnimplementedEvaluatordServiceServer) CreateEvaluator(ctx context.Context, req *CreateEvaluatorRequest) (*CreateEvaluatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvaluator not implemented")
}
func (*UnimplementedEvaluatordServiceServer) DeleteEvaluator(ctx context.Context, req *DeleteEvaluatorRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvaluator not implemented")
}
func (*UnimplementedEvaluatordServiceServer) PatchEvaluator(ctx context.Context, req *PatchEvaluatorRequest) (*PatchEvaluatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchEvaluator not implemented")
}
func (*UnimplementedEvaluatordServiceServer) GetEvaluator(ctx context.Context, req *GetEvaluatorRequest) (*GetEvaluatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluator not implemented")
}
func (*UnimplementedEvaluatordServiceServer) ListEvaluators(ctx context.Context, req *ListEvaluatorsRequest) (*ListEvaluatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvaluators not implemented")
}
func (*UnimplementedEvaluatordServiceServer) AddSourcesToEvaluator(ctx context.Context, req *AddSourcesToEvaluatorRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSourcesToEvaluator not implemented")
}
func (*UnimplementedEvaluatordServiceServer) RemoveSourcesFromEvaluator(ctx context.Context, req *RemoveSourcesFromEvaluatorRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSourcesFromEvaluator not implemented")
}
func (*UnimplementedEvaluatordServiceServer) ListEvaluatorsBySource(ctx context.Context, req *ListEvaluatorsBySourceRequest) (*ListEvaluatorsBySourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvaluatorsBySource not implemented")
}

func RegisterEvaluatordServiceServer(s *grpc.Server, srv EvaluatordServiceServer) {
	s.RegisterService(&_EvaluatordService_serviceDesc, srv)
}

func _EvaluatordService_CreateEvaluator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEvaluatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).CreateEvaluator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/CreateEvaluator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).CreateEvaluator(ctx, req.(*CreateEvaluatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_DeleteEvaluator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEvaluatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).DeleteEvaluator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/DeleteEvaluator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).DeleteEvaluator(ctx, req.(*DeleteEvaluatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_PatchEvaluator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchEvaluatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).PatchEvaluator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/PatchEvaluator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).PatchEvaluator(ctx, req.(*PatchEvaluatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_GetEvaluator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvaluatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).GetEvaluator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/GetEvaluator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).GetEvaluator(ctx, req.(*GetEvaluatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_ListEvaluators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEvaluatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).ListEvaluators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/ListEvaluators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).ListEvaluators(ctx, req.(*ListEvaluatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_AddSourcesToEvaluator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSourcesToEvaluatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).AddSourcesToEvaluator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/AddSourcesToEvaluator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).AddSourcesToEvaluator(ctx, req.(*AddSourcesToEvaluatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_RemoveSourcesFromEvaluator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSourcesFromEvaluatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).RemoveSourcesFromEvaluator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/RemoveSourcesFromEvaluator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).RemoveSourcesFromEvaluator(ctx, req.(*RemoveSourcesFromEvaluatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluatordService_ListEvaluatorsBySource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEvaluatorsBySourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluatordServiceServer).ListEvaluatorsBySource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.evaluatord.EvaluatordService/ListEvaluatorsBySource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluatordServiceServer).ListEvaluatorsBySource(ctx, req.(*ListEvaluatorsBySourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EvaluatordService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.evaluatord.EvaluatordService",
	HandlerType: (*EvaluatordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvaluator",
			Handler:    _EvaluatordService_CreateEvaluator_Handler,
		},
		{
			MethodName: "DeleteEvaluator",
			Handler:    _EvaluatordService_DeleteEvaluator_Handler,
		},
		{
			MethodName: "PatchEvaluator",
			Handler:    _EvaluatordService_PatchEvaluator_Handler,
		},
		{
			MethodName: "GetEvaluator",
			Handler:    _EvaluatordService_GetEvaluator_Handler,
		},
		{
			MethodName: "ListEvaluators",
			Handler:    _EvaluatordService_ListEvaluators_Handler,
		},
		{
			MethodName: "AddSourcesToEvaluator",
			Handler:    _EvaluatordService_AddSourcesToEvaluator_Handler,
		},
		{
			MethodName: "RemoveSourcesFromEvaluator",
			Handler:    _EvaluatordService_RemoveSourcesFromEvaluator_Handler,
		},
		{
			MethodName: "ListEvaluatorsBySource",
			Handler:    _EvaluatordService_ListEvaluatorsBySource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
