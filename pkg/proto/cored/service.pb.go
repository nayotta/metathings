// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package cored

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 567 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0x3f, 0x73, 0x13, 0x31,
	0x10, 0xc5, 0xed, 0x82, 0x04, 0x2f, 0x26, 0x31, 0xe7, 0x19, 0x66, 0x70, 0xa8, 0x5c, 0x31, 0x40,
	0x74, 0xe6, 0xdf, 0x40, 0x8d, 0x71, 0x42, 0x41, 0xc1, 0x60, 0x42, 0x91, 0xc6, 0x23, 0x5f, 0xd6,
	0x77, 0x37, 0x73, 0xb6, 0x8c, 0xa4, 0x23, 0x93, 0x92, 0x96, 0x2f, 0xc7, 0x57, 0x62, 0x4e, 0xff,
	0xac, 0x2b, 0xb0, 0xe4, 0x32, 0xcf, 0xbf, 0xdd, 0xa7, 0x5d, 0xbd, 0x53, 0xe0, 0xa1, 0x40, 0xfe,
	0xab, 0xcc, 0x90, 0x6c, 0x39, 0x93, 0x2c, 0x39, 0xa3, 0x25, 0x59, 0xa3, 0xa4, 0xb2, 0x28, 0x37,
	0xb9, 0x20, 0xf6, 0xc7, 0x8c, 0x71, 0xbc, 0x19, 0x9d, 0xe5, 0x8c, 0xe5, 0x15, 0xa6, 0x0a, 0x5d,
	0xd6, 0xab, 0x14, 0xd7, 0x5b, 0x79, 0xa7, 0x2b, 0x47, 0x8f, 0x32, 0x8e, 0x54, 0xe2, 0xa2, 0x41,
	0xad, 0x74, 0x83, 0x15, 0xb6, 0xa5, 0xc1, 0x96, 0xca, 0xac, 0xf0, 0x95, 0x93, 0x1c, 0x65, 0x8b,
	0xa8, 0x4a, 0xa1, 0x05, 0x61, 0x94, 0x53, 0x51, 0xb0, 0x5b, 0x1f, 0x19, 0x1a, 0x2b, 0xdc, 0xc8,
	0xd2, 0xf9, 0x0f, 0x8d, 0x59, 0x4b, 0x4c, 0xb4, 0x5d, 0x4b, 0x1b, 0x34, 0x86, 0xed, 0x52, 0x65,
	0xa9, 0xa4, 0xd2, 0xb9, 0x3e, 0x6d, 0x89, 0x8b, 0x15, 0xe3, 0xfe, 0x11, 0x4e, 0x0b, 0xa4, 0x5c,
	0x2e, 0x91, 0x4a, 0x23, 0xf4, 0x85, 0xe4, 0x48, 0xd7, 0xe6, 0xaf, 0x27, 0xbb, 0x21, 0x54, 0x65,
	0x2d, 0x90, 0x5b, 0xfb, 0x7a, 0x43, 0xf9, 0xdd, 0x22, 0xa3, 0x55, 0x65, 0xd7, 0xa4, 0x4b, 0x3d,
	0xe9, 0xf5, 0xdf, 0x13, 0xe8, 0x4f, 0x9b, 0x9d, 0xcf, 0xf5, 0x05, 0x24, 0x0c, 0x60, 0xaa, 0x86,
	0x6e, 0xd4, 0x84, 0x90, 0x3d, 0xd7, 0x44, 0x76, 0xe0, 0x37, 0xfc, 0x59, 0xa3, 0x90, 0xa3, 0x34,
	0x9a, 0x17, 0x5b, 0xb6, 0x11, 0x38, 0xee, 0x24, 0x3f, 0x00, 0x3e, 0xa9, 0x85, 0x46, 0x18, 0xee,
	0x40, 0x6b, 0xf8, 0x98, 0xe8, 0xa8, 0x10, 0x1b, 0x15, 0x32, 0x6b, 0xa2, 0x32, 0xee, 0x24, 0x15,
	0xf4, 0xbe, 0x36, 0x77, 0xa2, 0xda, 0x9e, 0xef, 0x6d, 0xeb, 0x38, 0xdb, 0x95, 0xc4, 0xe2, 0x6e,
	0x8a, 0x15, 0x1c, 0x5f, 0xa2, 0x54, 0x5e, 0x2f, 0xf6, 0x16, 0x1b, 0xca, 0x3a, 0xbd, 0x8c, 0x83,
	0x9d, 0x4f, 0x05, 0xbd, 0x2f, 0xa5, 0x50, 0xaa, 0x08, 0x4c, 0xe5, 0xb8, 0xb8, 0xa9, 0x3c, 0xdc,
	0xb9, 0xcd, 0xe1, 0xfe, 0xbc, 0x60, 0xb7, 0x6a, 0xac, 0xff, 0x6c, 0x7a, 0xb4, 0xff, 0x10, 0xb6,
	0xdc, 0x6b, 0x5a, 0x43, 0x5f, 0x07, 0x61, 0xa6, 0x3e, 0x8d, 0x64, 0x12, 0x91, 0x19, 0x8d, 0xda,
	0x41, 0x5e, 0x1d, 0x50, 0xe1, 0x6c, 0xaf, 0xa1, 0xaf, 0xe3, 0x13, 0x65, 0xeb, 0xa3, 0xe1, 0xac,
	0x71, 0x78, 0xa0, 0x42, 0x61, 0x5a, 0xa7, 0xe1, 0xf8, 0xb4, 0x3b, 0x4f, 0xe2, 0x0b, 0xfc, 0x24,
	0x5c, 0xa2, 0x34, 0x8e, 0xe7, 0xa1, 0x18, 0xb5, 0xfd, 0x48, 0x2c, 0xee, 0x5f, 0x5a, 0x13, 0x90,
	0x99, 0x79, 0xa5, 0x02, 0xdb, 0xf3, 0xd1, 0xb8, 0x4b, 0x6b, 0x57, 0x38, 0xdb, 0x3f, 0x5d, 0x18,
	0xfa, 0x3f, 0x5d, 0x30, 0xae, 0xc2, 0xf8, 0x3e, 0xba, 0x99, 0xa9, 0xb0, 0xa7, 0xf8, 0x70, 0x78,
	0xa1, 0x3b, 0xcc, 0x77, 0xe8, 0x7d, 0xb6, 0x8f, 0x71, 0x60, 0xe3, 0x8e, 0x0b, 0x67, 0x27, 0x87,
	0xa3, 0xb9, 0x7a, 0x96, 0x03, 0x0f, 0x87, 0x86, 0xec, 0x71, 0x46, 0xcf, 0xa3, 0x60, 0x65, 0x3e,
	0xee, 0x3c, 0xeb, 0x4e, 0xba, 0xc9, 0xef, 0x2e, 0x0c, 0xdc, 0x47, 0x7e, 0xc1, 0xf8, 0x95, 0x40,
	0x9e, 0xbc, 0x8d, 0x7b, 0x13, 0x0c, 0x6e, 0xa7, 0x79, 0x77, 0x60, 0x95, 0x1f, 0xda, 0xab, 0xe6,
	0xbf, 0xd2, 0x94, 0x56, 0x55, 0x60, 0x85, 0x8e, 0x8b, 0x0b, 0xad, 0x87, 0x3b, 0x37, 0x01, 0xa0,
	0x17, 0xa1, 0xec, 0x48, 0xc4, 0xc6, 0x7c, 0xbf, 0x34, 0x9a, 0xb7, 0x86, 0xcd, 0x9a, 0x3f, 0x1e,
	0x5f, 0xdf, 0x53, 0xc4, 0xf2, 0x48, 0x5d, 0xf5, 0x9b, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc6,
	0xe3, 0x51, 0x68, 0xf9, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoredServiceClient is the client API for CoredService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoredServiceClient interface {
	CreateCore(ctx context.Context, in *CreateCoreRequest, opts ...grpc.CallOption) (*CreateCoreResponse, error)
	DeleteCore(ctx context.Context, in *DeleteCoreRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PatchCore(ctx context.Context, in *PatchCoreRequest, opts ...grpc.CallOption) (*PatchCoreResponse, error)
	GetCore(ctx context.Context, in *GetCoreRequest, opts ...grpc.CallOption) (*GetCoreResponse, error)
	ListCores(ctx context.Context, in *ListCoresRequest, opts ...grpc.CallOption) (*ListCoresResponse, error)
	ShowCore(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ShowCoreResponse, error)
	CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error)
	DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PatchEntity(ctx context.Context, in *PatchEntityRequest, opts ...grpc.CallOption) (*PatchEntityResponse, error)
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error)
	ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error)
	ListEntitiesForCore(ctx context.Context, in *ListEntitiesForCoreRequest, opts ...grpc.CallOption) (*ListEntitiesForCoreResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// NOTE: input is response body form core agentd,
	//       output is request body to core agentd.
	Stream(ctx context.Context, opts ...grpc.CallOption) (CoredService_StreamClient, error)
	ListCoresForUser(ctx context.Context, in *ListCoresForUserRequest, opts ...grpc.CallOption) (*ListCoresForUserResponse, error)
	UnaryCall(ctx context.Context, in *UnaryCallRequest, opts ...grpc.CallOption) (*UnaryCallResponse, error)
	StreamCall(ctx context.Context, opts ...grpc.CallOption) (CoredService_StreamCallClient, error)
}

type coredServiceClient struct {
	cc *grpc.ClientConn
}

func NewCoredServiceClient(cc *grpc.ClientConn) CoredServiceClient {
	return &coredServiceClient{cc}
}

func (c *coredServiceClient) CreateCore(ctx context.Context, in *CreateCoreRequest, opts ...grpc.CallOption) (*CreateCoreResponse, error) {
	out := new(CreateCoreResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.cored.CoredService/CreateCore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coredServiceClient) DeleteCore(ctx context.Context, in *DeleteCoreRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.cored.CoredService/DeleteCore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coredServiceClient) PatchCore(ctx context.Context, in *PatchCoreRequest, opts ...grpc.CallOption) (*PatchCoreResponse, error) {
	out := new(PatchCoreResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.cored.CoredService/PatchCore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coredServiceClient) GetCore(ctx context.Context, in *GetCoreRequest, opts ...grpc.CallOption) (*GetCoreResponse, error) {
	out := new(GetCoreResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.cored.CoredService/GetCore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coredServiceClient) ListCores(ctx context.Context, in *ListCoresRequest, opts ...grpc.CallOption) (*ListCoresResponse, error) {
	out := new(ListCoresResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.cored.CoredService/ListCores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coredServiceClient) ShowCore(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ShowCoreResponse, error) {
	out := new(ShowCoreResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.cored.CoredService/ShowCore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coredServiceClient) CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error) {
	out := new(CreateEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.cored.CoredService/CreateEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coredServiceClient) DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.cored.CoredService/DeleteEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coredServiceClient) PatchEntity(ctx context.Context, in *PatchEntityRequest, opts ...grpc.CallOption) (*PatchEntityResponse, error) {
	out := new(PatchEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.cored.CoredService/PatchEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coredServiceClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error) {
	out := new(GetEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.cored.CoredService/GetEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coredServiceClient) ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error) {
	out := new(ListEntitiesResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.cored.CoredService/ListEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coredServiceClient) ListEntitiesForCore(ctx context.Context, in *ListEntitiesForCoreRequest, opts ...grpc.CallOption) (*ListEntitiesForCoreResponse, error) {
	out := new(ListEntitiesForCoreResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.cored.CoredService/ListEntitiesForCore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coredServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.cored.CoredService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coredServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (CoredService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CoredService_serviceDesc.Streams[0], "/ai.metathings.service.cored.CoredService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &coredServiceStreamClient{stream}
	return x, nil
}

type CoredService_StreamClient interface {
	Send(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ClientStream
}

type coredServiceStreamClient struct {
	grpc.ClientStream
}

func (x *coredServiceStreamClient) Send(m *StreamResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *coredServiceStreamClient) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coredServiceClient) ListCoresForUser(ctx context.Context, in *ListCoresForUserRequest, opts ...grpc.CallOption) (*ListCoresForUserResponse, error) {
	out := new(ListCoresForUserResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.cored.CoredService/ListCoresForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coredServiceClient) UnaryCall(ctx context.Context, in *UnaryCallRequest, opts ...grpc.CallOption) (*UnaryCallResponse, error) {
	out := new(UnaryCallResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.cored.CoredService/UnaryCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coredServiceClient) StreamCall(ctx context.Context, opts ...grpc.CallOption) (CoredService_StreamCallClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CoredService_serviceDesc.Streams[1], "/ai.metathings.service.cored.CoredService/StreamCall", opts...)
	if err != nil {
		return nil, err
	}
	x := &coredServiceStreamCallClient{stream}
	return x, nil
}

type CoredService_StreamCallClient interface {
	Send(*StreamCallRequest) error
	Recv() (*StreamCallResponse, error)
	grpc.ClientStream
}

type coredServiceStreamCallClient struct {
	grpc.ClientStream
}

func (x *coredServiceStreamCallClient) Send(m *StreamCallRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *coredServiceStreamCallClient) Recv() (*StreamCallResponse, error) {
	m := new(StreamCallResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CoredServiceServer is the server API for CoredService service.
type CoredServiceServer interface {
	CreateCore(context.Context, *CreateCoreRequest) (*CreateCoreResponse, error)
	DeleteCore(context.Context, *DeleteCoreRequest) (*empty.Empty, error)
	PatchCore(context.Context, *PatchCoreRequest) (*PatchCoreResponse, error)
	GetCore(context.Context, *GetCoreRequest) (*GetCoreResponse, error)
	ListCores(context.Context, *ListCoresRequest) (*ListCoresResponse, error)
	ShowCore(context.Context, *empty.Empty) (*ShowCoreResponse, error)
	CreateEntity(context.Context, *CreateEntityRequest) (*CreateEntityResponse, error)
	DeleteEntity(context.Context, *DeleteEntityRequest) (*empty.Empty, error)
	PatchEntity(context.Context, *PatchEntityRequest) (*PatchEntityResponse, error)
	GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error)
	ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error)
	ListEntitiesForCore(context.Context, *ListEntitiesForCoreRequest) (*ListEntitiesForCoreResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*empty.Empty, error)
	// NOTE: input is response body form core agentd,
	//       output is request body to core agentd.
	Stream(CoredService_StreamServer) error
	ListCoresForUser(context.Context, *ListCoresForUserRequest) (*ListCoresForUserResponse, error)
	UnaryCall(context.Context, *UnaryCallRequest) (*UnaryCallResponse, error)
	StreamCall(CoredService_StreamCallServer) error
}

func RegisterCoredServiceServer(s *grpc.Server, srv CoredServiceServer) {
	s.RegisterService(&_CoredService_serviceDesc, srv)
}

func _CoredService_CreateCore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoredServiceServer).CreateCore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.cored.CoredService/CreateCore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoredServiceServer).CreateCore(ctx, req.(*CreateCoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoredService_DeleteCore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoredServiceServer).DeleteCore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.cored.CoredService/DeleteCore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoredServiceServer).DeleteCore(ctx, req.(*DeleteCoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoredService_PatchCore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchCoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoredServiceServer).PatchCore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.cored.CoredService/PatchCore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoredServiceServer).PatchCore(ctx, req.(*PatchCoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoredService_GetCore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoredServiceServer).GetCore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.cored.CoredService/GetCore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoredServiceServer).GetCore(ctx, req.(*GetCoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoredService_ListCores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoredServiceServer).ListCores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.cored.CoredService/ListCores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoredServiceServer).ListCores(ctx, req.(*ListCoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoredService_ShowCore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoredServiceServer).ShowCore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.cored.CoredService/ShowCore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoredServiceServer).ShowCore(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoredService_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoredServiceServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.cored.CoredService/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoredServiceServer).CreateEntity(ctx, req.(*CreateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoredService_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoredServiceServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.cored.CoredService/DeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoredServiceServer).DeleteEntity(ctx, req.(*DeleteEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoredService_PatchEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoredServiceServer).PatchEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.cored.CoredService/PatchEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoredServiceServer).PatchEntity(ctx, req.(*PatchEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoredService_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoredServiceServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.cored.CoredService/GetEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoredServiceServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoredService_ListEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoredServiceServer).ListEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.cored.CoredService/ListEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoredServiceServer).ListEntities(ctx, req.(*ListEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoredService_ListEntitiesForCore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntitiesForCoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoredServiceServer).ListEntitiesForCore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.cored.CoredService/ListEntitiesForCore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoredServiceServer).ListEntitiesForCore(ctx, req.(*ListEntitiesForCoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoredService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoredServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.cored.CoredService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoredServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoredService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoredServiceServer).Stream(&coredServiceStreamServer{stream})
}

type CoredService_StreamServer interface {
	Send(*StreamRequest) error
	Recv() (*StreamResponse, error)
	grpc.ServerStream
}

type coredServiceStreamServer struct {
	grpc.ServerStream
}

func (x *coredServiceStreamServer) Send(m *StreamRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *coredServiceStreamServer) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CoredService_ListCoresForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCoresForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoredServiceServer).ListCoresForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.cored.CoredService/ListCoresForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoredServiceServer).ListCoresForUser(ctx, req.(*ListCoresForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoredService_UnaryCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoredServiceServer).UnaryCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.cored.CoredService/UnaryCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoredServiceServer).UnaryCall(ctx, req.(*UnaryCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoredService_StreamCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoredServiceServer).StreamCall(&coredServiceStreamCallServer{stream})
}

type CoredService_StreamCallServer interface {
	Send(*StreamCallResponse) error
	Recv() (*StreamCallRequest, error)
	grpc.ServerStream
}

type coredServiceStreamCallServer struct {
	grpc.ServerStream
}

func (x *coredServiceStreamCallServer) Send(m *StreamCallResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *coredServiceStreamCallServer) Recv() (*StreamCallRequest, error) {
	m := new(StreamCallRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CoredService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.cored.CoredService",
	HandlerType: (*CoredServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCore",
			Handler:    _CoredService_CreateCore_Handler,
		},
		{
			MethodName: "DeleteCore",
			Handler:    _CoredService_DeleteCore_Handler,
		},
		{
			MethodName: "PatchCore",
			Handler:    _CoredService_PatchCore_Handler,
		},
		{
			MethodName: "GetCore",
			Handler:    _CoredService_GetCore_Handler,
		},
		{
			MethodName: "ListCores",
			Handler:    _CoredService_ListCores_Handler,
		},
		{
			MethodName: "ShowCore",
			Handler:    _CoredService_ShowCore_Handler,
		},
		{
			MethodName: "CreateEntity",
			Handler:    _CoredService_CreateEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _CoredService_DeleteEntity_Handler,
		},
		{
			MethodName: "PatchEntity",
			Handler:    _CoredService_PatchEntity_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _CoredService_GetEntity_Handler,
		},
		{
			MethodName: "ListEntities",
			Handler:    _CoredService_ListEntities_Handler,
		},
		{
			MethodName: "ListEntitiesForCore",
			Handler:    _CoredService_ListEntitiesForCore_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _CoredService_Heartbeat_Handler,
		},
		{
			MethodName: "ListCoresForUser",
			Handler:    _CoredService_ListCoresForUser_Handler,
		},
		{
			MethodName: "UnaryCall",
			Handler:    _CoredService_UnaryCall_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _CoredService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamCall",
			Handler:       _CoredService_StreamCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
