// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package deviced

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 974 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0x4b, 0x6f, 0x1c, 0x45,
	0x10, 0xce, 0x5c, 0x88, 0x5c, 0x59, 0x13, 0xbb, 0x1d, 0xac, 0xb0, 0x21, 0x08, 0xf9, 0xc4, 0x85,
	0xf1, 0x0b, 0xf2, 0x02, 0x04, 0xc4, 0xc1, 0xe1, 0x00, 0xc2, 0x64, 0x21, 0x12, 0x28, 0x62, 0x34,
	0xbb, 0xdb, 0xfb, 0x40, 0xb3, 0xd3, 0x93, 0xe9, 0x1e, 0xaf, 0x46, 0xe2, 0x0a, 0x42, 0x1c, 0xe0,
	0xc0, 0x81, 0x03, 0x37, 0x7e, 0x29, 0xea, 0x47, 0xf5, 0xf6, 0x8c, 0x97, 0x74, 0xcf, 0x9e, 0x2c,
	0x55, 0x7d, 0x5f, 0x7d, 0x55, 0x35, 0x55, 0xe5, 0x5e, 0xd8, 0xe6, 0xb4, 0xbc, 0x9c, 0x8f, 0x68,
	0x5c, 0x94, 0x4c, 0x30, 0x72, 0x37, 0x9d, 0xc7, 0x0b, 0x2a, 0x52, 0x31, 0x9b, 0xe7, 0x53, 0x1e,
	0xa3, 0x73, 0x4c, 0xe5, 0x9f, 0x71, 0xff, 0xce, 0x94, 0xb1, 0x69, 0x46, 0x0f, 0x15, 0x78, 0x58,
	0x4d, 0x0e, 0xe9, 0xa2, 0x10, 0xb5, 0xe6, 0xf6, 0xf7, 0x46, 0x25, 0x4d, 0x05, 0x4d, 0x34, 0x18,
	0x8d, 0x63, 0x9a, 0xd1, 0xb6, 0x91, 0x14, 0xa9, 0x18, 0xcd, 0x9a, 0xb6, 0x9d, 0x29, 0x15, 0x2d,
	0x54, 0x36, 0xe7, 0x68, 0xe2, 0xc6, 0xd6, 0x5f, 0xa1, 0x92, 0x61, 0x9d, 0x2c, 0xd8, 0xb8, 0xca,
	0x6c, 0x84, 0x2a, 0x4f, 0xcb, 0x3a, 0x19, 0xa5, 0x59, 0x66, 0x2c, 0xbb, 0x5c, 0x94, 0x34, 0x5d,
	0xb8, 0xa6, 0x7e, 0x51, 0x65, 0x59, 0x32, 0x29, 0xd3, 0x05, 0x4d, 0x26, 0x25, 0x5b, 0x24, 0x93,
	0x8c, 0x2d, 0x8d, 0xef, 0x76, 0x51, 0xf1, 0x99, 0xf1, 0x09, 0xe6, 0x7a, 0xde, 0x7a, 0x59, 0xd1,
	0xb2, 0xd6, 0x2e, 0x7e, 0x85, 0xf7, 0x86, 0x29, 0x5c, 0x9a, 0x12, 0x4e, 0x05, 0x9a, 0x4d, 0xe9,
	0x2d, 0xf3, 0x2d, 0x5d, 0x7c, 0xcb, 0x4a, 0x64, 0x61, 0x6d, 0xa4, 0x6a, 0x00, 0x1a, 0xb1, 0x05,
	0x77, 0xd2, 0xf1, 0x58, 0x19, 0x39, 0x26, 0xe9, 0x50, 0xde, 0x29, 0xe9, 0x82, 0x5d, 0x52, 0xe3,
	0xb7, 0x89, 0x3a, 0x88, 0xb7, 0xd7, 0x35, 0xc0, 0x8d, 0xb0, 0xbe, 0x54, 0x07, 0xb1, 0x53, 0x54,
	0x22, 0x61, 0xc3, 0x9f, 0xe8, 0x48, 0xac, 0x9a, 0x8a, 0x96, 0x44, 0xb7, 0x7c, 0x9e, 0x4f, 0x71,
	0x00, 0x4c, 0x46, 0x0d, 0xc2, 0x5e, 0x49, 0x73, 0x99, 0x40, 0xc3, 0xa8, 0x26, 0xa0, 0x61, 0xb9,
	0xbd, 0xb2, 0x24, 0x23, 0x96, 0x0b, 0x9a, 0xa3, 0xe7, 0xc0, 0xf1, 0x58, 0xc5, 0x16, 0x46, 0xcf,
	0x8f, 0x06, 0x71, 0x3b, 0x11, 0x33, 0xb6, 0x6c, 0x8e, 0xd9, 0xf6, 0x88, 0xe5, 0xf9, 0x4a, 0xf3,
	0xe6, 0x8c, 0xa6, 0xa5, 0x18, 0xd2, 0xd4, 0x18, 0x4e, 0xfe, 0xb9, 0x0b, 0xaf, 0x3f, 0xd1, 0xf3,
	0x3f, 0xd0, 0xeb, 0x40, 0x6a, 0xe8, 0x9d, 0xa9, 0x4f, 0xae, 0xed, 0xe4, 0x24, 0x7e, 0xe5, 0xda,
	0xc4, 0x2e, 0xf8, 0x19, 0x7d, 0x59, 0x51, 0x2e, 0xfa, 0xa7, 0x9d, 0x38, 0xbc, 0x60, 0x39, 0xa7,
	0x07, 0xd7, 0xc8, 0x0b, 0xe8, 0x3d, 0x51, 0x63, 0x15, 0x28, 0xed, 0x82, 0x51, 0x7a, 0x3f, 0xd6,
	0x6b, 0x1c, 0xe3, 0x1a, 0xc7, 0x9f, 0xcb, 0x35, 0x3e, 0xb8, 0x46, 0x2e, 0xe1, 0xc6, 0x85, 0x9c,
	0x4e, 0x13, 0xfc, 0xd8, 0x13, 0xdc, 0xc1, 0x62, 0xec, 0x93, 0x2e, 0x14, 0x5b, 0x55, 0x01, 0x5b,
	0x4f, 0xa9, 0x30, 0xaa, 0x87, 0x9e, 0x10, 0x16, 0x89, 0x9a, 0x47, 0xe1, 0x04, 0xab, 0x78, 0x09,
	0x37, 0xbe, 0x9c, 0x73, 0x63, 0xe7, 0xde, 0x4a, 0x1d, 0x6c, 0x68, 0xa5, 0x0d, 0x8a, 0xd5, 0xfd,
	0x2d, 0x82, 0x5d, 0x9b, 0xcf, 0xe3, 0xfa, 0x2b, 0x75, 0xc0, 0xc8, 0xfd, 0xd0, 0x0a, 0x90, 0x81,
	0x49, 0x3c, 0xe8, 0x4e, 0x74, 0x9b, 0xfe, 0x9d, 0xbc, 0x98, 0x67, 0x69, 0x96, 0x79, 0x9b, 0x6e,
	0x91, 0xa1, 0x4d, 0x77, 0x08, 0x56, 0x71, 0x09, 0x30, 0x50, 0xcb, 0xaa, 0x24, 0x7d, 0x11, 0x56,
	0x50, 0xd4, 0x3c, 0xee, 0xc0, 0x40, 0xd1, 0x77, 0xa3, 0xa3, 0x88, 0xfc, 0x1e, 0xc1, 0xee, 0x45,
	0x95, 0x65, 0xe7, 0xf2, 0xaa, 0x9d, 0x97, 0x6c, 0x71, 0x9e, 0xb1, 0xa5, 0xb7, 0xeb, 0x57, 0x18,
	0xa1, 0x5d, 0x5f, 0x43, 0xc4, 0x74, 0x8e, 0x22, 0xf2, 0x6b, 0x04, 0x37, 0x2f, 0x2a, 0x3e, 0x53,
	0x88, 0x6f, 0x99, 0x4a, 0xe5, 0x03, 0x6f, 0xc4, 0x06, 0x1e, 0x13, 0xb9, 0xd7, 0x95, 0xd6, 0xe8,
	0xca, 0x1f, 0x11, 0xec, 0x7d, 0x23, 0xaf, 0xbd, 0x82, 0x70, 0xdb, 0x97, 0x87, 0x9e, 0xa8, 0x6b,
	0x38, 0x98, 0xd0, 0xa3, 0x4d, 0xa8, 0x76, 0x3e, 0x7e, 0x86, 0x6d, 0x7d, 0xf6, 0xa4, 0x7d, 0x40,
	0x05, 0x09, 0x3b, 0x92, 0x06, 0x8d, 0x39, 0xbc, 0xdf, 0x8d, 0x64, 0xd5, 0x7f, 0x84, 0x6d, 0x7d,
	0x2d, 0x43, 0xd5, 0x1b, 0x68, 0xff, 0x71, 0xad, 0xa1, 0xa7, 0xae, 0x1f, 0x86, 0x0f, 0x3a, 0x95,
	0xad, 0xe8, 0xa7, 0x9d, 0x38, 0xb6, 0x34, 0x0e, 0xf0, 0x94, 0x0a, 0x14, 0x0e, 0xb8, 0x97, 0x2d,
	0xd9, 0xe3, 0x0e, 0x0c, 0x2b, 0x5a, 0x43, 0x4f, 0xde, 0x40, 0xe3, 0xe0, 0x24, 0xe4, 0x60, 0x22,
	0x38, 0xb4, 0xde, 0x26, 0xc7, 0x4a, 0x4f, 0x60, 0xf7, 0xb3, 0xf1, 0x58, 0x3a, 0xb8, 0x9e, 0x7c,
	0x59, 0xb6, 0x6f, 0xdd, 0xaf, 0x30, 0xfc, 0x9f, 0xb4, 0x80, 0xfd, 0x67, 0xea, 0x79, 0xa3, 0x88,
	0x38, 0xd1, 0x52, 0xec, 0x23, 0x8f, 0xd8, 0x7a, 0x9a, 0x5f, 0xf1, 0xaf, 0x08, 0x6e, 0x5d, 0x39,
	0x2f, 0x52, 0xf0, 0x51, 0xd7, 0x9b, 0xe4, 0xc8, 0x7d, 0xb8, 0x11, 0xd7, 0x39, 0x69, 0x7f, 0x47,
	0xb0, 0xbf, 0x66, 0xb5, 0x43, 0x1a, 0xb1, 0x9e, 0x86, 0x99, 0x7d, 0xbc, 0x21, 0xdb, 0x4e, 0xc2,
	0x73, 0xd8, 0xba, 0xa8, 0xc4, 0xd7, 0xea, 0x11, 0xe8, 0xfd, 0x27, 0x67, 0x91, 0xfe, 0xef, 0xf0,
	0x67, 0x04, 0xc4, 0xc2, 0x07, 0xf8, 0x02, 0x25, 0x0f, 0x42, 0x15, 0x2c, 0x05, 0xa5, 0x1e, 0x6e,
	0xc0, 0x6c, 0x5c, 0xf3, 0x17, 0xd0, 0xd3, 0x43, 0x65, 0x8a, 0x3d, 0x09, 0x9a, 0xc0, 0xd0, 0x7a,
	0x55, 0x74, 0xf9, 0x66, 0x0f, 0x8e, 0xbe, 0x02, 0x87, 0xec, 0x91, 0x7c, 0xff, 0x05, 0x7e, 0x25,
	0x8b, 0xec, 0xf0, 0xfe, 0x43, 0x82, 0x9d, 0x8b, 0x5f, 0x22, 0xd8, 0xb1, 0xf6, 0x33, 0xfd, 0xbb,
	0x81, 0xdc, 0x0b, 0x0d, 0x64, 0x08, 0x98, 0xc0, 0xfd, 0xce, 0x3c, 0x9b, 0xc7, 0xbf, 0x11, 0xbc,
	0x69, 0xdd, 0xf6, 0xd3, 0x62, 0x42, 0x9f, 0x84, 0x06, 0x6e, 0x33, 0x31, 0xb3, 0x4f, 0x37, 0x0f,
	0xe0, 0xac, 0xb7, 0x79, 0x2c, 0x6b, 0x64, 0xd8, 0x63, 0xd9, 0x60, 0xbb, 0x3c, 0x96, 0x2d, 0xc5,
	0x36, 0xe7, 0x7b, 0x80, 0xc1, 0x8c, 0x2d, 0xcd, 0xef, 0x82, 0xff, 0x19, 0x1f, 0xff, 0xab, 0xd0,
	0x86, 0x70, 0x42, 0xe7, 0x70, 0xfd, 0x4c, 0xff, 0xee, 0x23, 0xb1, 0xef, 0xbd, 0xa0, 0x71, 0x48,
	0xee, 0xbf, 0x17, 0x8a, 0x57, 0xa5, 0x9b, 0xed, 0x7c, 0x0e, 0x5b, 0x5f, 0xe0, 0x0f, 0x4b, 0xef,
	0x84, 0x5b, 0xa4, 0x77, 0x73, 0x1e, 0x6f, 0xfd, 0x70, 0xdd, 0xb0, 0x86, 0xaf, 0x29, 0xe7, 0xe9,
	0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa2, 0xd3, 0x11, 0xc3, 0xd3, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DevicedServiceClient is the client API for DevicedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DevicedServiceClient interface {
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error)
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PatchDevice(ctx context.Context, in *PatchDeviceRequest, opts ...grpc.CallOption) (*PatchDeviceResponse, error)
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error)
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	GetDeviceByModule(ctx context.Context, in *GetDeviceByModuleRequest, opts ...grpc.CallOption) (*GetDeviceByModuleResponse, error)
	// Calling
	UnaryCall(ctx context.Context, in *UnaryCallRequest, opts ...grpc.CallOption) (*UnaryCallResponse, error)
	StreamCall(ctx context.Context, opts ...grpc.CallOption) (DevicedService_StreamCallClient, error)
	// Flow
	PullFrameFromFlow(ctx context.Context, in *PullFrameFromFlowRequest, opts ...grpc.CallOption) (DevicedService_PullFrameFromFlowClient, error)
	PushFrameToFlow(ctx context.Context, opts ...grpc.CallOption) (DevicedService_PushFrameToFlowClient, error)
	QueryFramesFromFlow(ctx context.Context, in *QueryFramesFromFlowRequest, opts ...grpc.CallOption) (*QueryFramesFromFlowResponse, error)
	// Flow Set
	CreateFlowSet(ctx context.Context, in *CreateFlowSetRequest, opts ...grpc.CallOption) (*CreateFlowSetResponse, error)
	DeleteFlowSet(ctx context.Context, in *DeleteFlowSetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PatchFlowSet(ctx context.Context, in *PatchFlowSetRequest, opts ...grpc.CallOption) (*PatchFlowSetResponse, error)
	GetFlowSet(ctx context.Context, in *GetFlowSetRequest, opts ...grpc.CallOption) (*GetFlowSetResponse, error)
	ListFlowSets(ctx context.Context, in *ListFlowSetsRequest, opts ...grpc.CallOption) (*ListFlowSetsResponse, error)
	AddFlowsToFlowSet(ctx context.Context, in *AddFlowsToFlowSetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveFlowsFromFlowSet(ctx context.Context, in *RemoveFlowsFromFlowSetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PullFrameFromFlowSet(ctx context.Context, in *PullFrameFromFlowSetRequest, opts ...grpc.CallOption) (DevicedService_PullFrameFromFlowSetClient, error)
	QueryFramesFromFlowSet(ctx context.Context, in *QueryFramesFromFlowSetRequest, opts ...grpc.CallOption) (*QueryFramesFromFlowSetResponse, error)
	// Simple Storage
	PutObject(ctx context.Context, in *PutObjectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PutObjectStreaming(ctx context.Context, opts ...grpc.CallOption) (DevicedService_PutObjectStreamingClient, error)
	RemoveObject(ctx context.Context, in *RemoveObjectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RenameObject(ctx context.Context, in *RenameObjectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error)
	GetObjectContent(ctx context.Context, in *GetObjectContentRequest, opts ...grpc.CallOption) (*GetObjectContentResponse, error)
	GetObjectStreamingContent(ctx context.Context, in *GetObjectStreamingContentRequest, opts ...grpc.CallOption) (DevicedService_GetObjectStreamingContentClient, error)
	ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*ListObjectsResponse, error)
	// internal device only
	ShowDevice(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ShowDeviceResponse, error)
	Connect(ctx context.Context, opts ...grpc.CallOption) (DevicedService_ConnectClient, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type devicedServiceClient struct {
	cc *grpc.ClientConn
}

func NewDevicedServiceClient(cc *grpc.ClientConn) DevicedServiceClient {
	return &devicedServiceClient{cc}
}

func (c *devicedServiceClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error) {
	out := new(CreateDeviceResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) PatchDevice(ctx context.Context, in *PatchDeviceRequest, opts ...grpc.CallOption) (*PatchDeviceResponse, error) {
	out := new(PatchDeviceResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/PatchDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error) {
	out := new(GetDeviceResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/GetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) GetDeviceByModule(ctx context.Context, in *GetDeviceByModuleRequest, opts ...grpc.CallOption) (*GetDeviceByModuleResponse, error) {
	out := new(GetDeviceByModuleResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/GetDeviceByModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) UnaryCall(ctx context.Context, in *UnaryCallRequest, opts ...grpc.CallOption) (*UnaryCallResponse, error) {
	out := new(UnaryCallResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/UnaryCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) StreamCall(ctx context.Context, opts ...grpc.CallOption) (DevicedService_StreamCallClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DevicedService_serviceDesc.Streams[0], "/ai.metathings.service.deviced.DevicedService/StreamCall", opts...)
	if err != nil {
		return nil, err
	}
	x := &devicedServiceStreamCallClient{stream}
	return x, nil
}

type DevicedService_StreamCallClient interface {
	Send(*StreamCallRequest) error
	Recv() (*StreamCallResponse, error)
	grpc.ClientStream
}

type devicedServiceStreamCallClient struct {
	grpc.ClientStream
}

func (x *devicedServiceStreamCallClient) Send(m *StreamCallRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *devicedServiceStreamCallClient) Recv() (*StreamCallResponse, error) {
	m := new(StreamCallResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *devicedServiceClient) PullFrameFromFlow(ctx context.Context, in *PullFrameFromFlowRequest, opts ...grpc.CallOption) (DevicedService_PullFrameFromFlowClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DevicedService_serviceDesc.Streams[1], "/ai.metathings.service.deviced.DevicedService/PullFrameFromFlow", opts...)
	if err != nil {
		return nil, err
	}
	x := &devicedServicePullFrameFromFlowClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DevicedService_PullFrameFromFlowClient interface {
	Recv() (*PullFrameFromFlowResponse, error)
	grpc.ClientStream
}

type devicedServicePullFrameFromFlowClient struct {
	grpc.ClientStream
}

func (x *devicedServicePullFrameFromFlowClient) Recv() (*PullFrameFromFlowResponse, error) {
	m := new(PullFrameFromFlowResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *devicedServiceClient) PushFrameToFlow(ctx context.Context, opts ...grpc.CallOption) (DevicedService_PushFrameToFlowClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DevicedService_serviceDesc.Streams[2], "/ai.metathings.service.deviced.DevicedService/PushFrameToFlow", opts...)
	if err != nil {
		return nil, err
	}
	x := &devicedServicePushFrameToFlowClient{stream}
	return x, nil
}

type DevicedService_PushFrameToFlowClient interface {
	Send(*PushFrameToFlowRequest) error
	Recv() (*PushFrameToFlowResponse, error)
	grpc.ClientStream
}

type devicedServicePushFrameToFlowClient struct {
	grpc.ClientStream
}

func (x *devicedServicePushFrameToFlowClient) Send(m *PushFrameToFlowRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *devicedServicePushFrameToFlowClient) Recv() (*PushFrameToFlowResponse, error) {
	m := new(PushFrameToFlowResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *devicedServiceClient) QueryFramesFromFlow(ctx context.Context, in *QueryFramesFromFlowRequest, opts ...grpc.CallOption) (*QueryFramesFromFlowResponse, error) {
	out := new(QueryFramesFromFlowResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/QueryFramesFromFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) CreateFlowSet(ctx context.Context, in *CreateFlowSetRequest, opts ...grpc.CallOption) (*CreateFlowSetResponse, error) {
	out := new(CreateFlowSetResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/CreateFlowSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) DeleteFlowSet(ctx context.Context, in *DeleteFlowSetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/DeleteFlowSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) PatchFlowSet(ctx context.Context, in *PatchFlowSetRequest, opts ...grpc.CallOption) (*PatchFlowSetResponse, error) {
	out := new(PatchFlowSetResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/PatchFlowSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) GetFlowSet(ctx context.Context, in *GetFlowSetRequest, opts ...grpc.CallOption) (*GetFlowSetResponse, error) {
	out := new(GetFlowSetResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/GetFlowSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) ListFlowSets(ctx context.Context, in *ListFlowSetsRequest, opts ...grpc.CallOption) (*ListFlowSetsResponse, error) {
	out := new(ListFlowSetsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/ListFlowSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) AddFlowsToFlowSet(ctx context.Context, in *AddFlowsToFlowSetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/AddFlowsToFlowSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) RemoveFlowsFromFlowSet(ctx context.Context, in *RemoveFlowsFromFlowSetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/RemoveFlowsFromFlowSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) PullFrameFromFlowSet(ctx context.Context, in *PullFrameFromFlowSetRequest, opts ...grpc.CallOption) (DevicedService_PullFrameFromFlowSetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DevicedService_serviceDesc.Streams[3], "/ai.metathings.service.deviced.DevicedService/PullFrameFromFlowSet", opts...)
	if err != nil {
		return nil, err
	}
	x := &devicedServicePullFrameFromFlowSetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DevicedService_PullFrameFromFlowSetClient interface {
	Recv() (*PullFrameFromFlowSetResponse, error)
	grpc.ClientStream
}

type devicedServicePullFrameFromFlowSetClient struct {
	grpc.ClientStream
}

func (x *devicedServicePullFrameFromFlowSetClient) Recv() (*PullFrameFromFlowSetResponse, error) {
	m := new(PullFrameFromFlowSetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *devicedServiceClient) QueryFramesFromFlowSet(ctx context.Context, in *QueryFramesFromFlowSetRequest, opts ...grpc.CallOption) (*QueryFramesFromFlowSetResponse, error) {
	out := new(QueryFramesFromFlowSetResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/QueryFramesFromFlowSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) PutObject(ctx context.Context, in *PutObjectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/PutObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) PutObjectStreaming(ctx context.Context, opts ...grpc.CallOption) (DevicedService_PutObjectStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DevicedService_serviceDesc.Streams[4], "/ai.metathings.service.deviced.DevicedService/PutObjectStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &devicedServicePutObjectStreamingClient{stream}
	return x, nil
}

type DevicedService_PutObjectStreamingClient interface {
	Send(*PutObjectStreamingRequest) error
	Recv() (*PutObjectStreamingResponse, error)
	grpc.ClientStream
}

type devicedServicePutObjectStreamingClient struct {
	grpc.ClientStream
}

func (x *devicedServicePutObjectStreamingClient) Send(m *PutObjectStreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *devicedServicePutObjectStreamingClient) Recv() (*PutObjectStreamingResponse, error) {
	m := new(PutObjectStreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *devicedServiceClient) RemoveObject(ctx context.Context, in *RemoveObjectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/RemoveObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) RenameObject(ctx context.Context, in *RenameObjectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/RenameObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error) {
	out := new(GetObjectResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/GetObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) GetObjectContent(ctx context.Context, in *GetObjectContentRequest, opts ...grpc.CallOption) (*GetObjectContentResponse, error) {
	out := new(GetObjectContentResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/GetObjectContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) GetObjectStreamingContent(ctx context.Context, in *GetObjectStreamingContentRequest, opts ...grpc.CallOption) (DevicedService_GetObjectStreamingContentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DevicedService_serviceDesc.Streams[5], "/ai.metathings.service.deviced.DevicedService/GetObjectStreamingContent", opts...)
	if err != nil {
		return nil, err
	}
	x := &devicedServiceGetObjectStreamingContentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DevicedService_GetObjectStreamingContentClient interface {
	Recv() (*GetObjectStreamingContentResponse, error)
	grpc.ClientStream
}

type devicedServiceGetObjectStreamingContentClient struct {
	grpc.ClientStream
}

func (x *devicedServiceGetObjectStreamingContentClient) Recv() (*GetObjectStreamingContentResponse, error) {
	m := new(GetObjectStreamingContentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *devicedServiceClient) ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*ListObjectsResponse, error) {
	out := new(ListObjectsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/ListObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) ShowDevice(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ShowDeviceResponse, error) {
	out := new(ShowDeviceResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/ShowDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicedServiceClient) Connect(ctx context.Context, opts ...grpc.CallOption) (DevicedService_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DevicedService_serviceDesc.Streams[6], "/ai.metathings.service.deviced.DevicedService/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &devicedServiceConnectClient{stream}
	return x, nil
}

type DevicedService_ConnectClient interface {
	Send(*ConnectResponse) error
	Recv() (*ConnectRequest, error)
	grpc.ClientStream
}

type devicedServiceConnectClient struct {
	grpc.ClientStream
}

func (x *devicedServiceConnectClient) Send(m *ConnectResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *devicedServiceConnectClient) Recv() (*ConnectRequest, error) {
	m := new(ConnectRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *devicedServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.deviced.DevicedService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevicedServiceServer is the server API for DevicedService service.
type DevicedServiceServer interface {
	CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error)
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*empty.Empty, error)
	PatchDevice(context.Context, *PatchDeviceRequest) (*PatchDeviceResponse, error)
	GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceResponse, error)
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	GetDeviceByModule(context.Context, *GetDeviceByModuleRequest) (*GetDeviceByModuleResponse, error)
	// Calling
	UnaryCall(context.Context, *UnaryCallRequest) (*UnaryCallResponse, error)
	StreamCall(DevicedService_StreamCallServer) error
	// Flow
	PullFrameFromFlow(*PullFrameFromFlowRequest, DevicedService_PullFrameFromFlowServer) error
	PushFrameToFlow(DevicedService_PushFrameToFlowServer) error
	QueryFramesFromFlow(context.Context, *QueryFramesFromFlowRequest) (*QueryFramesFromFlowResponse, error)
	// Flow Set
	CreateFlowSet(context.Context, *CreateFlowSetRequest) (*CreateFlowSetResponse, error)
	DeleteFlowSet(context.Context, *DeleteFlowSetRequest) (*empty.Empty, error)
	PatchFlowSet(context.Context, *PatchFlowSetRequest) (*PatchFlowSetResponse, error)
	GetFlowSet(context.Context, *GetFlowSetRequest) (*GetFlowSetResponse, error)
	ListFlowSets(context.Context, *ListFlowSetsRequest) (*ListFlowSetsResponse, error)
	AddFlowsToFlowSet(context.Context, *AddFlowsToFlowSetRequest) (*empty.Empty, error)
	RemoveFlowsFromFlowSet(context.Context, *RemoveFlowsFromFlowSetRequest) (*empty.Empty, error)
	PullFrameFromFlowSet(*PullFrameFromFlowSetRequest, DevicedService_PullFrameFromFlowSetServer) error
	QueryFramesFromFlowSet(context.Context, *QueryFramesFromFlowSetRequest) (*QueryFramesFromFlowSetResponse, error)
	// Simple Storage
	PutObject(context.Context, *PutObjectRequest) (*empty.Empty, error)
	PutObjectStreaming(DevicedService_PutObjectStreamingServer) error
	RemoveObject(context.Context, *RemoveObjectRequest) (*empty.Empty, error)
	RenameObject(context.Context, *RenameObjectRequest) (*empty.Empty, error)
	GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error)
	GetObjectContent(context.Context, *GetObjectContentRequest) (*GetObjectContentResponse, error)
	GetObjectStreamingContent(*GetObjectStreamingContentRequest, DevicedService_GetObjectStreamingContentServer) error
	ListObjects(context.Context, *ListObjectsRequest) (*ListObjectsResponse, error)
	// internal device only
	ShowDevice(context.Context, *empty.Empty) (*ShowDeviceResponse, error)
	Connect(DevicedService_ConnectServer) error
	Heartbeat(context.Context, *HeartbeatRequest) (*empty.Empty, error)
}

// UnimplementedDevicedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDevicedServiceServer struct {
}

func (*UnimplementedDevicedServiceServer) CreateDevice(ctx context.Context, req *CreateDeviceRequest) (*CreateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (*UnimplementedDevicedServiceServer) DeleteDevice(ctx context.Context, req *DeleteDeviceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (*UnimplementedDevicedServiceServer) PatchDevice(ctx context.Context, req *PatchDeviceRequest) (*PatchDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDevice not implemented")
}
func (*UnimplementedDevicedServiceServer) GetDevice(ctx context.Context, req *GetDeviceRequest) (*GetDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (*UnimplementedDevicedServiceServer) ListDevices(ctx context.Context, req *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (*UnimplementedDevicedServiceServer) GetDeviceByModule(ctx context.Context, req *GetDeviceByModuleRequest) (*GetDeviceByModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceByModule not implemented")
}
func (*UnimplementedDevicedServiceServer) UnaryCall(ctx context.Context, req *UnaryCallRequest) (*UnaryCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryCall not implemented")
}
func (*UnimplementedDevicedServiceServer) StreamCall(srv DevicedService_StreamCallServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCall not implemented")
}
func (*UnimplementedDevicedServiceServer) PullFrameFromFlow(req *PullFrameFromFlowRequest, srv DevicedService_PullFrameFromFlowServer) error {
	return status.Errorf(codes.Unimplemented, "method PullFrameFromFlow not implemented")
}
func (*UnimplementedDevicedServiceServer) PushFrameToFlow(srv DevicedService_PushFrameToFlowServer) error {
	return status.Errorf(codes.Unimplemented, "method PushFrameToFlow not implemented")
}
func (*UnimplementedDevicedServiceServer) QueryFramesFromFlow(ctx context.Context, req *QueryFramesFromFlowRequest) (*QueryFramesFromFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFramesFromFlow not implemented")
}
func (*UnimplementedDevicedServiceServer) CreateFlowSet(ctx context.Context, req *CreateFlowSetRequest) (*CreateFlowSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlowSet not implemented")
}
func (*UnimplementedDevicedServiceServer) DeleteFlowSet(ctx context.Context, req *DeleteFlowSetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlowSet not implemented")
}
func (*UnimplementedDevicedServiceServer) PatchFlowSet(ctx context.Context, req *PatchFlowSetRequest) (*PatchFlowSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchFlowSet not implemented")
}
func (*UnimplementedDevicedServiceServer) GetFlowSet(ctx context.Context, req *GetFlowSetRequest) (*GetFlowSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlowSet not implemented")
}
func (*UnimplementedDevicedServiceServer) ListFlowSets(ctx context.Context, req *ListFlowSetsRequest) (*ListFlowSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlowSets not implemented")
}
func (*UnimplementedDevicedServiceServer) AddFlowsToFlowSet(ctx context.Context, req *AddFlowsToFlowSetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFlowsToFlowSet not implemented")
}
func (*UnimplementedDevicedServiceServer) RemoveFlowsFromFlowSet(ctx context.Context, req *RemoveFlowsFromFlowSetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFlowsFromFlowSet not implemented")
}
func (*UnimplementedDevicedServiceServer) PullFrameFromFlowSet(req *PullFrameFromFlowSetRequest, srv DevicedService_PullFrameFromFlowSetServer) error {
	return status.Errorf(codes.Unimplemented, "method PullFrameFromFlowSet not implemented")
}
func (*UnimplementedDevicedServiceServer) QueryFramesFromFlowSet(ctx context.Context, req *QueryFramesFromFlowSetRequest) (*QueryFramesFromFlowSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFramesFromFlowSet not implemented")
}
func (*UnimplementedDevicedServiceServer) PutObject(ctx context.Context, req *PutObjectRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutObject not implemented")
}
func (*UnimplementedDevicedServiceServer) PutObjectStreaming(srv DevicedService_PutObjectStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method PutObjectStreaming not implemented")
}
func (*UnimplementedDevicedServiceServer) RemoveObject(ctx context.Context, req *RemoveObjectRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveObject not implemented")
}
func (*UnimplementedDevicedServiceServer) RenameObject(ctx context.Context, req *RenameObjectRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameObject not implemented")
}
func (*UnimplementedDevicedServiceServer) GetObject(ctx context.Context, req *GetObjectRequest) (*GetObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (*UnimplementedDevicedServiceServer) GetObjectContent(ctx context.Context, req *GetObjectContentRequest) (*GetObjectContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectContent not implemented")
}
func (*UnimplementedDevicedServiceServer) GetObjectStreamingContent(req *GetObjectStreamingContentRequest, srv DevicedService_GetObjectStreamingContentServer) error {
	return status.Errorf(codes.Unimplemented, "method GetObjectStreamingContent not implemented")
}
func (*UnimplementedDevicedServiceServer) ListObjects(ctx context.Context, req *ListObjectsRequest) (*ListObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjects not implemented")
}
func (*UnimplementedDevicedServiceServer) ShowDevice(ctx context.Context, req *empty.Empty) (*ShowDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowDevice not implemented")
}
func (*UnimplementedDevicedServiceServer) Connect(srv DevicedService_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedDevicedServiceServer) Heartbeat(ctx context.Context, req *HeartbeatRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}

func RegisterDevicedServiceServer(s *grpc.Server, srv DevicedServiceServer) {
	s.RegisterService(&_DevicedService_serviceDesc, srv)
}

func _DevicedService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_PatchDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).PatchDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/PatchDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).PatchDevice(ctx, req.(*PatchDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_GetDeviceByModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceByModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).GetDeviceByModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/GetDeviceByModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).GetDeviceByModule(ctx, req.(*GetDeviceByModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_UnaryCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).UnaryCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/UnaryCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).UnaryCall(ctx, req.(*UnaryCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_StreamCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DevicedServiceServer).StreamCall(&devicedServiceStreamCallServer{stream})
}

type DevicedService_StreamCallServer interface {
	Send(*StreamCallResponse) error
	Recv() (*StreamCallRequest, error)
	grpc.ServerStream
}

type devicedServiceStreamCallServer struct {
	grpc.ServerStream
}

func (x *devicedServiceStreamCallServer) Send(m *StreamCallResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *devicedServiceStreamCallServer) Recv() (*StreamCallRequest, error) {
	m := new(StreamCallRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DevicedService_PullFrameFromFlow_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullFrameFromFlowRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DevicedServiceServer).PullFrameFromFlow(m, &devicedServicePullFrameFromFlowServer{stream})
}

type DevicedService_PullFrameFromFlowServer interface {
	Send(*PullFrameFromFlowResponse) error
	grpc.ServerStream
}

type devicedServicePullFrameFromFlowServer struct {
	grpc.ServerStream
}

func (x *devicedServicePullFrameFromFlowServer) Send(m *PullFrameFromFlowResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DevicedService_PushFrameToFlow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DevicedServiceServer).PushFrameToFlow(&devicedServicePushFrameToFlowServer{stream})
}

type DevicedService_PushFrameToFlowServer interface {
	Send(*PushFrameToFlowResponse) error
	Recv() (*PushFrameToFlowRequest, error)
	grpc.ServerStream
}

type devicedServicePushFrameToFlowServer struct {
	grpc.ServerStream
}

func (x *devicedServicePushFrameToFlowServer) Send(m *PushFrameToFlowResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *devicedServicePushFrameToFlowServer) Recv() (*PushFrameToFlowRequest, error) {
	m := new(PushFrameToFlowRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DevicedService_QueryFramesFromFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFramesFromFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).QueryFramesFromFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/QueryFramesFromFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).QueryFramesFromFlow(ctx, req.(*QueryFramesFromFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_CreateFlowSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlowSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).CreateFlowSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/CreateFlowSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).CreateFlowSet(ctx, req.(*CreateFlowSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_DeleteFlowSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlowSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).DeleteFlowSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/DeleteFlowSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).DeleteFlowSet(ctx, req.(*DeleteFlowSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_PatchFlowSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchFlowSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).PatchFlowSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/PatchFlowSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).PatchFlowSet(ctx, req.(*PatchFlowSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_GetFlowSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlowSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).GetFlowSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/GetFlowSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).GetFlowSet(ctx, req.(*GetFlowSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_ListFlowSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlowSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).ListFlowSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/ListFlowSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).ListFlowSets(ctx, req.(*ListFlowSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_AddFlowsToFlowSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFlowsToFlowSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).AddFlowsToFlowSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/AddFlowsToFlowSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).AddFlowsToFlowSet(ctx, req.(*AddFlowsToFlowSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_RemoveFlowsFromFlowSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFlowsFromFlowSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).RemoveFlowsFromFlowSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/RemoveFlowsFromFlowSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).RemoveFlowsFromFlowSet(ctx, req.(*RemoveFlowsFromFlowSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_PullFrameFromFlowSet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullFrameFromFlowSetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DevicedServiceServer).PullFrameFromFlowSet(m, &devicedServicePullFrameFromFlowSetServer{stream})
}

type DevicedService_PullFrameFromFlowSetServer interface {
	Send(*PullFrameFromFlowSetResponse) error
	grpc.ServerStream
}

type devicedServicePullFrameFromFlowSetServer struct {
	grpc.ServerStream
}

func (x *devicedServicePullFrameFromFlowSetServer) Send(m *PullFrameFromFlowSetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DevicedService_QueryFramesFromFlowSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFramesFromFlowSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).QueryFramesFromFlowSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/QueryFramesFromFlowSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).QueryFramesFromFlowSet(ctx, req.(*QueryFramesFromFlowSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_PutObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).PutObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/PutObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).PutObject(ctx, req.(*PutObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_PutObjectStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DevicedServiceServer).PutObjectStreaming(&devicedServicePutObjectStreamingServer{stream})
}

type DevicedService_PutObjectStreamingServer interface {
	Send(*PutObjectStreamingResponse) error
	Recv() (*PutObjectStreamingRequest, error)
	grpc.ServerStream
}

type devicedServicePutObjectStreamingServer struct {
	grpc.ServerStream
}

func (x *devicedServicePutObjectStreamingServer) Send(m *PutObjectStreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *devicedServicePutObjectStreamingServer) Recv() (*PutObjectStreamingRequest, error) {
	m := new(PutObjectStreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DevicedService_RemoveObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).RemoveObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/RemoveObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).RemoveObject(ctx, req.(*RemoveObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_RenameObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).RenameObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/RenameObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).RenameObject(ctx, req.(*RenameObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/GetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).GetObject(ctx, req.(*GetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_GetObjectContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).GetObjectContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/GetObjectContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).GetObjectContent(ctx, req.(*GetObjectContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_GetObjectStreamingContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetObjectStreamingContentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DevicedServiceServer).GetObjectStreamingContent(m, &devicedServiceGetObjectStreamingContentServer{stream})
}

type DevicedService_GetObjectStreamingContentServer interface {
	Send(*GetObjectStreamingContentResponse) error
	grpc.ServerStream
}

type devicedServiceGetObjectStreamingContentServer struct {
	grpc.ServerStream
}

func (x *devicedServiceGetObjectStreamingContentServer) Send(m *GetObjectStreamingContentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DevicedService_ListObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).ListObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/ListObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).ListObjects(ctx, req.(*ListObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_ShowDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).ShowDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/ShowDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).ShowDevice(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicedService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DevicedServiceServer).Connect(&devicedServiceConnectServer{stream})
}

type DevicedService_ConnectServer interface {
	Send(*ConnectRequest) error
	Recv() (*ConnectResponse, error)
	grpc.ServerStream
}

type devicedServiceConnectServer struct {
	grpc.ServerStream
}

func (x *devicedServiceConnectServer) Send(m *ConnectRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *devicedServiceConnectServer) Recv() (*ConnectResponse, error) {
	m := new(ConnectResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DevicedService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicedServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.deviced.DevicedService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicedServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DevicedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.deviced.DevicedService",
	HandlerType: (*DevicedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDevice",
			Handler:    _DevicedService_CreateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _DevicedService_DeleteDevice_Handler,
		},
		{
			MethodName: "PatchDevice",
			Handler:    _DevicedService_PatchDevice_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _DevicedService_GetDevice_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _DevicedService_ListDevices_Handler,
		},
		{
			MethodName: "GetDeviceByModule",
			Handler:    _DevicedService_GetDeviceByModule_Handler,
		},
		{
			MethodName: "UnaryCall",
			Handler:    _DevicedService_UnaryCall_Handler,
		},
		{
			MethodName: "QueryFramesFromFlow",
			Handler:    _DevicedService_QueryFramesFromFlow_Handler,
		},
		{
			MethodName: "CreateFlowSet",
			Handler:    _DevicedService_CreateFlowSet_Handler,
		},
		{
			MethodName: "DeleteFlowSet",
			Handler:    _DevicedService_DeleteFlowSet_Handler,
		},
		{
			MethodName: "PatchFlowSet",
			Handler:    _DevicedService_PatchFlowSet_Handler,
		},
		{
			MethodName: "GetFlowSet",
			Handler:    _DevicedService_GetFlowSet_Handler,
		},
		{
			MethodName: "ListFlowSets",
			Handler:    _DevicedService_ListFlowSets_Handler,
		},
		{
			MethodName: "AddFlowsToFlowSet",
			Handler:    _DevicedService_AddFlowsToFlowSet_Handler,
		},
		{
			MethodName: "RemoveFlowsFromFlowSet",
			Handler:    _DevicedService_RemoveFlowsFromFlowSet_Handler,
		},
		{
			MethodName: "QueryFramesFromFlowSet",
			Handler:    _DevicedService_QueryFramesFromFlowSet_Handler,
		},
		{
			MethodName: "PutObject",
			Handler:    _DevicedService_PutObject_Handler,
		},
		{
			MethodName: "RemoveObject",
			Handler:    _DevicedService_RemoveObject_Handler,
		},
		{
			MethodName: "RenameObject",
			Handler:    _DevicedService_RenameObject_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _DevicedService_GetObject_Handler,
		},
		{
			MethodName: "GetObjectContent",
			Handler:    _DevicedService_GetObjectContent_Handler,
		},
		{
			MethodName: "ListObjects",
			Handler:    _DevicedService_ListObjects_Handler,
		},
		{
			MethodName: "ShowDevice",
			Handler:    _DevicedService_ShowDevice_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _DevicedService_Heartbeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCall",
			Handler:       _DevicedService_StreamCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PullFrameFromFlow",
			Handler:       _DevicedService_PullFrameFromFlow_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushFrameToFlow",
			Handler:       _DevicedService_PushFrameToFlow_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PullFrameFromFlowSet",
			Handler:       _DevicedService_PullFrameFromFlowSet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutObjectStreaming",
			Handler:       _DevicedService_PutObjectStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetObjectStreamingContent",
			Handler:       _DevicedService_GetObjectStreamingContent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Connect",
			Handler:       _DevicedService_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
