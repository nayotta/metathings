// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: connect.proto

package deviced

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _connect_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ConnectResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ConnectResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SessionId

	// no validation rules for Kind

	switch m.Union.(type) {

	case *ConnectResponse_UnaryCall:

		if v, ok := interface{}(m.GetUnaryCall()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectResponseValidationError{
					field:  "UnaryCall",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ConnectResponse_StreamCall:

		if v, ok := interface{}(m.GetStreamCall()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectResponseValidationError{
					field:  "StreamCall",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ConnectResponse_Err:

		if v, ok := interface{}(m.GetErr()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectResponseValidationError{
					field:  "Err",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ConnectResponseValidationError is the validation error returned by
// ConnectResponse.Validate if the designated constraints aren't met.
type ConnectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectResponseValidationError) ErrorName() string { return "ConnectResponseValidationError" }

// Error satisfies the builtin error interface
func (e ConnectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectResponseValidationError{}

// Validate checks the field values on ConnectRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ConnectRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSessionId() == nil {
		return ConnectRequestValidationError{
			field:  "SessionId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSessionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConnectRequestValidationError{
				field:  "SessionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := ConnectMessageKind_name[int32(m.GetKind())]; !ok {
		return ConnectRequestValidationError{
			field:  "Kind",
			reason: "value must be one of the defined enum values",
		}
	}

	switch m.Union.(type) {

	case *ConnectRequest_UnaryCall:

		if v, ok := interface{}(m.GetUnaryCall()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectRequestValidationError{
					field:  "UnaryCall",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ConnectRequest_StreamCall:

		if v, ok := interface{}(m.GetStreamCall()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectRequestValidationError{
					field:  "StreamCall",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ConnectRequestValidationError is the validation error returned by
// ConnectRequest.Validate if the designated constraints aren't met.
type ConnectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectRequestValidationError) ErrorName() string { return "ConnectRequestValidationError" }

// Error satisfies the builtin error interface
func (e ConnectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectRequestValidationError{}
