// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: model.proto

package deviced

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	kind "github.com/nayotta/metathings/proto/constant/kind"

	constant "github.com/nayotta/metathings/proto/constant/state"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = kind.DeviceKind(0)

	_ = constant.DeviceState(0)

	_ = kind.DeviceKind(0)

	_ = constant.DeviceState(0)

	_ = constant.ModuleState(0)

	_ = constant.ModuleState(0)
)

// define the regex for a UUID once up-front
var _model_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Device with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Device) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Kind

	// no validation rules for State

	// no validation rules for Name

	// no validation rules for Alias

	// no validation rules for Extra

	for idx, item := range m.GetModules() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeviceValidationError{
					field:  fmt.Sprintf("Modules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetHeartbeatAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceValidationError{
				field:  "HeartbeatAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFlows() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeviceValidationError{
					field:  fmt.Sprintf("Flows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DeviceValidationError is the validation error returned by Device.Validate if
// the designated constraints aren't met.
type DeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceValidationError) ErrorName() string { return "DeviceValidationError" }

// Error satisfies the builtin error interface
func (e DeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceValidationError{}

// Validate checks the field values on OpDevice with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OpDevice) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpDeviceValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Kind

	// no validation rules for State

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpDeviceValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAlias()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpDeviceValidationError{
				field:  "Alias",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetExtra() {
		_ = val

		// no validation rules for Extra[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OpDeviceValidationError{
					field:  fmt.Sprintf("Extra[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetModules() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OpDeviceValidationError{
					field:  fmt.Sprintf("Modules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetHeartbeatAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpDeviceValidationError{
				field:  "HeartbeatAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFlows() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OpDeviceValidationError{
					field:  fmt.Sprintf("Flows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// OpDeviceValidationError is the validation error returned by
// OpDevice.Validate if the designated constraints aren't met.
type OpDeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpDeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpDeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpDeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpDeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpDeviceValidationError) ErrorName() string { return "OpDeviceValidationError" }

// Error satisfies the builtin error interface
func (e OpDeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpDevice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpDeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpDeviceValidationError{}

// Validate checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Module) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for State

	// no validation rules for DeviceId

	// no validation rules for Endpoint

	// no validation rules for Component

	// no validation rules for Name

	// no validation rules for Alias

	if v, ok := interface{}(m.GetHeartbeatAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModuleValidationError{
				field:  "HeartbeatAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ModuleValidationError is the validation error returned by Module.Validate if
// the designated constraints aren't met.
type ModuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleValidationError) ErrorName() string { return "ModuleValidationError" }

// Error satisfies the builtin error interface
func (e ModuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleValidationError{}

// Validate checks the field values on OpModule with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OpModule) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpModuleValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for State

	if v, ok := interface{}(m.GetDeviceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpModuleValidationError{
				field:  "DeviceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndpoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpModuleValidationError{
				field:  "Endpoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetComponent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpModuleValidationError{
				field:  "Component",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpModuleValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAlias()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpModuleValidationError{
				field:  "Alias",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetHeartbeatAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpModuleValidationError{
				field:  "HeartbeatAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OpModuleValidationError is the validation error returned by
// OpModule.Validate if the designated constraints aren't met.
type OpModuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpModuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpModuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpModuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpModuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpModuleValidationError) ErrorName() string { return "OpModuleValidationError" }

// Error satisfies the builtin error interface
func (e OpModuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpModule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpModuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpModuleValidationError{}

// Validate checks the field values on Flow with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Flow) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for DeviceId

	// no validation rules for Name

	// no validation rules for Alias

	return nil
}

// FlowValidationError is the validation error returned by Flow.Validate if the
// designated constraints aren't met.
type FlowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlowValidationError) ErrorName() string { return "FlowValidationError" }

// Error satisfies the builtin error interface
func (e FlowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlowValidationError{}

// Validate checks the field values on OpFlow with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OpFlow) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpFlowValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeviceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpFlowValidationError{
				field:  "DeviceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpFlowValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAlias()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpFlowValidationError{
				field:  "Alias",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OpFlowValidationError is the validation error returned by OpFlow.Validate if
// the designated constraints aren't met.
type OpFlowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpFlowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpFlowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpFlowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpFlowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpFlowValidationError) ErrorName() string { return "OpFlowValidationError" }

// Error satisfies the builtin error interface
func (e OpFlowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpFlow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpFlowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpFlowValidationError{}

// Validate checks the field values on Frame with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Frame) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FrameValidationError{
				field:  "Ts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FrameValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FrameValidationError is the validation error returned by Frame.Validate if
// the designated constraints aren't met.
type FrameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FrameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FrameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FrameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FrameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FrameValidationError) ErrorName() string { return "FrameValidationError" }

// Error satisfies the builtin error interface
func (e FrameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFrame.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FrameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FrameValidationError{}

// Validate checks the field values on OpFrame with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OpFrame) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpFrameValidationError{
				field:  "Ts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpFrameValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OpFrameValidationError is the validation error returned by OpFrame.Validate
// if the designated constraints aren't met.
type OpFrameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpFrameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpFrameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpFrameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpFrameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpFrameValidationError) ErrorName() string { return "OpFrameValidationError" }

// Error satisfies the builtin error interface
func (e OpFrameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpFrame.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpFrameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpFrameValidationError{}

// Validate checks the field values on FlowSet with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FlowSet) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Alias

	for idx, item := range m.GetFlows() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FlowSetValidationError{
					field:  fmt.Sprintf("Flows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// FlowSetValidationError is the validation error returned by FlowSet.Validate
// if the designated constraints aren't met.
type FlowSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlowSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlowSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlowSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlowSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlowSetValidationError) ErrorName() string { return "FlowSetValidationError" }

// Error satisfies the builtin error interface
func (e FlowSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlowSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlowSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlowSetValidationError{}

// Validate checks the field values on OpFlowSet with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OpFlowSet) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpFlowSetValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpFlowSetValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAlias()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpFlowSetValidationError{
				field:  "Alias",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFlows() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OpFlowSetValidationError{
					field:  fmt.Sprintf("Flows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// OpFlowSetValidationError is the validation error returned by
// OpFlowSet.Validate if the designated constraints aren't met.
type OpFlowSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpFlowSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpFlowSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpFlowSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpFlowSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpFlowSetValidationError) ErrorName() string { return "OpFlowSetValidationError" }

// Error satisfies the builtin error interface
func (e OpFlowSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpFlowSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpFlowSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpFlowSetValidationError{}

// Validate checks the field values on Object with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Object) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectValidationError{
				field:  "Device",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Prefix

	// no validation rules for Name

	// no validation rules for Length

	// no validation rules for Etag

	if v, ok := interface{}(m.GetLastModified()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectValidationError{
				field:  "LastModified",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ObjectValidationError is the validation error returned by Object.Validate if
// the designated constraints aren't met.
type ObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectValidationError) ErrorName() string { return "ObjectValidationError" }

// Error satisfies the builtin error interface
func (e ObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectValidationError{}

// Validate checks the field values on OpObject with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OpObject) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpObjectValidationError{
				field:  "Device",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPrefix()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpObjectValidationError{
				field:  "Prefix",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpObjectValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLength()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpObjectValidationError{
				field:  "Length",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEtag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpObjectValidationError{
				field:  "Etag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLastModified()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpObjectValidationError{
				field:  "LastModified",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OpObjectValidationError is the validation error returned by
// OpObject.Validate if the designated constraints aren't met.
type OpObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpObjectValidationError) ErrorName() string { return "OpObjectValidationError" }

// Error satisfies the builtin error interface
func (e OpObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpObjectValidationError{}

// Validate checks the field values on ObjectChunk with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ObjectChunk) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Offset

	// no validation rules for Data

	// no validation rules for Length

	return nil
}

// ObjectChunkValidationError is the validation error returned by
// ObjectChunk.Validate if the designated constraints aren't met.
type ObjectChunkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectChunkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectChunkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectChunkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectChunkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectChunkValidationError) ErrorName() string { return "ObjectChunkValidationError" }

// Error satisfies the builtin error interface
func (e ObjectChunkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectChunk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectChunkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectChunkValidationError{}

// Validate checks the field values on ObjectChunks with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ObjectChunks) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetChunks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectChunksValidationError{
					field:  fmt.Sprintf("Chunks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ObjectChunksValidationError is the validation error returned by
// ObjectChunks.Validate if the designated constraints aren't met.
type ObjectChunksValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectChunksValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectChunksValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectChunksValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectChunksValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectChunksValidationError) ErrorName() string { return "ObjectChunksValidationError" }

// Error satisfies the builtin error interface
func (e ObjectChunksValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectChunks.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectChunksValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectChunksValidationError{}

// Validate checks the field values on OpObjectChunk with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OpObjectChunk) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetOffset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpObjectChunkValidationError{
				field:  "Offset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpObjectChunkValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLength()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpObjectChunkValidationError{
				field:  "Length",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OpObjectChunkValidationError is the validation error returned by
// OpObjectChunk.Validate if the designated constraints aren't met.
type OpObjectChunkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpObjectChunkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpObjectChunkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpObjectChunkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpObjectChunkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpObjectChunkValidationError) ErrorName() string { return "OpObjectChunkValidationError" }

// Error satisfies the builtin error interface
func (e OpObjectChunkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpObjectChunk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpObjectChunkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpObjectChunkValidationError{}

// Validate checks the field values on OpObjectChunks with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OpObjectChunks) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetChunks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OpObjectChunksValidationError{
					field:  fmt.Sprintf("Chunks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// OpObjectChunksValidationError is the validation error returned by
// OpObjectChunks.Validate if the designated constraints aren't met.
type OpObjectChunksValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpObjectChunksValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpObjectChunksValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpObjectChunksValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpObjectChunksValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpObjectChunksValidationError) ErrorName() string { return "OpObjectChunksValidationError" }

// Error satisfies the builtin error interface
func (e OpObjectChunksValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpObjectChunks.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpObjectChunksValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpObjectChunksValidationError{}

// Validate checks the field values on ErrorValue with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ErrorValue) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Component

	// no validation rules for Method

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// ErrorValueValidationError is the validation error returned by
// ErrorValue.Validate if the designated constraints aren't met.
type ErrorValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorValueValidationError) ErrorName() string { return "ErrorValueValidationError" }

// Error satisfies the builtin error interface
func (e ErrorValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorValueValidationError{}

// Validate checks the field values on OpUnaryCallValue with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *OpUnaryCallValue) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpUnaryCallValueValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetComponent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpUnaryCallValueValidationError{
				field:  "Component",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMethod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpUnaryCallValueValidationError{
				field:  "Method",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpUnaryCallValueValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OpUnaryCallValueValidationError is the validation error returned by
// OpUnaryCallValue.Validate if the designated constraints aren't met.
type OpUnaryCallValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpUnaryCallValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpUnaryCallValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpUnaryCallValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpUnaryCallValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpUnaryCallValueValidationError) ErrorName() string { return "OpUnaryCallValueValidationError" }

// Error satisfies the builtin error interface
func (e OpUnaryCallValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpUnaryCallValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpUnaryCallValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpUnaryCallValueValidationError{}

// Validate checks the field values on UnaryCallValue with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UnaryCallValue) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Component

	// no validation rules for Method

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnaryCallValueValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UnaryCallValueValidationError is the validation error returned by
// UnaryCallValue.Validate if the designated constraints aren't met.
type UnaryCallValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnaryCallValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnaryCallValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnaryCallValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnaryCallValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnaryCallValueValidationError) ErrorName() string { return "UnaryCallValueValidationError" }

// Error satisfies the builtin error interface
func (e UnaryCallValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnaryCallValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnaryCallValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnaryCallValueValidationError{}

// Validate checks the field values on OpStreamCallValue with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *OpStreamCallValue) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Union.(type) {

	case *OpStreamCallValue_Value:

		if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OpStreamCallValueValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *OpStreamCallValue_Config:

		if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OpStreamCallValueValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *OpStreamCallValue_ConfigAck:

		if v, ok := interface{}(m.GetConfigAck()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OpStreamCallValueValidationError{
					field:  "ConfigAck",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *OpStreamCallValue_Exit:

		if v, ok := interface{}(m.GetExit()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OpStreamCallValueValidationError{
					field:  "Exit",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// OpStreamCallValueValidationError is the validation error returned by
// OpStreamCallValue.Validate if the designated constraints aren't met.
type OpStreamCallValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpStreamCallValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpStreamCallValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpStreamCallValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpStreamCallValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpStreamCallValueValidationError) ErrorName() string {
	return "OpStreamCallValueValidationError"
}

// Error satisfies the builtin error interface
func (e OpStreamCallValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpStreamCallValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpStreamCallValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpStreamCallValueValidationError{}

// Validate checks the field values on StreamCallValue with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *StreamCallValue) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Union.(type) {

	case *StreamCallValue_Value:

		if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamCallValueValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamCallValue_Config:

		if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamCallValueValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamCallValue_ConfigAck:

		if v, ok := interface{}(m.GetConfigAck()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamCallValueValidationError{
					field:  "ConfigAck",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamCallValue_Exit:

		if v, ok := interface{}(m.GetExit()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamCallValueValidationError{
					field:  "Exit",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// StreamCallValueValidationError is the validation error returned by
// StreamCallValue.Validate if the designated constraints aren't met.
type StreamCallValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamCallValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamCallValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamCallValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamCallValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamCallValueValidationError) ErrorName() string { return "StreamCallValueValidationError" }

// Error satisfies the builtin error interface
func (e StreamCallValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamCallValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamCallValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamCallValueValidationError{}

// Validate checks the field values on OpStreamCallConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OpStreamCallConfig) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpStreamCallConfigValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetComponent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpStreamCallConfigValidationError{
				field:  "Component",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMethod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpStreamCallConfigValidationError{
				field:  "Method",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OpStreamCallConfigValidationError is the validation error returned by
// OpStreamCallConfig.Validate if the designated constraints aren't met.
type OpStreamCallConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpStreamCallConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpStreamCallConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpStreamCallConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpStreamCallConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpStreamCallConfigValidationError) ErrorName() string {
	return "OpStreamCallConfigValidationError"
}

// Error satisfies the builtin error interface
func (e OpStreamCallConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpStreamCallConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpStreamCallConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpStreamCallConfigValidationError{}

// Validate checks the field values on StreamCallConfig with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *StreamCallConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Component

	// no validation rules for Method

	return nil
}

// StreamCallConfigValidationError is the validation error returned by
// StreamCallConfig.Validate if the designated constraints aren't met.
type StreamCallConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamCallConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamCallConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamCallConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamCallConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamCallConfigValidationError) ErrorName() string { return "StreamCallConfigValidationError" }

// Error satisfies the builtin error interface
func (e StreamCallConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamCallConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamCallConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamCallConfigValidationError{}

// Validate checks the field values on OpStreamCallConfigAck with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OpStreamCallConfigAck) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// OpStreamCallConfigAckValidationError is the validation error returned by
// OpStreamCallConfigAck.Validate if the designated constraints aren't met.
type OpStreamCallConfigAckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpStreamCallConfigAckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpStreamCallConfigAckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpStreamCallConfigAckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpStreamCallConfigAckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpStreamCallConfigAckValidationError) ErrorName() string {
	return "OpStreamCallConfigAckValidationError"
}

// Error satisfies the builtin error interface
func (e OpStreamCallConfigAckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpStreamCallConfigAck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpStreamCallConfigAckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpStreamCallConfigAckValidationError{}

// Validate checks the field values on StreamCallConfigAck with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StreamCallConfigAck) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// StreamCallConfigAckValidationError is the validation error returned by
// StreamCallConfigAck.Validate if the designated constraints aren't met.
type StreamCallConfigAckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamCallConfigAckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamCallConfigAckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamCallConfigAckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamCallConfigAckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamCallConfigAckValidationError) ErrorName() string {
	return "StreamCallConfigAckValidationError"
}

// Error satisfies the builtin error interface
func (e StreamCallConfigAckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamCallConfigAck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamCallConfigAckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamCallConfigAckValidationError{}

// Validate checks the field values on OpStreamCallExit with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *OpStreamCallExit) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// OpStreamCallExitValidationError is the validation error returned by
// OpStreamCallExit.Validate if the designated constraints aren't met.
type OpStreamCallExitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpStreamCallExitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpStreamCallExitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpStreamCallExitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpStreamCallExitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpStreamCallExitValidationError) ErrorName() string { return "OpStreamCallExitValidationError" }

// Error satisfies the builtin error interface
func (e OpStreamCallExitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpStreamCallExit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpStreamCallExitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpStreamCallExitValidationError{}

// Validate checks the field values on StreamCallExit with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StreamCallExit) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// StreamCallExitValidationError is the validation error returned by
// StreamCallExit.Validate if the designated constraints aren't met.
type StreamCallExitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamCallExitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamCallExitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamCallExitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamCallExitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamCallExitValidationError) ErrorName() string { return "StreamCallExitValidationError" }

// Error satisfies the builtin error interface
func (e StreamCallExitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamCallExit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamCallExitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamCallExitValidationError{}

// Validate checks the field values on OpDescriptor with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OpDescriptor) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSha1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpDescriptorValidationError{
				field:  "Sha1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpDescriptorValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OpDescriptorValidationError is the validation error returned by
// OpDescriptor.Validate if the designated constraints aren't met.
type OpDescriptorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpDescriptorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpDescriptorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpDescriptorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpDescriptorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpDescriptorValidationError) ErrorName() string { return "OpDescriptorValidationError" }

// Error satisfies the builtin error interface
func (e OpDescriptorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpDescriptor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpDescriptorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpDescriptorValidationError{}

// Validate checks the field values on Descriptor with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Descriptor) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Sha1

	// no validation rules for Body

	return nil
}

// DescriptorValidationError is the validation error returned by
// Descriptor.Validate if the designated constraints aren't met.
type DescriptorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescriptorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescriptorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescriptorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescriptorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescriptorValidationError) ErrorName() string { return "DescriptorValidationError" }

// Error satisfies the builtin error interface
func (e DescriptorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescriptor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescriptorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescriptorValidationError{}

// Validate checks the field values on OpConfig with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OpConfig) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpConfigValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAlias()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpConfigValidationError{
				field:  "Alias",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpConfigValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OpConfigValidationError is the validation error returned by
// OpConfig.Validate if the designated constraints aren't met.
type OpConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpConfigValidationError) ErrorName() string { return "OpConfigValidationError" }

// Error satisfies the builtin error interface
func (e OpConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpConfigValidationError{}

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Config) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Alias

	if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValidationError) ErrorName() string { return "ConfigValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValidationError{}

// Validate checks the field values on OpFirmwareHub with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OpFirmwareHub) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpFirmwareHubValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAlias()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpFirmwareHubValidationError{
				field:  "Alias",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpFirmwareHubValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDevices() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OpFirmwareHubValidationError{
					field:  fmt.Sprintf("Devices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFirmwareDescriptors() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OpFirmwareHubValidationError{
					field:  fmt.Sprintf("FirmwareDescriptors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// OpFirmwareHubValidationError is the validation error returned by
// OpFirmwareHub.Validate if the designated constraints aren't met.
type OpFirmwareHubValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpFirmwareHubValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpFirmwareHubValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpFirmwareHubValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpFirmwareHubValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpFirmwareHubValidationError) ErrorName() string { return "OpFirmwareHubValidationError" }

// Error satisfies the builtin error interface
func (e OpFirmwareHubValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpFirmwareHub.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpFirmwareHubValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpFirmwareHubValidationError{}

// Validate checks the field values on FirmwareHub with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FirmwareHub) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Alias

	// no validation rules for Description

	for idx, item := range m.GetDevices() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FirmwareHubValidationError{
					field:  fmt.Sprintf("Devices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFirmwareDescriptors() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FirmwareHubValidationError{
					field:  fmt.Sprintf("FirmwareDescriptors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// FirmwareHubValidationError is the validation error returned by
// FirmwareHub.Validate if the designated constraints aren't met.
type FirmwareHubValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FirmwareHubValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FirmwareHubValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FirmwareHubValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FirmwareHubValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FirmwareHubValidationError) ErrorName() string { return "FirmwareHubValidationError" }

// Error satisfies the builtin error interface
func (e FirmwareHubValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFirmwareHub.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FirmwareHubValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FirmwareHubValidationError{}

// Validate checks the field values on OpFirmwareDescriptor with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OpFirmwareDescriptor) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpFirmwareDescriptorValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpFirmwareDescriptorValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpFirmwareDescriptorValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDescriptor_()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpFirmwareDescriptorValidationError{
				field:  "Descriptor_",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OpFirmwareDescriptorValidationError is the validation error returned by
// OpFirmwareDescriptor.Validate if the designated constraints aren't met.
type OpFirmwareDescriptorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpFirmwareDescriptorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpFirmwareDescriptorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpFirmwareDescriptorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpFirmwareDescriptorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpFirmwareDescriptorValidationError) ErrorName() string {
	return "OpFirmwareDescriptorValidationError"
}

// Error satisfies the builtin error interface
func (e OpFirmwareDescriptorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpFirmwareDescriptor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpFirmwareDescriptorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpFirmwareDescriptorValidationError{}

// Validate checks the field values on FirmwareDescriptor with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FirmwareDescriptor) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FirmwareDescriptorValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDescriptor_()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FirmwareDescriptorValidationError{
				field:  "Descriptor_",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FirmwareDescriptorValidationError is the validation error returned by
// FirmwareDescriptor.Validate if the designated constraints aren't met.
type FirmwareDescriptorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FirmwareDescriptorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FirmwareDescriptorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FirmwareDescriptorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FirmwareDescriptorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FirmwareDescriptorValidationError) ErrorName() string {
	return "FirmwareDescriptorValidationError"
}

// Error satisfies the builtin error interface
func (e FirmwareDescriptorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFirmwareDescriptor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FirmwareDescriptorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FirmwareDescriptorValidationError{}
