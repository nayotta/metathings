// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package identityd2

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 1386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x59, 0xdd, 0x6b, 0x1b, 0x47,
	0x10, 0x8f, 0x5e, 0xda, 0x66, 0xec, 0xc4, 0xd2, 0xd9, 0x71, 0x52, 0x27, 0x6e, 0xda, 0xfc, 0x01,
	0x4a, 0x6b, 0xd9, 0xce, 0x97, 0x93, 0xd6, 0x76, 0x6c, 0x13, 0x28, 0x28, 0xd8, 0xa6, 0x0f, 0xfd,
	0x40, 0x9c, 0x75, 0x6b, 0xe9, 0xaa, 0x8f, 0x55, 0x6e, 0x4f, 0x32, 0x2a, 0x81, 0x42, 0x9f, 0x0a,
	0x85, 0x42, 0xa1, 0xd0, 0xa7, 0x3e, 0xf5, 0x4f, 0xeb, 0x3f, 0x12, 0xf6, 0x53, 0xbb, 0x7b, 0x0a,
	0x37, 0xab, 0x3c, 0xd9, 0xcc, 0xcc, 0x6f, 0x7e, 0x33, 0xb3, 0xb3, 0x33, 0x77, 0x27, 0xb8, 0xc1,
	0x48, 0x36, 0x49, 0xdb, 0xa4, 0x3e, 0xca, 0x68, 0x4e, 0xa3, 0xcf, 0xe3, 0xb4, 0x3e, 0x20, 0x79,
	0x9c, 0x77, 0xd3, 0x61, 0x87, 0xd5, 0xb5, 0x32, 0x4d, 0xc8, 0x30, 0x4f, 0xf3, 0x69, 0xb2, 0xb5,
	0x71, 0xb7, 0x43, 0x69, 0xa7, 0x4f, 0x1e, 0x0a, 0xfb, 0x8b, 0xf1, 0xe5, 0x43, 0x32, 0x18, 0xe5,
	0x53, 0x09, 0xdf, 0x58, 0x6d, 0x67, 0x24, 0xce, 0x49, 0x2b, 0xa1, 0x83, 0x38, 0x1d, 0x6a, 0x61,
	0x42, 0xfa, 0xc4, 0x17, 0x46, 0xa3, 0x38, 0x6f, 0x77, 0x5d, 0x59, 0xb5, 0x43, 0x72, 0xcf, 0xaa,
	0x9f, 0x32, 0x2d, 0x62, 0x1e, 0x47, 0xdc, 0xce, 0x53, 0xea, 0x73, 0x38, 0x42, 0xc5, 0xe1, 0xc8,
	0x04, 0x87, 0x6b, 0x25, 0x38, 0xa4, 0x48, 0x73, 0xd4, 0x14, 0x47, 0x46, 0xfb, 0x44, 0x8b, 0x14,
	0x83, 0x25, 0xaa, 0x4a, 0xff, 0x96, 0xe4, 0x26, 0xf7, 0x6e, 0x5b, 0x08, 0xdf, 0x5c, 0xa0, 0x3d,
	0xdf, 0x9d, 0x49, 0x5a, 0x97, 0x34, 0x6b, 0xc9, 0xba, 0x2a, 0xe5, 0x9d, 0x38, 0x49, 0x54, 0x24,
	0xad, 0x9c, 0xda, 0x8e, 0x36, 0x33, 0x32, 0xa0, 0x13, 0x9d, 0x5f, 0xeb, 0x32, 0xa3, 0x03, 0x5b,
	0xad, 0x6b, 0xe2, 0x78, 0xd3, 0x35, 0x71, 0x84, 0xaa, 0x26, 0x8e, 0x4c, 0xd4, 0xc4, 0x85, 0x8a,
	0x28, 0x85, 0x28, 0x35, 0xa1, 0xd7, 0x58, 0x97, 0x5e, 0xcd, 0x09, 0x98, 0xc7, 0xc1, 0xc3, 0x75,
	0x34, 0x3a, 0x60, 0xa1, 0x14, 0xe1, 0x3a, 0xea, 0x0d, 0x0e, 0x94, 0x12, 0x0e, 0x75, 0x0e, 0xfd,
	0xbe, 0x82, 0x2a, 0xb5, 0x00, 0xbb, 0x5d, 0xa1, 0xb2, 0xed, 0x64, 0x74, 0x3c, 0xd2, 0x32, 0x95,
	0xac, 0x2d, 0xab, 0xc9, 0x5c, 0x6d, 0xd1, 0x0a, 0x4f, 0xd5, 0xb1, 0x11, 0x99, 0x0a, 0x89, 0xce,
	0x73, 0xd3, 0x12, 0x89, 0x33, 0x62, 0xe3, 0x8b, 0x9f, 0x49, 0x3b, 0x57, 0xea, 0x7b, 0xbe, 0x9a,
	0xda, 0x5a, 0x59, 0x24, 0xc7, 0xdf, 0x6d, 0xbb, 0x48, 0x36, 0xf7, 0xbd, 0x42, 0x8d, 0x6c, 0xad,
	0x28, 0x91, 0xa2, 0xf6, 0x91, 0xba, 0x44, 0x5a, 0x5d, 0x00, 0x7f, 0xca, 0xc1, 0x74, 0x2e, 0xf6,
	0x33, 0x85, 0xa5, 0xef, 0x81, 0xde, 0x56, 0xd5, 0x6d, 0x67, 0x44, 0xdc, 0xfa, 0xb8, 0xaf, 0x15,
	0xaa, 0xc4, 0x05, 0xc5, 0xba, 0xac, 0x73, 0x41, 0xbe, 0xc6, 0x8b, 0x5d, 0xb4, 0x16, 0xf5, 0x9b,
	0x89, 0x75, 0x99, 0xbe, 0xf0, 0xe5, 0xc5, 0xfb, 0x71, 0x3f, 0x65, 0x6c, 0xcc, 0xcb, 0xd8, 0x23,
	0xc3, 0xd6, 0xc5, 0xb4, 0xe8, 0x7b, 0xd3, 0x33, 0x18, 0xc5, 0x8c, 0x5d, 0xd1, 0x2c, 0xd1, 0x25,
	0xf5, 0xd4, 0xe2, 0x1f, 0xdd, 0x40, 0x19, 0x99, 0xd0, 0x1e, 0x71, 0x64, 0x6b, 0x93, 0xb8, 0x9f,
	0x26, 0xbc, 0x18, 0xb6, 0xb4, 0xd6, 0xee, 0x92, 0x76, 0xcf, 0x11, 0xdd, 0x8a, 0xc7, 0x79, 0x97,
	0x66, 0xe9, 0x2f, 0x8e, 0xe5, 0xd6, 0xff, 0x0d, 0xa8, 0xbe, 0xd2, 0xa3, 0xf3, 0x4c, 0xce, 0xd2,
	0xe8, 0x57, 0x58, 0x3e, 0x14, 0x15, 0x7e, 0x29, 0x7a, 0x3a, 0xda, 0xa9, 0x97, 0xcd, 0xdc, 0xba,
	0x6d, 0x7f, 0x4a, 0xde, 0x8c, 0x09, 0xcb, 0x37, 0x76, 0x43, 0x61, 0x6c, 0x44, 0x87, 0x8c, 0x3c,
	0xb8, 0x16, 0xb5, 0x60, 0xf9, 0xa5, 0x38, 0x49, 0x7c, 0x00, 0xb6, 0xbd, 0x0e, 0x60, 0xbd, 0x2e,
	0x37, 0x41, 0x5d, 0x6f, 0x82, 0xfa, 0x11, 0xdf, 0x04, 0x0f, 0xae, 0x45, 0x6f, 0x61, 0xe9, 0x35,
	0xef, 0x08, 0xe5, 0x7f, 0xbb, 0xdc, 0xbf, 0x65, 0xae, 0xdd, 0xef, 0x04, 0xa2, 0x4c, 0x7a, 0x13,
	0xb8, 0x7e, 0x42, 0x72, 0xc5, 0xbd, 0x55, 0xee, 0xc5, 0x18, 0x6b, 0xe6, 0x46, 0x10, 0xc6, 0xf0,
	0xbe, 0x85, 0xa5, 0x6f, 0x53, 0xa6, 0xe4, 0x0c, 0x93, 0xb5, 0x65, 0x1e, 0x90, 0xb5, 0x83, 0x32,
	0xec, 0xa6, 0xab, 0xf6, 0xc5, 0x86, 0xc0, 0x77, 0x95, 0xb4, 0x0f, 0xee, 0x2a, 0x0d, 0x2b, 0x76,
	0x15, 0x3e, 0x00, 0xdb, 0x1e, 0xdf, 0x55, 0xca, 0x3f, 0xb6, 0xab, 0x5c, 0xf7, 0x3b, 0x81, 0x28,
	0xaf, 0xab, 0x14, 0x37, 0xae, 0xab, 0x5c, 0xe6, 0x46, 0x10, 0xc6, 0xef, 0x2a, 0x29, 0x47, 0x77,
	0x95, 0x32, 0x0f, 0xec, 0x2a, 0x83, 0x32, 0xec, 0x53, 0x00, 0x79, 0xdc, 0xa7, 0xb4, 0x4f, 0xa2,
	0x06, 0xb6, 0x39, 0xb8, 0xb5, 0xe6, 0xde, 0x0e, 0x03, 0x19, 0xea, 0x1f, 0x00, 0x64, 0x7f, 0x60,
	0xa9, 0x67, 0xd6, 0xe5, 0xbd, 0x34, 0x81, 0xeb, 0xe2, 0x98, 0x85, 0xef, 0x2d, 0x64, 0x4f, 0xd8,
	0xae, 0x1b, 0x41, 0x18, 0x93, 0xd4, 0x08, 0x3e, 0x3e, 0x21, 0xb9, 0x60, 0xfd, 0x12, 0xd5, 0x0f,
	0x36, 0xe7, 0x57, 0x01, 0x08, 0xbb, 0x6f, 0xf9, 0xd1, 0x72, 0x29, 0xc3, 0x64, 0x6a, 0x8c, 0x03,
	0x32, 0xb5, 0x30, 0x86, 0xf7, 0xaf, 0x0a, 0x44, 0x46, 0x7e, 0x4c, 0xb3, 0x23, 0x61, 0x1c, 0x3d,
	0x0b, 0xf0, 0x66, 0x50, 0x3a, 0x94, 0xbd, 0xc5, 0xc0, 0x26, 0x26, 0x02, 0x2b, 0xfb, 0x49, 0x22,
	0xbb, 0xfc, 0x9c, 0x8a, 0x53, 0x78, 0x5c, 0xee, 0xd2, 0x83, 0x94, 0x37, 0x17, 0x85, 0xb5, 0x53,
	0xf1, 0x88, 0x25, 0x61, 0xc7, 0x19, 0x1d, 0x08, 0xae, 0xe7, 0xe5, 0x5c, 0xf3, 0x70, 0xe5, 0x84,
	0x66, 0xf6, 0xab, 0x22, 0xa3, 0x67, 0xbf, 0x5b, 0xde, 0xdd, 0x50, 0x58, 0x71, 0xf6, 0xe3, 0x03,
	0xb0, 0xed, 0xf1, 0xb3, 0x5f, 0xf9, 0xc7, 0xce, 0x7e, 0xd7, 0xfd, 0x4e, 0x20, 0xca, 0x9b, 0xfd,
	0x8a, 0x1b, 0x37, 0xfb, 0x5d, 0xe6, 0x46, 0x10, 0xc6, 0xde, 0xe9, 0xbc, 0x9f, 0x8f, 0xd4, 0x6b,
	0x58, 0x84, 0x1c, 0xe3, 0xda, 0x3e, 0xe0, 0x5c, 0x5d, 0x98, 0x09, 0xe0, 0x47, 0x80, 0xb3, 0x2e,
	0xbd, 0x52, 0x99, 0xbf, 0xe7, 0x78, 0x30, 0x13, 0x7e, 0xe6, 0xa5, 0x70, 0x1d, 0x79, 0x8b, 0x9f,
	0x53, 0x45, 0x81, 0xbb, 0x8e, 0x36, 0x24, 0xe0, 0x3a, 0x72, 0x18, 0xbf, 0x54, 0x8a, 0x0b, 0x7d,
	0x1d, 0x5d, 0x5c, 0x39, 0x61, 0x0a, 0xb5, 0xfd, 0x24, 0x91, 0xd6, 0xe7, 0x54, 0x3d, 0x88, 0x3e,
	0x45, 0x65, 0xe6, 0x82, 0xca, 0xa9, 0x18, 0xac, 0xcb, 0x18, 0x25, 0x90, 0x47, 0xa9, 0xf8, 0xbe,
	0xc6, 0x66, 0xe7, 0x23, 0x51, 0x97, 0x51, 0xce, 0x81, 0x13, 0xfe, 0xd6, 0x18, 0xa1, 0x17, 0xbc,
	0x30, 0x0f, 0xb8, 0x8c, 0x0e, 0xca, 0x74, 0xcd, 0x4f, 0xb0, 0x24, 0x67, 0x07, 0x9a, 0xdd, 0x32,
	0x2f, 0x4f, 0x6e, 0x0a, 0x20, 0x86, 0x80, 0xf4, 0x8e, 0x5d, 0xf3, 0x8e, 0xf3, 0xed, 0x30, 0x90,
	0xc9, 0x8c, 0xc1, 0x27, 0x27, 0x24, 0x97, 0xc4, 0xb8, 0x5d, 0xef, 0xd0, 0x6e, 0x85, 0x40, 0xec,
	0x27, 0x3c, 0x7e, 0xf9, 0x85, 0x98, 0x45, 0xc8, 0x65, 0x2f, 0xad, 0x03, 0xf2, 0xb5, 0x41, 0x86,
	0xfa, 0x9f, 0x0a, 0xac, 0xcd, 0x14, 0xc7, 0x34, 0x3b, 0x93, 0x5f, 0x33, 0x30, 0x37, 0x73, 0x1e,
	0x4e, 0xc7, 0xf3, 0x62, 0x51, 0xb8, 0x89, 0xec, 0xef, 0x0a, 0xac, 0x3a, 0x26, 0x4d, 0x19, 0xd8,
	0x5e, 0xa0, 0xe7, 0xa6, 0x13, 0xd7, 0xf3, 0x05, 0xd1, 0xfe, 0x38, 0x56, 0x67, 0xf5, 0x81, 0xe3,
	0xb8, 0x70, 0x1c, 0x6d, 0xb8, 0x69, 0x66, 0xab, 0x6c, 0xc2, 0x47, 0x01, 0xd3, 0x18, 0x79, 0xbd,
	0x06, 0xb0, 0xea, 0x0e, 0x55, 0xc9, 0xb4, 0x17, 0x3a, 0x8b, 0x91, 0x74, 0x72, 0x14, 0xab, 0x03,
	0xd6, 0x69, 0xe1, 0x46, 0xb1, 0x0b, 0x0a, 0x18, 0xc5, 0x0a, 0x38, 0x4b, 0x0e, 0x3d, 0x8a, 0x7d,
	0x64, 0x39, 0x69, 0x07, 0xaa, 0xfb, 0x49, 0xd2, 0x74, 0xd2, 0x7b, 0x82, 0x4a, 0xaf, 0x19, 0x96,
	0xdd, 0x1b, 0xb8, 0x25, 0x63, 0x6c, 0x7a, 0xc9, 0xbd, 0xc0, 0x26, 0xd7, 0x0c, 0xcd, 0xed, 0x8f,
	0x0a, 0x54, 0xe5, 0x0a, 0x38, 0x34, 0x9f, 0xf9, 0x30, 0xc9, 0xf9, 0x18, 0xcd, 0xf4, 0x74, 0x11,
	0xa8, 0xb9, 0x1d, 0x1d, 0xa8, 0xca, 0x3d, 0x12, 0x16, 0x8c, 0x8f, 0x29, 0x4f, 0xfb, 0xf7, 0x0a,
	0xac, 0x88, 0xf5, 0x60, 0x11, 0x3d, 0x46, 0x6e, 0x94, 0x22, 0xcf, 0x93, 0x05, 0x90, 0x26, 0xe7,
	0xdf, 0x2a, 0x70, 0xe3, 0x84, 0xe4, 0x56, 0x20, 0xbb, 0xa8, 0x1d, 0x53, 0x0c, 0xe3, 0x51, 0x30,
	0xce, 0x04, 0xc1, 0xeb, 0xc1, 0xc7, 0xe2, 0x4c, 0xc9, 0x30, 0xf5, 0xf0, 0x20, 0x01, 0xf5, 0x28,
	0x20, 0x4d, 0x28, 0xff, 0x55, 0xe0, 0x8e, 0xa7, 0x9d, 0xbd, 0xd9, 0xee, 0x07, 0x7b, 0x2e, 0xbc,
	0xdf, 0x1e, 0x7c, 0x88, 0x0b, 0x13, 0xe5, 0xbf, 0x15, 0x58, 0x7f, 0xc5, 0xd8, 0x98, 0x9c, 0xd3,
	0x1e, 0x19, 0x1e, 0x4c, 0xad, 0xe3, 0x43, 0x4c, 0xa2, 0xf9, 0x48, 0x1d, 0xe1, 0x37, 0x8b, 0x3b,
	0x70, 0xd6, 0xbe, 0x6d, 0xf4, 0x5a, 0x7d, 0xa3, 0xc7, 0xac, 0xfd, 0x79, 0xb8, 0x80, 0xb5, 0x3f,
	0x1f, 0x6e, 0x22, 0xfb, 0xb3, 0x02, 0x35, 0xdb, 0x44, 0xfc, 0xc1, 0xac, 0x8b, 0x02, 0x48, 0xc7,
	0xf4, 0x6c, 0x21, 0xac, 0xfd, 0xac, 0x7b, 0x2a, 0x7e, 0x95, 0x90, 0x91, 0x6c, 0x63, 0x66, 0xad,
	0x31, 0x2f, 0x1f, 0x35, 0xfc, 0x7e, 0x7f, 0xa7, 0x7e, 0xe1, 0x90, 0x0c, 0x88, 0xfb, 0xed, 0x00,
	0x02, 0xee, 0xb7, 0x87, 0xb3, 0xbf, 0xf3, 0x1d, 0x76, 0x49, 0xbb, 0x27, 0x03, 0xc0, 0x7c, 0x62,
	0x34, 0xd6, 0xe5, 0x19, 0xf2, 0x67, 0x1a, 0xfd, 0xcb, 0x8c, 0x24, 0xc0, 0x3c, 0xd3, 0x38, 0x88,
	0x52, 0x92, 0x83, 0xe5, 0xef, 0x61, 0x86, 0xbe, 0xf8, 0x48, 0xe8, 0x1b, 0xef, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x53, 0x68, 0x2e, 0x26, 0x59, 0x1f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IdentitydServiceClient is the client API for IdentitydService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IdentitydServiceClient interface {
	//
	// @fn CreateDomain
	// @arg domain.id <optional> "domain id"
	// @arg domain.parent.id "domain parent id"
	// @arg domain.name "domain name"
	// @arg domain.alias <optional> "domain alias"
	// @arg domain.extra <optional> "extra data, json string"
	// @ret domain
	// @req
	//   {
	//     "domain": {
	//       "name": "test",
	//       "parent": {
	//         "id": "default"
	//       }
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error)
	//
	// @fn DeleteDomain
	// @arg domain.id "domain id"
	// @ret
	// @req
	//   {
	//     "domain": {
	//       "id": "domain-id"
	//     }
	//   }
	// @res
	//   { }
	// @err FailedPrecondition
	// @err Internal
	DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	// @fn PatchDomain
	// @arg domain.id "domain id"
	// @arg domain.alias <optional> "domain alias"
	// @arg domain.extra <optional> "extra data, json string"
	// @ret domain
	// @req
	//   {
	//     "domain": {
	//       "id": "domain-id"
	//       "alias": "renamed-domain"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchDomain(ctx context.Context, in *PatchDomainRequest, opts ...grpc.CallOption) (*PatchDomainResponse, error)
	//
	// @fn GetDomain
	// @arg domain.id "domain id"
	// @ret domain
	// @req
	//   {
	//     "domain": {
	//       "id": "domain-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err InvalidArgument
	// @err Internal
	GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*GetDomainResponse, error)
	//
	// @fn ListDomains
	// @arg domain.id <optional> "domain id"
	// @arg domain.name <optional> "domain name"
	// @arg domain.alias <optional> "domain alias"
	// @ret domains "list of domains"
	// @req
	//   { ... }
	// @res
	//   { ... }
	// @err Internal
	ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error)
	//
	// @fn CreateAction
	// @arg action.id <optional> "action id"
	// @arg action.name "action name, format: <service>:<action>, example: identtiyd2:create_action"
	// @arg action.alias <optional> "action alias"
	// @arg action.description <optional> "action description"
	// @arg action.extra <optional> "extra data, json string"
	// @ret action
	// @req
	//   {
	//     "action": {
	//       "name": "identityd2:create_action"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateAction(ctx context.Context, in *CreateActionRequest, opts ...grpc.CallOption) (*CreateActionResponse, error)
	//
	// @fn DeleteAction
	// @arg action.id "action id"
	// @ret
	// @req
	//   {
	//     "action": {
	//       "id": "action-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	DeleteAction(ctx context.Context, in *DeleteActionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	// @fn PatchAction
	// @arg action.id "action id"
	// @arg action.alias <optional> "action alias"
	// @arg action.description <optional> "action description"
	// @arg action.extra <optional> "extra data, json string"
	// @ret action
	// @req
	//   {
	//     "action": {
	//       "id": "action-id",
	//       "alias": "renamed-action-alias"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchAction(ctx context.Context, in *PatchActionRequest, opts ...grpc.CallOption) (*PatchActionResponse, error)
	//
	// @fn GetAction
	// @arg action.id "action id"
	// @ret action
	// @req
	//   {
	//     "action": {
	//       "id": "action-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	GetAction(ctx context.Context, in *GetActionRequest, opts ...grpc.CallOption) (*GetActionResponse, error)
	//
	// @fn ListActions
	// @unimplemented
	// @arg action.id <optional> "action id"
	// @arg action.name <optional> "action name"
	// @arg action.alias <optional> "action alias"
	// @ret actions "list of action"
	// @req
	//   { ... }
	// @res
	//   { ... }
	// @err Internal
	ListActions(ctx context.Context, in *ListActionsRequest, opts ...grpc.CallOption) (*ListActionsResponse, error)
	//
	// @fn CreateRole
	// @arg role.id <optional> "role id"
	// @arg role.name "role name"
	// @arg role.alias <optional> "role alias"
	// @arg role.description <optional> "role description"
	// @arg role.extra <optional> "extra data, json string"
	// @ret role
	// @req
	//   {
	//     "role": {
	//       "name": "admin"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	//
	// @fn DeleteRole
	// @arg role.id "role id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	// @fn PatchRole
	// @arg role.id "role id"
	// @arg role.alias <optional> "role alias"
	// @arg role.description <optional> "role description"
	// @arg role.extra <optional> "extra data, json string"
	// @ret role
	// @req
	//   {
	//     "role": {
	//       "id": "role-id",
	//       "alias": "renamed-role-alias"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchRole(ctx context.Context, in *PatchRoleRequest, opts ...grpc.CallOption) (*PatchRoleResponse, error)
	//
	// @fn GetRole
	// @arg role.id "role id"
	// @ret role
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err InvalidArgument
	// @err Internal
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error)
	//
	// @fn ListRoles
	// @arg role.id <optional> "role id"
	// @arg role.name <optional> "role name"
	// @arg role.alias <optional> "role alias"
	// @ret roles "list of role"
	// @req
	//   {
	//     "role": {
	//       "id": "role-id",
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	//
	// @fn ListRolesForEntity
	// @unimplemented
	ListRolesForEntity(ctx context.Context, in *ListRolesForEntityRequest, opts ...grpc.CallOption) (*ListRolesForEntityResponse, error)
	//
	// @fn AddActionToRole
	// @arg role.id "role id"
	// @arg action.id "action id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "action": {
	//       "id": "action-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	AddActionToRole(ctx context.Context, in *AddActionToRoleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	// @fn RemoveActionFromRole
	// @arg role.id "role id"
	// @arg action.id "action id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "action": {
	//       "id": "action-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	RemoveActionFromRole(ctx context.Context, in *RemoveActionFromRoleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	// @fn CreateEntity
	// @arg entity.id <optional> "entity id"
	// @arg entity.name "entity name"
	// @arg entity.alias <optional> "entity alias"
	// @arg entity.password <optional> "if create entity for user, password MUST exists, password size from 8 to 128 bytes"
	// @arg entity.extra <optional> "extra data, json string"
	// @ret entity
	// @req
	//   {
	//     "entity": {
	//       "name": "entity-name",
	//       "password": "password",
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error)
	//
	// @fn DeleteEntity
	// @arg entity.id "entity id"
	// @ret
	// @req
	//   {
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	// @fn PatchEntity
	// @arg entity.id "entity id"
	// @arg entity.alias <optional> "entity alias"
	// @arg enttiy.password <optional> "entity password"
	// @arg entity.extra <optional> "extra data, json string"
	// @ret entity
	// @req
	//   {
	//     "entity": {
	//       "id": "entity-id",
	//       "password": "new-password"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchEntity(ctx context.Context, in *PatchEntityRequest, opts ...grpc.CallOption) (*PatchEntityResponse, error)
	//
	// @fn GetEnttiy
	// @arg entity.id "entity id"
	// @ret entity
	// @req
	//   {
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error)
	//
	// @fn ListEntities
	// @arg entity.id <optional> "entity id"
	// @arg entity.name <optional> "entity name"
	// @arg entity.alias <optional> "entity alias"
	// @ret entities "list of entity"
	// @req
	//   {
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error)
	//
	// @fn ShowEntity
	// @unimplemented
	ShowEntity(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ShowEntityResponse, error)
	//
	// @fn AddRoleToEntity
	// @arg role.id "role id"
	// @arg entity.id "entity id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	AddRoleToEntity(ctx context.Context, in *AddRoleToEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	// @fn RemoveRoleFromEntity
	// @arg role.id "role id"
	// @arg entity.id "entity id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	RemoveRoleFromEntity(ctx context.Context, in *RemoveRoleFromEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	// @fn AddEntityToDomain
	// @arg domain.id "domain id"
	// @arg entity.id "entity id"
	// @ret
	// @req
	//   {
	//     "domain": {
	//       "id": "domain-id"
	//     },
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	AddEntityToDomain(ctx context.Context, in *AddEntityToDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	// @fn RemoveEntityFromDomain
	// @arg domain.id "domain id"
	// @arg entity.id "entity id"
	// @ret
	// @req
	//   {
	//     "domain": {
	//       "id": "domain-id"
	//     },
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	RemoveEntityFromDomain(ctx context.Context, in *RemoveEntityFromDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	// @fn CreateGroup
	// @arg group.id <optional> "group id"
	// @arg group.domain.id "create group in domain"
	// @arg group.name "group name"
	// @arg group.alias "group alias"
	// @arg group.description "group description"
	// @arg group.extra "extra data, json string"
	// @ret group
	// @req
	//   {
	//     "group": {
	//       "name": "group-name",
	//       "domain": {
	//         "id": "domain-id"
	//       }
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	//
	// @fn DeleteGroup
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	// @fn PatchGroup
	// @arg group.id "group id"
	// @arg group.alias <optional> "group alias"
	// @arg group.description <optional> "group description"
	// @arg group.extra <optional> "extra data, json string"
	// @ret group
	// @req
	//   {
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchGroup(ctx context.Context, in *PatchGroupRequest, opts ...grpc.CallOption) (*PatchGroupResponse, error)
	//
	// @fn GetGroup
	// @arg group.id "group id"
	// @ret group
	// @req
	//   {
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	//
	// @fn ListGroups
	// @arg group.id <optional> "group id"
	// @arg group.domain.id <optional> "domain id"
	// @arg group.name <optional> "group name"
	// @arg group.alias <optional> "group alias"
	// @ret groups "list of group"
	// @req
	//   {
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error)
	//
	// @fn ListGroupsForSubject
	// @arg subject.id "subject id"
	// @ret groups
	// @req
	//   { ... }
	// @err Internal
	ListGroupsForSubject(ctx context.Context, in *ListGroupsForSubjectRequest, opts ...grpc.CallOption) (*ListGroupsForSubjectResponse, error)
	//
	// @fn ListGroupsForObject
	// @arg object.id "object id"
	// @ret groups
	// @req
	//   { ... }
	// @err Internal
	ListGroupsForObject(ctx context.Context, in *ListGroupsForObjectRequest, opts ...grpc.CallOption) (*ListGroupsForObjectResponse, error)
	//
	// @fn ShowGroups
	// @unimplemented
	ShowGroups(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ShowGroupsResponse, error)
	//
	// @fn AddRoleToGroup
	// @arg role.id "role id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	AddRoleToGroup(ctx context.Context, in *AddRoleToGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	// @fn RemoveRoleFromGroup
	// @arg role.id "role id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	RemoveRoleFromGroup(ctx context.Context, in *RemoveRoleFromGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	// @fn AddSubjectToGroup
	// @arg subject.id "subject id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "subject": {
	//       "id": "subject-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	AddSubjectToGroup(ctx context.Context, in *AddSubjectToGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	// @fn RemoveSubjectFromGroup
	// @arg subject.id "subject id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "subject": {
	//       "id": "subject-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	RemoveSubjectFromGroup(ctx context.Context, in *RemoveSubjectFromGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	// @fn AddObjectToGroup
	// @arg object.id "object id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "object": {
	//       "id": "object-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	AddObjectToGroup(ctx context.Context, in *AddObjectToGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	// @fn RemoveObjectFromGroup
	// @arg object.id "object id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "object": {
	//       "id": "object-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	RemoveObjectFromGroup(ctx context.Context, in *RemoveObjectFromGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	// @fn CreateCredential
	// @arg credential.id <optional> "credential id"
	// @arg credential.domain.id "domain id"
	// @arg credential.entity.id "entity id"
	// @arg credential.name "credential name"
	// @arg credential.alias <optional> "credential alias"
	// @arg credential.secret <optional> "credential secret"
	// @arg credential.description <optional> "credential description"
	// @arg credential.expires_at <optional> "expires time"
	// @arg credential.roles.id <list> <optional> "list of role"
	// @arg secret_size <optional> "secret size, default 32 bytes"
	// @ret credential
	// @req
	//   {
	//     "credential": {
	//       "domain": {
	//         "id": "domain-id"
	//       },
	//       "entity": {
	//         "id": "entity-id"
	//       },
	//       "name": "cred-name",
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateCredential(ctx context.Context, in *CreateCredentialRequest, opts ...grpc.CallOption) (*CreateCredentialResponse, error)
	//
	// @fn DeleteCredential
	// @arg credential.id "credential id"
	// @ret
	// @req
	//   {
	//     "credential": {
	//       "id": "credential-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	// @fn PatchCredential
	// @arg credential.id "credential id"
	// @arg credential.alias "credential alias"
	// @arg credential.description "credential description"
	// @ret credential
	// @req
	//   {
	//     "credential": {
	//       "id": "credential-id",
	//       "alias": "renamed-credential-alias"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchCredential(ctx context.Context, in *PatchCredentialRequest, opts ...grpc.CallOption) (*PatchCredentialResponse, error)
	//
	// @fn GetCredential
	// @arg credential.id "credential id"
	// @ret credential
	// @req
	//   {
	//     "credential": {
	//       "id": "credential-id",
	//     }
	//   }
	// @res
	//   { ... }
	GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error)
	//
	// @fn ListCredentials
	// @arg credential.id <optional> "credential id"
	// @arg credential.domain.id <optional> "domain id"
	// @arg credential.entity.id <optional> "entity id"
	// @arg credential.name <optional> "credential name"
	// @arg credential.alias <optional> "credential alias"
	// @ret credentials "list of credential"
	// @req
	//   {
	//     "credential": {
	//       "id": "credential-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	ListCredentials(ctx context.Context, in *ListCredentialsRequest, opts ...grpc.CallOption) (*ListCredentialsResponse, error)
	//
	// @fn ListCredentialsForEntity
	// @arg entity.id "entity id"
	// @req
	//   {
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	ListCredentialsForEntity(ctx context.Context, in *ListCredentialsForEntityRequest, opts ...grpc.CallOption) (*ListCredentialsForEntityResponse, error)
	//
	// @fn IssueTokenByCredential
	// @arg credential.id "credential id"
	// @arg credential.domain.id "domain id"
	// @arg timestamp "timestamp"
	// @arg nonce "nonce"
	// @arg hmac "=hmac(key, credential.id+timestamp+nonce), helper: pkg/identityd2/contrib/issue_token_by_credential.go:NewIssueTokenByCredentialRequest"
	// @ret token
	// @req
	//   {
	//     "credential": {
	//       "id": "credential-id"
	//     },
	//     "timestamp": {
	//       "seconds": 0,
	//       "nanos": 0
	//     },
	//     "nonce": 0,
	//     "hmac": "hmac"
	//   }
	// @res
	//   { ... }
	// @err Internal
	// @err Unauthenticated
	IssueTokenByCredential(ctx context.Context, in *IssueTokenByCredentialRequest, opts ...grpc.CallOption) (*IssueTokenByCredentialResponse, error)
	//
	// @fn IssueTokenByPassword
	// @arg entity.domains.id "domain id, less 1 domain"
	// @arg entity.id <optional> "entity id"
	// @arg entity.name <optional> "entity name"
	// @arg entity.password "entity password"
	// @ret token
	// @req
	//   {
	//     "entity": {
	//       "domains": [{"id": "domain-id"}],
	//       "name": "test",
	//       "password": "test"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	// @err Unauthenticated
	IssueTokenByPassword(ctx context.Context, in *IssueTokenByPasswordRequest, opts ...grpc.CallOption) (*IssueTokenByPasswordResponse, error)
	//
	// @fn IssueTokenByToken
	// @arg token.domain.id "domain id"
	// @arg token.text "token text"
	// @ret token
	// @req
	//   {
	//     "token": {
	//       "domain": {
	//         "id": "domain-id"
	//       },
	//       "text": "token-text"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	// @err Unauthenticated
	IssueTokenByToken(ctx context.Context, in *IssueTokenByTokenRequest, opts ...grpc.CallOption) (*IssueTokenByTokenResponse, error)
	//
	// @fn RevokeToken
	// @arg token.text "token text"
	// @ret
	// @req
	//   {
	//     "token": {
	//       "text": "token-text"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	// @err FailedPrecondition
	RevokeToken(ctx context.Context, in *RevokeTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	// @fn ValidateToken
	// @arg token.text "token text"
	// @ret
	// @req
	//   {
	//     "token": {
	//       "text": "token-text"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	// @err InvalidArgument
	// @err Unauthenticated
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
	//
	// @fn CheckToken
	// @arg token.text "token text"
	// @arg token.domain.id "domain id"
	// @ret
	// @req
	//   {
	//     "token": {
	//       "domain": {
	//         "id": "domain-id"
	//       },
	//       "text": "token-text"
	//     }
	//   }
	// @err Internal
	// @err InvalidArgument
	// @err Unauthenticated
	CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	// @fn AuthorizeToken
	// @arg object.id "object id"
	// @arg action.name "action name"
	// @ret
	// @req
	//   {
	//     "object": {
	//       "id": "object-id"
	//     },
	//     "action": {
	//       "name": "action-name"
	//     }
	//   }
	// @res
	// @err PermissionDenied
	// @err Internal
	AuthorizeToken(ctx context.Context, in *AuthorizeTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type identitydServiceClient struct {
	cc *grpc.ClientConn
}

func NewIdentitydServiceClient(cc *grpc.ClientConn) IdentitydServiceClient {
	return &identitydServiceClient{cc}
}

func (c *identitydServiceClient) CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error) {
	out := new(CreateDomainResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/CreateDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/DeleteDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchDomain(ctx context.Context, in *PatchDomainRequest, opts ...grpc.CallOption) (*PatchDomainResponse, error) {
	out := new(PatchDomainResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/PatchDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*GetDomainResponse, error) {
	out := new(GetDomainResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/GetDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error) {
	out := new(ListDomainsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CreateAction(ctx context.Context, in *CreateActionRequest, opts ...grpc.CallOption) (*CreateActionResponse, error) {
	out := new(CreateActionResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/CreateAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteAction(ctx context.Context, in *DeleteActionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/DeleteAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchAction(ctx context.Context, in *PatchActionRequest, opts ...grpc.CallOption) (*PatchActionResponse, error) {
	out := new(PatchActionResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/PatchAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetAction(ctx context.Context, in *GetActionRequest, opts ...grpc.CallOption) (*GetActionResponse, error) {
	out := new(GetActionResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/GetAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListActions(ctx context.Context, in *ListActionsRequest, opts ...grpc.CallOption) (*ListActionsResponse, error) {
	out := new(ListActionsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchRole(ctx context.Context, in *PatchRoleRequest, opts ...grpc.CallOption) (*PatchRoleResponse, error) {
	out := new(PatchRoleResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/PatchRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListRolesForEntity(ctx context.Context, in *ListRolesForEntityRequest, opts ...grpc.CallOption) (*ListRolesForEntityResponse, error) {
	out := new(ListRolesForEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListRolesForEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AddActionToRole(ctx context.Context, in *AddActionToRoleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/AddActionToRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RemoveActionFromRole(ctx context.Context, in *RemoveActionFromRoleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/RemoveActionFromRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error) {
	out := new(CreateEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/CreateEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/DeleteEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchEntity(ctx context.Context, in *PatchEntityRequest, opts ...grpc.CallOption) (*PatchEntityResponse, error) {
	out := new(PatchEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/PatchEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error) {
	out := new(GetEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/GetEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error) {
	out := new(ListEntitiesResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ShowEntity(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ShowEntityResponse, error) {
	out := new(ShowEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ShowEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AddRoleToEntity(ctx context.Context, in *AddRoleToEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/AddRoleToEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RemoveRoleFromEntity(ctx context.Context, in *RemoveRoleFromEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/RemoveRoleFromEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AddEntityToDomain(ctx context.Context, in *AddEntityToDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/AddEntityToDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RemoveEntityFromDomain(ctx context.Context, in *RemoveEntityFromDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/RemoveEntityFromDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchGroup(ctx context.Context, in *PatchGroupRequest, opts ...grpc.CallOption) (*PatchGroupResponse, error) {
	out := new(PatchGroupResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/PatchGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	out := new(ListGroupsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListGroupsForSubject(ctx context.Context, in *ListGroupsForSubjectRequest, opts ...grpc.CallOption) (*ListGroupsForSubjectResponse, error) {
	out := new(ListGroupsForSubjectResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListGroupsForSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListGroupsForObject(ctx context.Context, in *ListGroupsForObjectRequest, opts ...grpc.CallOption) (*ListGroupsForObjectResponse, error) {
	out := new(ListGroupsForObjectResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListGroupsForObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ShowGroups(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ShowGroupsResponse, error) {
	out := new(ShowGroupsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ShowGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AddRoleToGroup(ctx context.Context, in *AddRoleToGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/AddRoleToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RemoveRoleFromGroup(ctx context.Context, in *RemoveRoleFromGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/RemoveRoleFromGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AddSubjectToGroup(ctx context.Context, in *AddSubjectToGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/AddSubjectToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RemoveSubjectFromGroup(ctx context.Context, in *RemoveSubjectFromGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/RemoveSubjectFromGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AddObjectToGroup(ctx context.Context, in *AddObjectToGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/AddObjectToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RemoveObjectFromGroup(ctx context.Context, in *RemoveObjectFromGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/RemoveObjectFromGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CreateCredential(ctx context.Context, in *CreateCredentialRequest, opts ...grpc.CallOption) (*CreateCredentialResponse, error) {
	out := new(CreateCredentialResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/CreateCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/DeleteCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchCredential(ctx context.Context, in *PatchCredentialRequest, opts ...grpc.CallOption) (*PatchCredentialResponse, error) {
	out := new(PatchCredentialResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/PatchCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error) {
	out := new(GetCredentialResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/GetCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListCredentials(ctx context.Context, in *ListCredentialsRequest, opts ...grpc.CallOption) (*ListCredentialsResponse, error) {
	out := new(ListCredentialsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListCredentialsForEntity(ctx context.Context, in *ListCredentialsForEntityRequest, opts ...grpc.CallOption) (*ListCredentialsForEntityResponse, error) {
	out := new(ListCredentialsForEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListCredentialsForEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) IssueTokenByCredential(ctx context.Context, in *IssueTokenByCredentialRequest, opts ...grpc.CallOption) (*IssueTokenByCredentialResponse, error) {
	out := new(IssueTokenByCredentialResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/IssueTokenByCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) IssueTokenByPassword(ctx context.Context, in *IssueTokenByPasswordRequest, opts ...grpc.CallOption) (*IssueTokenByPasswordResponse, error) {
	out := new(IssueTokenByPasswordResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/IssueTokenByPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) IssueTokenByToken(ctx context.Context, in *IssueTokenByTokenRequest, opts ...grpc.CallOption) (*IssueTokenByTokenResponse, error) {
	out := new(IssueTokenByTokenResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/IssueTokenByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RevokeToken(ctx context.Context, in *RevokeTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/RevokeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	out := new(ValidateTokenResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/CheckToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AuthorizeToken(ctx context.Context, in *AuthorizeTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/AuthorizeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentitydServiceServer is the server API for IdentitydService service.
type IdentitydServiceServer interface {
	//
	// @fn CreateDomain
	// @arg domain.id <optional> "domain id"
	// @arg domain.parent.id "domain parent id"
	// @arg domain.name "domain name"
	// @arg domain.alias <optional> "domain alias"
	// @arg domain.extra <optional> "extra data, json string"
	// @ret domain
	// @req
	//   {
	//     "domain": {
	//       "name": "test",
	//       "parent": {
	//         "id": "default"
	//       }
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateDomain(context.Context, *CreateDomainRequest) (*CreateDomainResponse, error)
	//
	// @fn DeleteDomain
	// @arg domain.id "domain id"
	// @ret
	// @req
	//   {
	//     "domain": {
	//       "id": "domain-id"
	//     }
	//   }
	// @res
	//   { }
	// @err FailedPrecondition
	// @err Internal
	DeleteDomain(context.Context, *DeleteDomainRequest) (*empty.Empty, error)
	//
	// @fn PatchDomain
	// @arg domain.id "domain id"
	// @arg domain.alias <optional> "domain alias"
	// @arg domain.extra <optional> "extra data, json string"
	// @ret domain
	// @req
	//   {
	//     "domain": {
	//       "id": "domain-id"
	//       "alias": "renamed-domain"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchDomain(context.Context, *PatchDomainRequest) (*PatchDomainResponse, error)
	//
	// @fn GetDomain
	// @arg domain.id "domain id"
	// @ret domain
	// @req
	//   {
	//     "domain": {
	//       "id": "domain-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err InvalidArgument
	// @err Internal
	GetDomain(context.Context, *GetDomainRequest) (*GetDomainResponse, error)
	//
	// @fn ListDomains
	// @arg domain.id <optional> "domain id"
	// @arg domain.name <optional> "domain name"
	// @arg domain.alias <optional> "domain alias"
	// @ret domains "list of domains"
	// @req
	//   { ... }
	// @res
	//   { ... }
	// @err Internal
	ListDomains(context.Context, *ListDomainsRequest) (*ListDomainsResponse, error)
	//
	// @fn CreateAction
	// @arg action.id <optional> "action id"
	// @arg action.name "action name, format: <service>:<action>, example: identtiyd2:create_action"
	// @arg action.alias <optional> "action alias"
	// @arg action.description <optional> "action description"
	// @arg action.extra <optional> "extra data, json string"
	// @ret action
	// @req
	//   {
	//     "action": {
	//       "name": "identityd2:create_action"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateAction(context.Context, *CreateActionRequest) (*CreateActionResponse, error)
	//
	// @fn DeleteAction
	// @arg action.id "action id"
	// @ret
	// @req
	//   {
	//     "action": {
	//       "id": "action-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	DeleteAction(context.Context, *DeleteActionRequest) (*empty.Empty, error)
	//
	// @fn PatchAction
	// @arg action.id "action id"
	// @arg action.alias <optional> "action alias"
	// @arg action.description <optional> "action description"
	// @arg action.extra <optional> "extra data, json string"
	// @ret action
	// @req
	//   {
	//     "action": {
	//       "id": "action-id",
	//       "alias": "renamed-action-alias"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchAction(context.Context, *PatchActionRequest) (*PatchActionResponse, error)
	//
	// @fn GetAction
	// @arg action.id "action id"
	// @ret action
	// @req
	//   {
	//     "action": {
	//       "id": "action-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	GetAction(context.Context, *GetActionRequest) (*GetActionResponse, error)
	//
	// @fn ListActions
	// @unimplemented
	// @arg action.id <optional> "action id"
	// @arg action.name <optional> "action name"
	// @arg action.alias <optional> "action alias"
	// @ret actions "list of action"
	// @req
	//   { ... }
	// @res
	//   { ... }
	// @err Internal
	ListActions(context.Context, *ListActionsRequest) (*ListActionsResponse, error)
	//
	// @fn CreateRole
	// @arg role.id <optional> "role id"
	// @arg role.name "role name"
	// @arg role.alias <optional> "role alias"
	// @arg role.description <optional> "role description"
	// @arg role.extra <optional> "extra data, json string"
	// @ret role
	// @req
	//   {
	//     "role": {
	//       "name": "admin"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	//
	// @fn DeleteRole
	// @arg role.id "role id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	DeleteRole(context.Context, *DeleteRoleRequest) (*empty.Empty, error)
	//
	// @fn PatchRole
	// @arg role.id "role id"
	// @arg role.alias <optional> "role alias"
	// @arg role.description <optional> "role description"
	// @arg role.extra <optional> "extra data, json string"
	// @ret role
	// @req
	//   {
	//     "role": {
	//       "id": "role-id",
	//       "alias": "renamed-role-alias"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchRole(context.Context, *PatchRoleRequest) (*PatchRoleResponse, error)
	//
	// @fn GetRole
	// @arg role.id "role id"
	// @ret role
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err InvalidArgument
	// @err Internal
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
	//
	// @fn ListRoles
	// @arg role.id <optional> "role id"
	// @arg role.name <optional> "role name"
	// @arg role.alias <optional> "role alias"
	// @ret roles "list of role"
	// @req
	//   {
	//     "role": {
	//       "id": "role-id",
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	//
	// @fn ListRolesForEntity
	// @unimplemented
	ListRolesForEntity(context.Context, *ListRolesForEntityRequest) (*ListRolesForEntityResponse, error)
	//
	// @fn AddActionToRole
	// @arg role.id "role id"
	// @arg action.id "action id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "action": {
	//       "id": "action-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	AddActionToRole(context.Context, *AddActionToRoleRequest) (*empty.Empty, error)
	//
	// @fn RemoveActionFromRole
	// @arg role.id "role id"
	// @arg action.id "action id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "action": {
	//       "id": "action-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	RemoveActionFromRole(context.Context, *RemoveActionFromRoleRequest) (*empty.Empty, error)
	//
	// @fn CreateEntity
	// @arg entity.id <optional> "entity id"
	// @arg entity.name "entity name"
	// @arg entity.alias <optional> "entity alias"
	// @arg entity.password <optional> "if create entity for user, password MUST exists, password size from 8 to 128 bytes"
	// @arg entity.extra <optional> "extra data, json string"
	// @ret entity
	// @req
	//   {
	//     "entity": {
	//       "name": "entity-name",
	//       "password": "password",
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateEntity(context.Context, *CreateEntityRequest) (*CreateEntityResponse, error)
	//
	// @fn DeleteEntity
	// @arg entity.id "entity id"
	// @ret
	// @req
	//   {
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	DeleteEntity(context.Context, *DeleteEntityRequest) (*empty.Empty, error)
	//
	// @fn PatchEntity
	// @arg entity.id "entity id"
	// @arg entity.alias <optional> "entity alias"
	// @arg enttiy.password <optional> "entity password"
	// @arg entity.extra <optional> "extra data, json string"
	// @ret entity
	// @req
	//   {
	//     "entity": {
	//       "id": "entity-id",
	//       "password": "new-password"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchEntity(context.Context, *PatchEntityRequest) (*PatchEntityResponse, error)
	//
	// @fn GetEnttiy
	// @arg entity.id "entity id"
	// @ret entity
	// @req
	//   {
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error)
	//
	// @fn ListEntities
	// @arg entity.id <optional> "entity id"
	// @arg entity.name <optional> "entity name"
	// @arg entity.alias <optional> "entity alias"
	// @ret entities "list of entity"
	// @req
	//   {
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error)
	//
	// @fn ShowEntity
	// @unimplemented
	ShowEntity(context.Context, *empty.Empty) (*ShowEntityResponse, error)
	//
	// @fn AddRoleToEntity
	// @arg role.id "role id"
	// @arg entity.id "entity id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	AddRoleToEntity(context.Context, *AddRoleToEntityRequest) (*empty.Empty, error)
	//
	// @fn RemoveRoleFromEntity
	// @arg role.id "role id"
	// @arg entity.id "entity id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	RemoveRoleFromEntity(context.Context, *RemoveRoleFromEntityRequest) (*empty.Empty, error)
	//
	// @fn AddEntityToDomain
	// @arg domain.id "domain id"
	// @arg entity.id "entity id"
	// @ret
	// @req
	//   {
	//     "domain": {
	//       "id": "domain-id"
	//     },
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	AddEntityToDomain(context.Context, *AddEntityToDomainRequest) (*empty.Empty, error)
	//
	// @fn RemoveEntityFromDomain
	// @arg domain.id "domain id"
	// @arg entity.id "entity id"
	// @ret
	// @req
	//   {
	//     "domain": {
	//       "id": "domain-id"
	//     },
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	RemoveEntityFromDomain(context.Context, *RemoveEntityFromDomainRequest) (*empty.Empty, error)
	//
	// @fn CreateGroup
	// @arg group.id <optional> "group id"
	// @arg group.domain.id "create group in domain"
	// @arg group.name "group name"
	// @arg group.alias "group alias"
	// @arg group.description "group description"
	// @arg group.extra "extra data, json string"
	// @ret group
	// @req
	//   {
	//     "group": {
	//       "name": "group-name",
	//       "domain": {
	//         "id": "domain-id"
	//       }
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	//
	// @fn DeleteGroup
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	DeleteGroup(context.Context, *DeleteGroupRequest) (*empty.Empty, error)
	//
	// @fn PatchGroup
	// @arg group.id "group id"
	// @arg group.alias <optional> "group alias"
	// @arg group.description <optional> "group description"
	// @arg group.extra <optional> "extra data, json string"
	// @ret group
	// @req
	//   {
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchGroup(context.Context, *PatchGroupRequest) (*PatchGroupResponse, error)
	//
	// @fn GetGroup
	// @arg group.id "group id"
	// @ret group
	// @req
	//   {
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	//
	// @fn ListGroups
	// @arg group.id <optional> "group id"
	// @arg group.domain.id <optional> "domain id"
	// @arg group.name <optional> "group name"
	// @arg group.alias <optional> "group alias"
	// @ret groups "list of group"
	// @req
	//   {
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error)
	//
	// @fn ListGroupsForSubject
	// @arg subject.id "subject id"
	// @ret groups
	// @req
	//   { ... }
	// @err Internal
	ListGroupsForSubject(context.Context, *ListGroupsForSubjectRequest) (*ListGroupsForSubjectResponse, error)
	//
	// @fn ListGroupsForObject
	// @arg object.id "object id"
	// @ret groups
	// @req
	//   { ... }
	// @err Internal
	ListGroupsForObject(context.Context, *ListGroupsForObjectRequest) (*ListGroupsForObjectResponse, error)
	//
	// @fn ShowGroups
	// @unimplemented
	ShowGroups(context.Context, *empty.Empty) (*ShowGroupsResponse, error)
	//
	// @fn AddRoleToGroup
	// @arg role.id "role id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	AddRoleToGroup(context.Context, *AddRoleToGroupRequest) (*empty.Empty, error)
	//
	// @fn RemoveRoleFromGroup
	// @arg role.id "role id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "role": {
	//       "id": "role-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	RemoveRoleFromGroup(context.Context, *RemoveRoleFromGroupRequest) (*empty.Empty, error)
	//
	// @fn AddSubjectToGroup
	// @arg subject.id "subject id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "subject": {
	//       "id": "subject-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	AddSubjectToGroup(context.Context, *AddSubjectToGroupRequest) (*empty.Empty, error)
	//
	// @fn RemoveSubjectFromGroup
	// @arg subject.id "subject id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "subject": {
	//       "id": "subject-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	RemoveSubjectFromGroup(context.Context, *RemoveSubjectFromGroupRequest) (*empty.Empty, error)
	//
	// @fn AddObjectToGroup
	// @arg object.id "object id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "object": {
	//       "id": "object-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	AddObjectToGroup(context.Context, *AddObjectToGroupRequest) (*empty.Empty, error)
	//
	// @fn RemoveObjectFromGroup
	// @arg object.id "object id"
	// @arg group.id "group id"
	// @ret
	// @req
	//   {
	//     "object": {
	//       "id": "object-id"
	//     },
	//     "group": {
	//       "id": "group-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	RemoveObjectFromGroup(context.Context, *RemoveObjectFromGroupRequest) (*empty.Empty, error)
	//
	// @fn CreateCredential
	// @arg credential.id <optional> "credential id"
	// @arg credential.domain.id "domain id"
	// @arg credential.entity.id "entity id"
	// @arg credential.name "credential name"
	// @arg credential.alias <optional> "credential alias"
	// @arg credential.secret <optional> "credential secret"
	// @arg credential.description <optional> "credential description"
	// @arg credential.expires_at <optional> "expires time"
	// @arg credential.roles.id <list> <optional> "list of role"
	// @arg secret_size <optional> "secret size, default 32 bytes"
	// @ret credential
	// @req
	//   {
	//     "credential": {
	//       "domain": {
	//         "id": "domain-id"
	//       },
	//       "entity": {
	//         "id": "entity-id"
	//       },
	//       "name": "cred-name",
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	CreateCredential(context.Context, *CreateCredentialRequest) (*CreateCredentialResponse, error)
	//
	// @fn DeleteCredential
	// @arg credential.id "credential id"
	// @ret
	// @req
	//   {
	//     "credential": {
	//       "id": "credential-id"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	DeleteCredential(context.Context, *DeleteCredentialRequest) (*empty.Empty, error)
	//
	// @fn PatchCredential
	// @arg credential.id "credential id"
	// @arg credential.alias "credential alias"
	// @arg credential.description "credential description"
	// @ret credential
	// @req
	//   {
	//     "credential": {
	//       "id": "credential-id",
	//       "alias": "renamed-credential-alias"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	PatchCredential(context.Context, *PatchCredentialRequest) (*PatchCredentialResponse, error)
	//
	// @fn GetCredential
	// @arg credential.id "credential id"
	// @ret credential
	// @req
	//   {
	//     "credential": {
	//       "id": "credential-id",
	//     }
	//   }
	// @res
	//   { ... }
	GetCredential(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error)
	//
	// @fn ListCredentials
	// @arg credential.id <optional> "credential id"
	// @arg credential.domain.id <optional> "domain id"
	// @arg credential.entity.id <optional> "entity id"
	// @arg credential.name <optional> "credential name"
	// @arg credential.alias <optional> "credential alias"
	// @ret credentials "list of credential"
	// @req
	//   {
	//     "credential": {
	//       "id": "credential-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	ListCredentials(context.Context, *ListCredentialsRequest) (*ListCredentialsResponse, error)
	//
	// @fn ListCredentialsForEntity
	// @arg entity.id "entity id"
	// @req
	//   {
	//     "entity": {
	//       "id": "entity-id"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	ListCredentialsForEntity(context.Context, *ListCredentialsForEntityRequest) (*ListCredentialsForEntityResponse, error)
	//
	// @fn IssueTokenByCredential
	// @arg credential.id "credential id"
	// @arg credential.domain.id "domain id"
	// @arg timestamp "timestamp"
	// @arg nonce "nonce"
	// @arg hmac "=hmac(key, credential.id+timestamp+nonce), helper: pkg/identityd2/contrib/issue_token_by_credential.go:NewIssueTokenByCredentialRequest"
	// @ret token
	// @req
	//   {
	//     "credential": {
	//       "id": "credential-id"
	//     },
	//     "timestamp": {
	//       "seconds": 0,
	//       "nanos": 0
	//     },
	//     "nonce": 0,
	//     "hmac": "hmac"
	//   }
	// @res
	//   { ... }
	// @err Internal
	// @err Unauthenticated
	IssueTokenByCredential(context.Context, *IssueTokenByCredentialRequest) (*IssueTokenByCredentialResponse, error)
	//
	// @fn IssueTokenByPassword
	// @arg entity.domains.id "domain id, less 1 domain"
	// @arg entity.id <optional> "entity id"
	// @arg entity.name <optional> "entity name"
	// @arg entity.password "entity password"
	// @ret token
	// @req
	//   {
	//     "entity": {
	//       "domains": [{"id": "domain-id"}],
	//       "name": "test",
	//       "password": "test"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	// @err Unauthenticated
	IssueTokenByPassword(context.Context, *IssueTokenByPasswordRequest) (*IssueTokenByPasswordResponse, error)
	//
	// @fn IssueTokenByToken
	// @arg token.domain.id "domain id"
	// @arg token.text "token text"
	// @ret token
	// @req
	//   {
	//     "token": {
	//       "domain": {
	//         "id": "domain-id"
	//       },
	//       "text": "token-text"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	// @err Unauthenticated
	IssueTokenByToken(context.Context, *IssueTokenByTokenRequest) (*IssueTokenByTokenResponse, error)
	//
	// @fn RevokeToken
	// @arg token.text "token text"
	// @ret
	// @req
	//   {
	//     "token": {
	//       "text": "token-text"
	//     }
	//   }
	// @res
	//   { }
	// @err Internal
	// @err FailedPrecondition
	RevokeToken(context.Context, *RevokeTokenRequest) (*empty.Empty, error)
	//
	// @fn ValidateToken
	// @arg token.text "token text"
	// @ret
	// @req
	//   {
	//     "token": {
	//       "text": "token-text"
	//     }
	//   }
	// @res
	//   { ... }
	// @err Internal
	// @err InvalidArgument
	// @err Unauthenticated
	ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
	//
	// @fn CheckToken
	// @arg token.text "token text"
	// @arg token.domain.id "domain id"
	// @ret
	// @req
	//   {
	//     "token": {
	//       "domain": {
	//         "id": "domain-id"
	//       },
	//       "text": "token-text"
	//     }
	//   }
	// @err Internal
	// @err InvalidArgument
	// @err Unauthenticated
	CheckToken(context.Context, *CheckTokenRequest) (*empty.Empty, error)
	//
	// @fn AuthorizeToken
	// @arg object.id "object id"
	// @arg action.name "action name"
	// @ret
	// @req
	//   {
	//     "object": {
	//       "id": "object-id"
	//     },
	//     "action": {
	//       "name": "action-name"
	//     }
	//   }
	// @res
	// @err PermissionDenied
	// @err Internal
	AuthorizeToken(context.Context, *AuthorizeTokenRequest) (*empty.Empty, error)
}

// UnimplementedIdentitydServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIdentitydServiceServer struct {
}

func (*UnimplementedIdentitydServiceServer) CreateDomain(ctx context.Context, req *CreateDomainRequest) (*CreateDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDomain not implemented")
}
func (*UnimplementedIdentitydServiceServer) DeleteDomain(ctx context.Context, req *DeleteDomainRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomain not implemented")
}
func (*UnimplementedIdentitydServiceServer) PatchDomain(ctx context.Context, req *PatchDomainRequest) (*PatchDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDomain not implemented")
}
func (*UnimplementedIdentitydServiceServer) GetDomain(ctx context.Context, req *GetDomainRequest) (*GetDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomain not implemented")
}
func (*UnimplementedIdentitydServiceServer) ListDomains(ctx context.Context, req *ListDomainsRequest) (*ListDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomains not implemented")
}
func (*UnimplementedIdentitydServiceServer) CreateAction(ctx context.Context, req *CreateActionRequest) (*CreateActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAction not implemented")
}
func (*UnimplementedIdentitydServiceServer) DeleteAction(ctx context.Context, req *DeleteActionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAction not implemented")
}
func (*UnimplementedIdentitydServiceServer) PatchAction(ctx context.Context, req *PatchActionRequest) (*PatchActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchAction not implemented")
}
func (*UnimplementedIdentitydServiceServer) GetAction(ctx context.Context, req *GetActionRequest) (*GetActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAction not implemented")
}
func (*UnimplementedIdentitydServiceServer) ListActions(ctx context.Context, req *ListActionsRequest) (*ListActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActions not implemented")
}
func (*UnimplementedIdentitydServiceServer) CreateRole(ctx context.Context, req *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (*UnimplementedIdentitydServiceServer) DeleteRole(ctx context.Context, req *DeleteRoleRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedIdentitydServiceServer) PatchRole(ctx context.Context, req *PatchRoleRequest) (*PatchRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchRole not implemented")
}
func (*UnimplementedIdentitydServiceServer) GetRole(ctx context.Context, req *GetRoleRequest) (*GetRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (*UnimplementedIdentitydServiceServer) ListRoles(ctx context.Context, req *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (*UnimplementedIdentitydServiceServer) ListRolesForEntity(ctx context.Context, req *ListRolesForEntityRequest) (*ListRolesForEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRolesForEntity not implemented")
}
func (*UnimplementedIdentitydServiceServer) AddActionToRole(ctx context.Context, req *AddActionToRoleRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddActionToRole not implemented")
}
func (*UnimplementedIdentitydServiceServer) RemoveActionFromRole(ctx context.Context, req *RemoveActionFromRoleRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveActionFromRole not implemented")
}
func (*UnimplementedIdentitydServiceServer) CreateEntity(ctx context.Context, req *CreateEntityRequest) (*CreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (*UnimplementedIdentitydServiceServer) DeleteEntity(ctx context.Context, req *DeleteEntityRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntity not implemented")
}
func (*UnimplementedIdentitydServiceServer) PatchEntity(ctx context.Context, req *PatchEntityRequest) (*PatchEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchEntity not implemented")
}
func (*UnimplementedIdentitydServiceServer) GetEntity(ctx context.Context, req *GetEntityRequest) (*GetEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (*UnimplementedIdentitydServiceServer) ListEntities(ctx context.Context, req *ListEntitiesRequest) (*ListEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntities not implemented")
}
func (*UnimplementedIdentitydServiceServer) ShowEntity(ctx context.Context, req *empty.Empty) (*ShowEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowEntity not implemented")
}
func (*UnimplementedIdentitydServiceServer) AddRoleToEntity(ctx context.Context, req *AddRoleToEntityRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleToEntity not implemented")
}
func (*UnimplementedIdentitydServiceServer) RemoveRoleFromEntity(ctx context.Context, req *RemoveRoleFromEntityRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoleFromEntity not implemented")
}
func (*UnimplementedIdentitydServiceServer) AddEntityToDomain(ctx context.Context, req *AddEntityToDomainRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEntityToDomain not implemented")
}
func (*UnimplementedIdentitydServiceServer) RemoveEntityFromDomain(ctx context.Context, req *RemoveEntityFromDomainRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEntityFromDomain not implemented")
}
func (*UnimplementedIdentitydServiceServer) CreateGroup(ctx context.Context, req *CreateGroupRequest) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (*UnimplementedIdentitydServiceServer) DeleteGroup(ctx context.Context, req *DeleteGroupRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (*UnimplementedIdentitydServiceServer) PatchGroup(ctx context.Context, req *PatchGroupRequest) (*PatchGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchGroup not implemented")
}
func (*UnimplementedIdentitydServiceServer) GetGroup(ctx context.Context, req *GetGroupRequest) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (*UnimplementedIdentitydServiceServer) ListGroups(ctx context.Context, req *ListGroupsRequest) (*ListGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (*UnimplementedIdentitydServiceServer) ListGroupsForSubject(ctx context.Context, req *ListGroupsForSubjectRequest) (*ListGroupsForSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupsForSubject not implemented")
}
func (*UnimplementedIdentitydServiceServer) ListGroupsForObject(ctx context.Context, req *ListGroupsForObjectRequest) (*ListGroupsForObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupsForObject not implemented")
}
func (*UnimplementedIdentitydServiceServer) ShowGroups(ctx context.Context, req *empty.Empty) (*ShowGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowGroups not implemented")
}
func (*UnimplementedIdentitydServiceServer) AddRoleToGroup(ctx context.Context, req *AddRoleToGroupRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleToGroup not implemented")
}
func (*UnimplementedIdentitydServiceServer) RemoveRoleFromGroup(ctx context.Context, req *RemoveRoleFromGroupRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoleFromGroup not implemented")
}
func (*UnimplementedIdentitydServiceServer) AddSubjectToGroup(ctx context.Context, req *AddSubjectToGroupRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubjectToGroup not implemented")
}
func (*UnimplementedIdentitydServiceServer) RemoveSubjectFromGroup(ctx context.Context, req *RemoveSubjectFromGroupRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSubjectFromGroup not implemented")
}
func (*UnimplementedIdentitydServiceServer) AddObjectToGroup(ctx context.Context, req *AddObjectToGroupRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddObjectToGroup not implemented")
}
func (*UnimplementedIdentitydServiceServer) RemoveObjectFromGroup(ctx context.Context, req *RemoveObjectFromGroupRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveObjectFromGroup not implemented")
}
func (*UnimplementedIdentitydServiceServer) CreateCredential(ctx context.Context, req *CreateCredentialRequest) (*CreateCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredential not implemented")
}
func (*UnimplementedIdentitydServiceServer) DeleteCredential(ctx context.Context, req *DeleteCredentialRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (*UnimplementedIdentitydServiceServer) PatchCredential(ctx context.Context, req *PatchCredentialRequest) (*PatchCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchCredential not implemented")
}
func (*UnimplementedIdentitydServiceServer) GetCredential(ctx context.Context, req *GetCredentialRequest) (*GetCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (*UnimplementedIdentitydServiceServer) ListCredentials(ctx context.Context, req *ListCredentialsRequest) (*ListCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredentials not implemented")
}
func (*UnimplementedIdentitydServiceServer) ListCredentialsForEntity(ctx context.Context, req *ListCredentialsForEntityRequest) (*ListCredentialsForEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredentialsForEntity not implemented")
}
func (*UnimplementedIdentitydServiceServer) IssueTokenByCredential(ctx context.Context, req *IssueTokenByCredentialRequest) (*IssueTokenByCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueTokenByCredential not implemented")
}
func (*UnimplementedIdentitydServiceServer) IssueTokenByPassword(ctx context.Context, req *IssueTokenByPasswordRequest) (*IssueTokenByPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueTokenByPassword not implemented")
}
func (*UnimplementedIdentitydServiceServer) IssueTokenByToken(ctx context.Context, req *IssueTokenByTokenRequest) (*IssueTokenByTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueTokenByToken not implemented")
}
func (*UnimplementedIdentitydServiceServer) RevokeToken(ctx context.Context, req *RevokeTokenRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeToken not implemented")
}
func (*UnimplementedIdentitydServiceServer) ValidateToken(ctx context.Context, req *ValidateTokenRequest) (*ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (*UnimplementedIdentitydServiceServer) CheckToken(ctx context.Context, req *CheckTokenRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (*UnimplementedIdentitydServiceServer) AuthorizeToken(ctx context.Context, req *AuthorizeTokenRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeToken not implemented")
}

func RegisterIdentitydServiceServer(s *grpc.Server, srv IdentitydServiceServer) {
	s.RegisterService(&_IdentitydService_serviceDesc, srv)
}

func _IdentitydService_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/CreateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateDomain(ctx, req.(*CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/DeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteDomain(ctx, req.(*DeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/PatchDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchDomain(ctx, req.(*PatchDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/GetDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetDomain(ctx, req.(*GetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListDomains(ctx, req.(*ListDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CreateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/CreateAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateAction(ctx, req.(*CreateActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/DeleteAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteAction(ctx, req.(*DeleteActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/PatchAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchAction(ctx, req.(*PatchActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/GetAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetAction(ctx, req.(*GetActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListActions(ctx, req.(*ListActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/PatchRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchRole(ctx, req.(*PatchRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListRolesForEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesForEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListRolesForEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListRolesForEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListRolesForEntity(ctx, req.(*ListRolesForEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AddActionToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddActionToRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AddActionToRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/AddActionToRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AddActionToRole(ctx, req.(*AddActionToRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RemoveActionFromRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveActionFromRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RemoveActionFromRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/RemoveActionFromRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RemoveActionFromRole(ctx, req.(*RemoveActionFromRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateEntity(ctx, req.(*CreateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/DeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteEntity(ctx, req.(*DeleteEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/PatchEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchEntity(ctx, req.(*PatchEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/GetEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListEntities(ctx, req.(*ListEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ShowEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ShowEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ShowEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ShowEntity(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AddRoleToEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleToEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AddRoleToEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/AddRoleToEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AddRoleToEntity(ctx, req.(*AddRoleToEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RemoveRoleFromEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RemoveRoleFromEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/RemoveRoleFromEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RemoveRoleFromEntity(ctx, req.(*RemoveRoleFromEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AddEntityToDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEntityToDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AddEntityToDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/AddEntityToDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AddEntityToDomain(ctx, req.(*AddEntityToDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RemoveEntityFromDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEntityFromDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RemoveEntityFromDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/RemoveEntityFromDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RemoveEntityFromDomain(ctx, req.(*RemoveEntityFromDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/PatchGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchGroup(ctx, req.(*PatchGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListGroups(ctx, req.(*ListGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListGroupsForSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsForSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListGroupsForSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListGroupsForSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListGroupsForSubject(ctx, req.(*ListGroupsForSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListGroupsForObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsForObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListGroupsForObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListGroupsForObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListGroupsForObject(ctx, req.(*ListGroupsForObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ShowGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ShowGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ShowGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ShowGroups(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AddRoleToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AddRoleToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/AddRoleToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AddRoleToGroup(ctx, req.(*AddRoleToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RemoveRoleFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RemoveRoleFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/RemoveRoleFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RemoveRoleFromGroup(ctx, req.(*RemoveRoleFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AddSubjectToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubjectToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AddSubjectToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/AddSubjectToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AddSubjectToGroup(ctx, req.(*AddSubjectToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RemoveSubjectFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSubjectFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RemoveSubjectFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/RemoveSubjectFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RemoveSubjectFromGroup(ctx, req.(*RemoveSubjectFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AddObjectToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddObjectToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AddObjectToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/AddObjectToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AddObjectToGroup(ctx, req.(*AddObjectToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RemoveObjectFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveObjectFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RemoveObjectFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/RemoveObjectFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RemoveObjectFromGroup(ctx, req.(*RemoveObjectFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/CreateCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateCredential(ctx, req.(*CreateCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/DeleteCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteCredential(ctx, req.(*DeleteCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/PatchCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchCredential(ctx, req.(*PatchCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/GetCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetCredential(ctx, req.(*GetCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListCredentials(ctx, req.(*ListCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListCredentialsForEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialsForEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListCredentialsForEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListCredentialsForEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListCredentialsForEntity(ctx, req.(*ListCredentialsForEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_IssueTokenByCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTokenByCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).IssueTokenByCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/IssueTokenByCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).IssueTokenByCredential(ctx, req.(*IssueTokenByCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_IssueTokenByPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTokenByPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).IssueTokenByPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/IssueTokenByPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).IssueTokenByPassword(ctx, req.(*IssueTokenByPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_IssueTokenByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTokenByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).IssueTokenByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/IssueTokenByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).IssueTokenByToken(ctx, req.(*IssueTokenByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RevokeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RevokeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/RevokeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RevokeToken(ctx, req.(*RevokeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/CheckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CheckToken(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AuthorizeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AuthorizeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/AuthorizeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AuthorizeToken(ctx, req.(*AuthorizeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdentitydService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.identityd2.IdentitydService",
	HandlerType: (*IdentitydServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDomain",
			Handler:    _IdentitydService_CreateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _IdentitydService_DeleteDomain_Handler,
		},
		{
			MethodName: "PatchDomain",
			Handler:    _IdentitydService_PatchDomain_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _IdentitydService_GetDomain_Handler,
		},
		{
			MethodName: "ListDomains",
			Handler:    _IdentitydService_ListDomains_Handler,
		},
		{
			MethodName: "CreateAction",
			Handler:    _IdentitydService_CreateAction_Handler,
		},
		{
			MethodName: "DeleteAction",
			Handler:    _IdentitydService_DeleteAction_Handler,
		},
		{
			MethodName: "PatchAction",
			Handler:    _IdentitydService_PatchAction_Handler,
		},
		{
			MethodName: "GetAction",
			Handler:    _IdentitydService_GetAction_Handler,
		},
		{
			MethodName: "ListActions",
			Handler:    _IdentitydService_ListActions_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _IdentitydService_CreateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _IdentitydService_DeleteRole_Handler,
		},
		{
			MethodName: "PatchRole",
			Handler:    _IdentitydService_PatchRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _IdentitydService_GetRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _IdentitydService_ListRoles_Handler,
		},
		{
			MethodName: "ListRolesForEntity",
			Handler:    _IdentitydService_ListRolesForEntity_Handler,
		},
		{
			MethodName: "AddActionToRole",
			Handler:    _IdentitydService_AddActionToRole_Handler,
		},
		{
			MethodName: "RemoveActionFromRole",
			Handler:    _IdentitydService_RemoveActionFromRole_Handler,
		},
		{
			MethodName: "CreateEntity",
			Handler:    _IdentitydService_CreateEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _IdentitydService_DeleteEntity_Handler,
		},
		{
			MethodName: "PatchEntity",
			Handler:    _IdentitydService_PatchEntity_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _IdentitydService_GetEntity_Handler,
		},
		{
			MethodName: "ListEntities",
			Handler:    _IdentitydService_ListEntities_Handler,
		},
		{
			MethodName: "ShowEntity",
			Handler:    _IdentitydService_ShowEntity_Handler,
		},
		{
			MethodName: "AddRoleToEntity",
			Handler:    _IdentitydService_AddRoleToEntity_Handler,
		},
		{
			MethodName: "RemoveRoleFromEntity",
			Handler:    _IdentitydService_RemoveRoleFromEntity_Handler,
		},
		{
			MethodName: "AddEntityToDomain",
			Handler:    _IdentitydService_AddEntityToDomain_Handler,
		},
		{
			MethodName: "RemoveEntityFromDomain",
			Handler:    _IdentitydService_RemoveEntityFromDomain_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _IdentitydService_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _IdentitydService_DeleteGroup_Handler,
		},
		{
			MethodName: "PatchGroup",
			Handler:    _IdentitydService_PatchGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _IdentitydService_GetGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _IdentitydService_ListGroups_Handler,
		},
		{
			MethodName: "ListGroupsForSubject",
			Handler:    _IdentitydService_ListGroupsForSubject_Handler,
		},
		{
			MethodName: "ListGroupsForObject",
			Handler:    _IdentitydService_ListGroupsForObject_Handler,
		},
		{
			MethodName: "ShowGroups",
			Handler:    _IdentitydService_ShowGroups_Handler,
		},
		{
			MethodName: "AddRoleToGroup",
			Handler:    _IdentitydService_AddRoleToGroup_Handler,
		},
		{
			MethodName: "RemoveRoleFromGroup",
			Handler:    _IdentitydService_RemoveRoleFromGroup_Handler,
		},
		{
			MethodName: "AddSubjectToGroup",
			Handler:    _IdentitydService_AddSubjectToGroup_Handler,
		},
		{
			MethodName: "RemoveSubjectFromGroup",
			Handler:    _IdentitydService_RemoveSubjectFromGroup_Handler,
		},
		{
			MethodName: "AddObjectToGroup",
			Handler:    _IdentitydService_AddObjectToGroup_Handler,
		},
		{
			MethodName: "RemoveObjectFromGroup",
			Handler:    _IdentitydService_RemoveObjectFromGroup_Handler,
		},
		{
			MethodName: "CreateCredential",
			Handler:    _IdentitydService_CreateCredential_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _IdentitydService_DeleteCredential_Handler,
		},
		{
			MethodName: "PatchCredential",
			Handler:    _IdentitydService_PatchCredential_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _IdentitydService_GetCredential_Handler,
		},
		{
			MethodName: "ListCredentials",
			Handler:    _IdentitydService_ListCredentials_Handler,
		},
		{
			MethodName: "ListCredentialsForEntity",
			Handler:    _IdentitydService_ListCredentialsForEntity_Handler,
		},
		{
			MethodName: "IssueTokenByCredential",
			Handler:    _IdentitydService_IssueTokenByCredential_Handler,
		},
		{
			MethodName: "IssueTokenByPassword",
			Handler:    _IdentitydService_IssueTokenByPassword_Handler,
		},
		{
			MethodName: "IssueTokenByToken",
			Handler:    _IdentitydService_IssueTokenByToken_Handler,
		},
		{
			MethodName: "RevokeToken",
			Handler:    _IdentitydService_RevokeToken_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _IdentitydService_ValidateToken_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _IdentitydService_CheckToken_Handler,
		},
		{
			MethodName: "AuthorizeToken",
			Handler:    _IdentitydService_AuthorizeToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
