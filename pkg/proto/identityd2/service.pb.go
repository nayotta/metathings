// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package identityd2

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 1172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0x5b, 0x6f, 0x1b, 0x45,
	0x14, 0xae, 0x5f, 0x80, 0x9e, 0xa6, 0x8d, 0xbd, 0x09, 0x69, 0x49, 0x5b, 0x0a, 0x7d, 0xe3, 0xc5,
	0x05, 0x3b, 0x49, 0x6f, 0x69, 0x21, 0x49, 0x53, 0xab, 0x12, 0x0f, 0x55, 0x1a, 0xf1, 0xc0, 0x45,
	0x96, 0xe3, 0x9d, 0xd8, 0x2b, 0x5f, 0xc6, 0xdd, 0x59, 0x3b, 0xb2, 0x54, 0x09, 0x89, 0x27, 0x24,
	0x24, 0x24, 0x24, 0x24, 0x9e, 0x78, 0xe2, 0x3f, 0xf1, 0x7b, 0xd0, 0x5c, 0xf7, 0xcc, 0x6e, 0xd0,
	0x9e, 0x71, 0x9f, 0x12, 0x7d, 0x73, 0xbe, 0xf3, 0x9d, 0x73, 0x66, 0xf6, 0xdb, 0xf1, 0xc2, 0x75,
	0xc1, 0xd2, 0x45, 0xd2, 0x67, 0xcd, 0x59, 0xca, 0x33, 0x1e, 0x7d, 0xd6, 0x4b, 0x9a, 0x13, 0x96,
	0xf5, 0xb2, 0x61, 0x32, 0x1d, 0x88, 0xa6, 0x5d, 0x4c, 0x62, 0x36, 0xcd, 0x92, 0x6c, 0x19, 0xb7,
	0xb6, 0x6f, 0x0f, 0x38, 0x1f, 0x8c, 0xd9, 0x03, 0x15, 0x7f, 0x36, 0x3f, 0x7f, 0xc0, 0x26, 0xb3,
	0x6c, 0xa9, 0xe9, 0xdb, 0x1b, 0xfd, 0x94, 0xf5, 0x32, 0xd6, 0x8d, 0xf9, 0xa4, 0x97, 0x4c, 0x2d,
	0x18, 0xb3, 0x31, 0x2b, 0x82, 0xd1, 0xac, 0x97, 0xf5, 0x87, 0x3e, 0x56, 0x1f, 0xb0, 0xac, 0x10,
	0x35, 0x4e, 0x84, 0x85, 0x84, 0xc1, 0x1a, 0x46, 0x23, 0xe5, 0x63, 0x66, 0x21, 0xa3, 0x80, 0xa0,
	0xba, 0xce, 0x8f, 0x90, 0x1b, 0x32, 0x3b, 0x8e, 0x50, 0xb9, 0x25, 0x60, 0x33, 0xdf, 0xce, 0x91,
	0xee, 0x39, 0x4f, 0xbb, 0xba, 0xe7, 0x42, 0x6b, 0x3e, 0x68, 0x84, 0x3d, 0xd0, 0xb4, 0xe6, 0x61,
	0xaa, 0x35, 0x9f, 0xaa, 0xc4, 0x14, 0x94, 0xb8, 0x0a, 0x1a, 0x62, 0xc8, 0x2f, 0xfc, 0xb8, 0x5b,
	0xbd, 0x38, 0x56, 0x35, 0x75, 0x33, 0xee, 0xaf, 0xdc, 0x4d, 0xd9, 0x84, 0x2f, 0x74, 0xd7, 0xdd,
	0xf3, 0x94, 0x4f, 0xfc, 0xe5, 0x6d, 0x49, 0xd4, 0x88, 0xa4, 0x7a, 0x73, 0xbd, 0x67, 0xa8, 0x66,
	0x59, 0x91, 0xfd, 0xc1, 0x9b, 0x6e, 0x07, 0x29, 0x9f, 0xcf, 0x2c, 0x66, 0x9a, 0xc5, 0x58, 0x43,
	0xf7, 0x8a, 0xa1, 0x75, 0xd9, 0xaa, 0x17, 0xa3, 0x3a, 0x55, 0x88, 0xed, 0xf3, 0x0e, 0x82, 0xca,
	0xa3, 0xd6, 0x53, 0xf0, 0x08, 0x37, 0xf1, 0x14, 0x70, 0xf2, 0x3b, 0xa5, 0x21, 0xe0, 0xd5, 0x4f,
	0xfc, 0x19, 0xe0, 0xa5, 0x4f, 0x2f, 0x19, 0x01, 0x5e, 0xbf, 0x69, 0x26, 0xd0, 0x4f, 0x99, 0x3a,
	0xfc, 0xbd, 0xb1, 0x5d, 0x30, 0x63, 0x28, 0x2d, 0x6c, 0xe9, 0x59, 0x94, 0xf0, 0x4d, 0x39, 0x90,
	0x72, 0xb4, 0x1a, 0x41, 0x0e, 0xdb, 0x4e, 0x3f, 0x2f, 0xe2, 0xe5, 0xf9, 0xdc, 0x4b, 0x84, 0x98,
	0xcb, 0x49, 0x8c, 0xd8, 0xb4, 0x7b, 0xb6, 0x2c, 0xe7, 0xbe, 0x5b, 0x08, 0x98, 0xf5, 0x84, 0xb8,
	0xe0, 0x69, 0x6c, 0x4f, 0x46, 0x61, 0x59, 0xfd, 0x63, 0x37, 0x39, 0x65, 0x0b, 0x3e, 0x62, 0x1e,
	0xb6, 0xb9, 0xe8, 0x8d, 0x93, 0x58, 0x0e, 0x03, 0xa3, 0x8d, 0xfe, 0x90, 0xf5, 0x47, 0x18, 0x6a,
	0xfd, 0xfb, 0x05, 0xd4, 0x5f, 0x59, 0xab, 0x78, 0xa3, 0xbd, 0x23, 0xfa, 0x19, 0xd6, 0x8e, 0xd4,
	0x28, 0x5f, 0xa8, 0x03, 0x16, 0xed, 0x36, 0xab, 0x3c, 0xa6, 0x89, 0xe3, 0x4f, 0xd8, 0xdb, 0x39,
	0x13, 0xd9, 0xf6, 0x5e, 0x28, 0x4d, 0xcc, 0xf8, 0x54, 0xb0, 0xfb, 0x57, 0xa2, 0x2e, 0xac, 0xbd,
	0x50, 0x5b, 0x46, 0x2f, 0x00, 0xc7, 0xdb, 0x02, 0xb6, 0x9a, 0xda, 0xf9, 0x9a, 0xd6, 0xf9, 0x9a,
	0xc7, 0xd2, 0xf9, 0xee, 0x5f, 0x89, 0xde, 0xc1, 0xb5, 0xd7, 0x72, 0xeb, 0x4d, 0xfe, 0x9d, 0xea,
	0xfc, 0x28, 0xdc, 0xa6, 0xdf, 0x0d, 0x64, 0xb9, 0xf6, 0x16, 0x70, 0xb5, 0xc3, 0x32, 0xa3, 0xdd,
	0xaa, 0xce, 0xe2, 0x82, 0xad, 0x72, 0x3b, 0x88, 0xe3, 0x74, 0xdf, 0xc1, 0xb5, 0x6f, 0x13, 0x61,
	0x70, 0x41, 0xe9, 0x1a, 0x85, 0x07, 0x74, 0xed, 0xb1, 0x9c, 0xfa, 0x12, 0x40, 0x6f, 0xf7, 0x09,
	0x1f, 0xb3, 0xa8, 0x4d, 0x3d, 0x1c, 0x32, 0xda, 0x6a, 0xef, 0x84, 0x91, 0x9c, 0xf4, 0x0f, 0x00,
	0xfa, 0x7c, 0x50, 0xa5, 0xf3, 0xe8, 0xea, 0xb3, 0xb4, 0x80, 0xab, 0x6a, 0x9b, 0x55, 0xee, 0x16,
	0xf1, 0x4c, 0xe0, 0xd4, 0xed, 0x20, 0x8e, 0x6b, 0x6a, 0x06, 0x1f, 0x76, 0x58, 0xa6, 0x54, 0xbf,
	0x24, 0x9d, 0x07, 0xac, 0xf9, 0x55, 0x00, 0x03, 0x9f, 0x5b, 0xb9, 0xb5, 0x12, 0x15, 0x94, 0x4e,
	0x5d, 0x70, 0x40, 0xa7, 0x88, 0xe3, 0x74, 0xff, 0xa8, 0x41, 0xe4, 0xf0, 0x97, 0x3c, 0x3d, 0x56,
	0xc1, 0xd1, 0xd3, 0x80, 0x6c, 0x8e, 0x65, 0x4b, 0xd9, 0x5f, 0x8d, 0xec, 0x6a, 0x72, 0x1e, 0x69,
	0x8a, 0x21, 0x7b, 0xa4, 0x5f, 0xc6, 0x5e, 0x28, 0xad, 0xec, 0x91, 0xf4, 0x02, 0x70, 0x3c, 0xdd,
	0x23, 0x4d, 0x7e, 0xaa, 0x47, 0xfa, 0xe9, 0x77, 0x03, 0x59, 0x05, 0x8f, 0x34, 0xda, 0x34, 0x8f,
	0xf4, 0x95, 0xdb, 0x41, 0x1c, 0xbc, 0xaf, 0x72, 0xdf, 0x8f, 0xcd, 0x2d, 0x2f, 0x22, 0xda, 0x9d,
	0x8d, 0x0f, 0xd8, 0x57, 0x9f, 0xe6, 0x0a, 0xf8, 0x11, 0xe0, 0xcd, 0x90, 0x5f, 0x98, 0xce, 0xff,
	0x67, 0x7b, 0x28, 0x4e, 0x98, 0x67, 0x41, 0xd9, 0x19, 0xac, 0x1f, 0xc4, 0xb1, 0x3c, 0xd5, 0xa7,
	0xdc, 0x48, 0x3c, 0xaa, 0x4e, 0x55, 0xa0, 0x54, 0x9f, 0x1d, 0x0e, 0x9b, 0x27, 0xea, 0xb2, 0x26,
	0x69, 0x2f, 0x53, 0x3e, 0x31, 0x5a, 0xcf, 0xaa, 0xb5, 0x2e, 0xe3, 0x55, 0x0b, 0x26, 0xd0, 0x38,
	0x88, 0x63, 0x1d, 0x7d, 0xca, 0xcd, 0xab, 0xf5, 0x09, 0xa9, 0x33, 0x9f, 0x54, 0x2d, 0x25, 0x60,
	0x4b, 0xd7, 0xa8, 0x89, 0xb2, 0x4a, 0xa3, 0xf7, 0x35, 0xb5, 0xbb, 0x22, 0x93, 0xf4, 0x30, 0x6a,
	0x1f, 0xe8, 0xc8, 0x0b, 0x6f, 0x44, 0x7e, 0x11, 0xaa, 0xf0, 0x80, 0x87, 0xd1, 0x63, 0xb9, 0x53,
	0xf3, 0x13, 0x5c, 0xd3, 0xde, 0x41, 0x56, 0x47, 0xe1, 0xd5, 0xcd, 0x2d, 0x01, 0x94, 0x09, 0xe8,
	0xec, 0xd4, 0xd7, 0xa1, 0x97, 0x7c, 0x27, 0x8c, 0xe4, 0x3a, 0x13, 0xf0, 0x51, 0x87, 0x65, 0x5a,
	0x98, 0xf6, 0x4e, 0xf4, 0x64, 0x5b, 0x21, 0x14, 0x7c, 0x13, 0x92, 0x0f, 0xbf, 0x82, 0x45, 0x44,
	0x7c, 0x29, 0xea, 0xe8, 0x80, 0x7e, 0x31, 0xc9, 0x49, 0xff, 0x59, 0x83, 0x8d, 0x7c, 0x21, 0x7f,
	0x97, 0xee, 0x87, 0xe4, 0x2b, 0xbd, 0x4c, 0x9f, 0xad, 0xc8, 0x2e, 0x9a, 0x9e, 0x99, 0xc8, 0x7b,
	0x9a, 0x5e, 0xa9, 0xe9, 0x3e, 0xdc, 0x70, 0x0e, 0xa6, 0xb7, 0xfa, 0x61, 0x80, 0xe7, 0x11, 0x0f,
	0xf1, 0x04, 0x36, 0x7c, 0xeb, 0xd2, 0x4a, 0xfb, 0xa1, 0x8e, 0x47, 0x94, 0x1b, 0x40, 0x1d, 0x79,
	0x97, 0xd6, 0x7a, 0x1c, 0xe4, 0x77, 0x44, 0xa1, 0xb7, 0xf0, 0x71, 0xd1, 0xb4, 0xb4, 0xda, 0xf3,
	0x70, 0xb7, 0x23, 0x4a, 0xfe, 0x56, 0x83, 0xba, 0x36, 0xa2, 0x23, 0xf7, 0x3b, 0x99, 0xd2, 0x5c,
	0x91, 0x63, 0x95, 0x9e, 0xac, 0x42, 0x75, 0xa7, 0x67, 0x00, 0x75, 0xed, 0x66, 0x61, 0xc5, 0x14,
	0x39, 0xd5, 0x6d, 0xff, 0x5a, 0x83, 0x75, 0x65, 0x52, 0x48, 0xe8, 0x11, 0xd1, 0xd7, 0xca, 0x3a,
	0x8f, 0x57, 0x60, 0xba, 0x9e, 0x7f, 0xa9, 0xc1, 0xf5, 0x0e, 0xcb, 0x50, 0x21, 0x7b, 0x24, 0xa7,
	0x2b, 0x97, 0xf1, 0x30, 0x98, 0xe7, 0x8a, 0x90, 0xf3, 0x90, 0xb6, 0x91, 0x2f, 0x0a, 0xca, 0x3c,
	0x0a, 0x94, 0x80, 0x79, 0x94, 0x98, 0xae, 0x94, 0x7f, 0x6a, 0x70, 0xab, 0xb0, 0x9a, 0x7b, 0xe7,
	0x41, 0x70, 0xe6, 0x92, 0x81, 0x1e, 0xbe, 0x4f, 0x0a, 0x57, 0xe5, 0xdf, 0x35, 0xd8, 0x7a, 0x25,
	0xc4, 0x9c, 0x9d, 0xf2, 0x11, 0x9b, 0x1e, 0x2e, 0xd1, 0xf6, 0x11, 0xae, 0x26, 0x97, 0x33, 0x6d,
	0x85, 0xdf, 0xac, 0x9e, 0xc0, 0xd5, 0xf7, 0x57, 0x0d, 0x36, 0x71, 0xd0, 0x6b, 0xf3, 0x91, 0x8b,
	0x72, 0x2d, 0xbc, 0x8c, 0x67, 0x6b, 0x7b, 0xbe, 0x2a, 0xdd, 0x55, 0xf6, 0x7b, 0x0d, 0x1a, 0x38,
	0x44, 0xfd, 0xa1, 0xdc, 0x1f, 0x4b, 0x24, 0x5b, 0xd3, 0xd3, 0x95, 0xb8, 0xf8, 0xc6, 0x75, 0xa2,
	0x3e, 0xeb, 0xe9, 0x4a, 0x76, 0x28, 0x5e, 0xeb, 0xc2, 0xab, 0xad, 0x46, 0x3e, 0xdf, 0xdf, 0x99,
	0x4f, 0x84, 0x5a, 0x81, 0xf0, 0x7c, 0x7b, 0x84, 0x80, 0xe7, 0xbb, 0xc0, 0xc3, 0x5f, 0x65, 0x8e,
	0x86, 0xac, 0x3f, 0xd2, 0x05, 0x50, 0x3e, 0x08, 0xb9, 0xe8, 0xca, 0x0e, 0x0f, 0xd7, 0xbe, 0x87,
	0x9c, 0x79, 0xf6, 0x81, 0x5a, 0x6f, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x63, 0x74, 0x16, 0x84,
	0x3c, 0x19, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IdentitydServiceClient is the client API for IdentitydService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IdentitydServiceClient interface {
	CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error)
	DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PatchDomain(ctx context.Context, in *PatchDomainRequest, opts ...grpc.CallOption) (*PatchDomainResponse, error)
	GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*GetDomainResponse, error)
	ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PatchRole(ctx context.Context, in *PatchRoleRequest, opts ...grpc.CallOption) (*PatchRoleResponse, error)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error)
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	ListRolesForEntity(ctx context.Context, in *ListRolesForEntityRequest, opts ...grpc.CallOption) (*ListRolesForEntityResponse, error)
	CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error)
	DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PatchEntity(ctx context.Context, in *PatchEntityRequest, opts ...grpc.CallOption) (*PatchEntityResponse, error)
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error)
	ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error)
	ShowEntity(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ShowEntityResponse, error)
	AddRoleToEntity(ctx context.Context, in *AddRoleToEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveRoleFromEntity(ctx context.Context, in *RemoveRoleFromEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AddEntityToDomain(ctx context.Context, in *AddEntityToDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveEntityFromDomain(ctx context.Context, in *RemoveEntityFromDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PatchGroup(ctx context.Context, in *PatchGroupRequest, opts ...grpc.CallOption) (*PatchGroupResponse, error)
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error)
	ListGroupsForEntity(ctx context.Context, in *ListGroupsForEntityRequest, opts ...grpc.CallOption) (*ListGroupsForEntityResponse, error)
	ShowGroups(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ShowGroupsResponse, error)
	AddRoleToGroup(ctx context.Context, in *AddRoleToGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveRoleFromGroup(ctx context.Context, in *RemoveRoleFromGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AddEntityToGroup(ctx context.Context, in *AddEntityToGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveEntityFromGroup(ctx context.Context, in *RemoveEntityFromGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateCredential(ctx context.Context, in *CreateCredentialRequest, opts ...grpc.CallOption) (*CreateCredentialResponse, error)
	DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PatchCredential(ctx context.Context, in *PatchCredentialRequest, opts ...grpc.CallOption) (*PatchCredentialResponse, error)
	GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error)
	ListCredentials(ctx context.Context, in *ListCredentialsRequest, opts ...grpc.CallOption) (*ListCredentialsResponse, error)
	ListCredentialsForEntity(ctx context.Context, in *ListCredentialsForEntityRequest, opts ...grpc.CallOption) (*ListCredentialsForEntityResponse, error)
	IssueTokenByCredential(ctx context.Context, in *IssueTokenByCredentialRequest, opts ...grpc.CallOption) (*IssueTokenByCredentialResponse, error)
	IssueTokenByPassword(ctx context.Context, in *IssueTokenByPasswordRequest, opts ...grpc.CallOption) (*IssueTokenByPasswordResponse, error)
	IssueTokenByToken(ctx context.Context, in *IssueTokenByTokenRequest, opts ...grpc.CallOption) (*IssueTokenByTokenResponse, error)
	RevokeToken(ctx context.Context, in *RevokeTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
	CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type identitydServiceClient struct {
	cc *grpc.ClientConn
}

func NewIdentitydServiceClient(cc *grpc.ClientConn) IdentitydServiceClient {
	return &identitydServiceClient{cc}
}

func (c *identitydServiceClient) CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error) {
	out := new(CreateDomainResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/CreateDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/DeleteDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchDomain(ctx context.Context, in *PatchDomainRequest, opts ...grpc.CallOption) (*PatchDomainResponse, error) {
	out := new(PatchDomainResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/PatchDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*GetDomainResponse, error) {
	out := new(GetDomainResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/GetDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error) {
	out := new(ListDomainsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchRole(ctx context.Context, in *PatchRoleRequest, opts ...grpc.CallOption) (*PatchRoleResponse, error) {
	out := new(PatchRoleResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/PatchRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListRolesForEntity(ctx context.Context, in *ListRolesForEntityRequest, opts ...grpc.CallOption) (*ListRolesForEntityResponse, error) {
	out := new(ListRolesForEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListRolesForEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error) {
	out := new(CreateEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/CreateEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/DeleteEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchEntity(ctx context.Context, in *PatchEntityRequest, opts ...grpc.CallOption) (*PatchEntityResponse, error) {
	out := new(PatchEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/PatchEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error) {
	out := new(GetEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/GetEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error) {
	out := new(ListEntitiesResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ShowEntity(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ShowEntityResponse, error) {
	out := new(ShowEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ShowEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AddRoleToEntity(ctx context.Context, in *AddRoleToEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/AddRoleToEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RemoveRoleFromEntity(ctx context.Context, in *RemoveRoleFromEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/RemoveRoleFromEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AddEntityToDomain(ctx context.Context, in *AddEntityToDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/AddEntityToDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RemoveEntityFromDomain(ctx context.Context, in *RemoveEntityFromDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/RemoveEntityFromDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchGroup(ctx context.Context, in *PatchGroupRequest, opts ...grpc.CallOption) (*PatchGroupResponse, error) {
	out := new(PatchGroupResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/PatchGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	out := new(ListGroupsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListGroupsForEntity(ctx context.Context, in *ListGroupsForEntityRequest, opts ...grpc.CallOption) (*ListGroupsForEntityResponse, error) {
	out := new(ListGroupsForEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListGroupsForEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ShowGroups(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ShowGroupsResponse, error) {
	out := new(ShowGroupsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ShowGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AddRoleToGroup(ctx context.Context, in *AddRoleToGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/AddRoleToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RemoveRoleFromGroup(ctx context.Context, in *RemoveRoleFromGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/RemoveRoleFromGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AddEntityToGroup(ctx context.Context, in *AddEntityToGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/AddEntityToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RemoveEntityFromGroup(ctx context.Context, in *RemoveEntityFromGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/RemoveEntityFromGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CreateCredential(ctx context.Context, in *CreateCredentialRequest, opts ...grpc.CallOption) (*CreateCredentialResponse, error) {
	out := new(CreateCredentialResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/CreateCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/DeleteCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchCredential(ctx context.Context, in *PatchCredentialRequest, opts ...grpc.CallOption) (*PatchCredentialResponse, error) {
	out := new(PatchCredentialResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/PatchCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error) {
	out := new(GetCredentialResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/GetCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListCredentials(ctx context.Context, in *ListCredentialsRequest, opts ...grpc.CallOption) (*ListCredentialsResponse, error) {
	out := new(ListCredentialsResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListCredentialsForEntity(ctx context.Context, in *ListCredentialsForEntityRequest, opts ...grpc.CallOption) (*ListCredentialsForEntityResponse, error) {
	out := new(ListCredentialsForEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ListCredentialsForEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) IssueTokenByCredential(ctx context.Context, in *IssueTokenByCredentialRequest, opts ...grpc.CallOption) (*IssueTokenByCredentialResponse, error) {
	out := new(IssueTokenByCredentialResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/IssueTokenByCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) IssueTokenByPassword(ctx context.Context, in *IssueTokenByPasswordRequest, opts ...grpc.CallOption) (*IssueTokenByPasswordResponse, error) {
	out := new(IssueTokenByPasswordResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/IssueTokenByPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) IssueTokenByToken(ctx context.Context, in *IssueTokenByTokenRequest, opts ...grpc.CallOption) (*IssueTokenByTokenResponse, error) {
	out := new(IssueTokenByTokenResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/IssueTokenByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RevokeToken(ctx context.Context, in *RevokeTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/RevokeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	out := new(ValidateTokenResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/ValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.identityd2.IdentitydService/CheckToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentitydServiceServer is the server API for IdentitydService service.
type IdentitydServiceServer interface {
	CreateDomain(context.Context, *CreateDomainRequest) (*CreateDomainResponse, error)
	DeleteDomain(context.Context, *DeleteDomainRequest) (*empty.Empty, error)
	PatchDomain(context.Context, *PatchDomainRequest) (*PatchDomainResponse, error)
	GetDomain(context.Context, *GetDomainRequest) (*GetDomainResponse, error)
	ListDomains(context.Context, *ListDomainsRequest) (*ListDomainsResponse, error)
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*empty.Empty, error)
	PatchRole(context.Context, *PatchRoleRequest) (*PatchRoleResponse, error)
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	ListRolesForEntity(context.Context, *ListRolesForEntityRequest) (*ListRolesForEntityResponse, error)
	CreateEntity(context.Context, *CreateEntityRequest) (*CreateEntityResponse, error)
	DeleteEntity(context.Context, *DeleteEntityRequest) (*empty.Empty, error)
	PatchEntity(context.Context, *PatchEntityRequest) (*PatchEntityResponse, error)
	GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error)
	ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error)
	ShowEntity(context.Context, *empty.Empty) (*ShowEntityResponse, error)
	AddRoleToEntity(context.Context, *AddRoleToEntityRequest) (*empty.Empty, error)
	RemoveRoleFromEntity(context.Context, *RemoveRoleFromEntityRequest) (*empty.Empty, error)
	AddEntityToDomain(context.Context, *AddEntityToDomainRequest) (*empty.Empty, error)
	RemoveEntityFromDomain(context.Context, *RemoveEntityFromDomainRequest) (*empty.Empty, error)
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*empty.Empty, error)
	PatchGroup(context.Context, *PatchGroupRequest) (*PatchGroupResponse, error)
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error)
	ListGroupsForEntity(context.Context, *ListGroupsForEntityRequest) (*ListGroupsForEntityResponse, error)
	ShowGroups(context.Context, *empty.Empty) (*ShowGroupsResponse, error)
	AddRoleToGroup(context.Context, *AddRoleToGroupRequest) (*empty.Empty, error)
	RemoveRoleFromGroup(context.Context, *RemoveRoleFromGroupRequest) (*empty.Empty, error)
	AddEntityToGroup(context.Context, *AddEntityToGroupRequest) (*empty.Empty, error)
	RemoveEntityFromGroup(context.Context, *RemoveEntityFromGroupRequest) (*empty.Empty, error)
	CreateCredential(context.Context, *CreateCredentialRequest) (*CreateCredentialResponse, error)
	DeleteCredential(context.Context, *DeleteCredentialRequest) (*empty.Empty, error)
	PatchCredential(context.Context, *PatchCredentialRequest) (*PatchCredentialResponse, error)
	GetCredential(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error)
	ListCredentials(context.Context, *ListCredentialsRequest) (*ListCredentialsResponse, error)
	ListCredentialsForEntity(context.Context, *ListCredentialsForEntityRequest) (*ListCredentialsForEntityResponse, error)
	IssueTokenByCredential(context.Context, *IssueTokenByCredentialRequest) (*IssueTokenByCredentialResponse, error)
	IssueTokenByPassword(context.Context, *IssueTokenByPasswordRequest) (*IssueTokenByPasswordResponse, error)
	IssueTokenByToken(context.Context, *IssueTokenByTokenRequest) (*IssueTokenByTokenResponse, error)
	RevokeToken(context.Context, *RevokeTokenRequest) (*empty.Empty, error)
	ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
	CheckToken(context.Context, *CheckTokenRequest) (*empty.Empty, error)
}

func RegisterIdentitydServiceServer(s *grpc.Server, srv IdentitydServiceServer) {
	s.RegisterService(&_IdentitydService_serviceDesc, srv)
}

func _IdentitydService_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/CreateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateDomain(ctx, req.(*CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/DeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteDomain(ctx, req.(*DeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/PatchDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchDomain(ctx, req.(*PatchDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/GetDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetDomain(ctx, req.(*GetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListDomains(ctx, req.(*ListDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/PatchRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchRole(ctx, req.(*PatchRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListRolesForEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesForEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListRolesForEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListRolesForEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListRolesForEntity(ctx, req.(*ListRolesForEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateEntity(ctx, req.(*CreateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/DeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteEntity(ctx, req.(*DeleteEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/PatchEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchEntity(ctx, req.(*PatchEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/GetEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListEntities(ctx, req.(*ListEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ShowEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ShowEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ShowEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ShowEntity(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AddRoleToEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleToEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AddRoleToEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/AddRoleToEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AddRoleToEntity(ctx, req.(*AddRoleToEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RemoveRoleFromEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RemoveRoleFromEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/RemoveRoleFromEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RemoveRoleFromEntity(ctx, req.(*RemoveRoleFromEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AddEntityToDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEntityToDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AddEntityToDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/AddEntityToDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AddEntityToDomain(ctx, req.(*AddEntityToDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RemoveEntityFromDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEntityFromDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RemoveEntityFromDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/RemoveEntityFromDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RemoveEntityFromDomain(ctx, req.(*RemoveEntityFromDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/PatchGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchGroup(ctx, req.(*PatchGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListGroups(ctx, req.(*ListGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListGroupsForEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsForEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListGroupsForEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListGroupsForEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListGroupsForEntity(ctx, req.(*ListGroupsForEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ShowGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ShowGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ShowGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ShowGroups(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AddRoleToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AddRoleToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/AddRoleToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AddRoleToGroup(ctx, req.(*AddRoleToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RemoveRoleFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RemoveRoleFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/RemoveRoleFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RemoveRoleFromGroup(ctx, req.(*RemoveRoleFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AddEntityToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEntityToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AddEntityToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/AddEntityToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AddEntityToGroup(ctx, req.(*AddEntityToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RemoveEntityFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEntityFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RemoveEntityFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/RemoveEntityFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RemoveEntityFromGroup(ctx, req.(*RemoveEntityFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/CreateCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateCredential(ctx, req.(*CreateCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/DeleteCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteCredential(ctx, req.(*DeleteCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/PatchCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchCredential(ctx, req.(*PatchCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/GetCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetCredential(ctx, req.(*GetCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListCredentials(ctx, req.(*ListCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListCredentialsForEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialsForEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListCredentialsForEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ListCredentialsForEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListCredentialsForEntity(ctx, req.(*ListCredentialsForEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_IssueTokenByCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTokenByCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).IssueTokenByCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/IssueTokenByCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).IssueTokenByCredential(ctx, req.(*IssueTokenByCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_IssueTokenByPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTokenByPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).IssueTokenByPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/IssueTokenByPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).IssueTokenByPassword(ctx, req.(*IssueTokenByPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_IssueTokenByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTokenByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).IssueTokenByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/IssueTokenByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).IssueTokenByToken(ctx, req.(*IssueTokenByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RevokeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RevokeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/RevokeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RevokeToken(ctx, req.(*RevokeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd2.IdentitydService/CheckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CheckToken(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdentitydService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.identityd2.IdentitydService",
	HandlerType: (*IdentitydServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDomain",
			Handler:    _IdentitydService_CreateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _IdentitydService_DeleteDomain_Handler,
		},
		{
			MethodName: "PatchDomain",
			Handler:    _IdentitydService_PatchDomain_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _IdentitydService_GetDomain_Handler,
		},
		{
			MethodName: "ListDomains",
			Handler:    _IdentitydService_ListDomains_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _IdentitydService_CreateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _IdentitydService_DeleteRole_Handler,
		},
		{
			MethodName: "PatchRole",
			Handler:    _IdentitydService_PatchRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _IdentitydService_GetRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _IdentitydService_ListRoles_Handler,
		},
		{
			MethodName: "ListRolesForEntity",
			Handler:    _IdentitydService_ListRolesForEntity_Handler,
		},
		{
			MethodName: "CreateEntity",
			Handler:    _IdentitydService_CreateEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _IdentitydService_DeleteEntity_Handler,
		},
		{
			MethodName: "PatchEntity",
			Handler:    _IdentitydService_PatchEntity_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _IdentitydService_GetEntity_Handler,
		},
		{
			MethodName: "ListEntities",
			Handler:    _IdentitydService_ListEntities_Handler,
		},
		{
			MethodName: "ShowEntity",
			Handler:    _IdentitydService_ShowEntity_Handler,
		},
		{
			MethodName: "AddRoleToEntity",
			Handler:    _IdentitydService_AddRoleToEntity_Handler,
		},
		{
			MethodName: "RemoveRoleFromEntity",
			Handler:    _IdentitydService_RemoveRoleFromEntity_Handler,
		},
		{
			MethodName: "AddEntityToDomain",
			Handler:    _IdentitydService_AddEntityToDomain_Handler,
		},
		{
			MethodName: "RemoveEntityFromDomain",
			Handler:    _IdentitydService_RemoveEntityFromDomain_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _IdentitydService_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _IdentitydService_DeleteGroup_Handler,
		},
		{
			MethodName: "PatchGroup",
			Handler:    _IdentitydService_PatchGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _IdentitydService_GetGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _IdentitydService_ListGroups_Handler,
		},
		{
			MethodName: "ListGroupsForEntity",
			Handler:    _IdentitydService_ListGroupsForEntity_Handler,
		},
		{
			MethodName: "ShowGroups",
			Handler:    _IdentitydService_ShowGroups_Handler,
		},
		{
			MethodName: "AddRoleToGroup",
			Handler:    _IdentitydService_AddRoleToGroup_Handler,
		},
		{
			MethodName: "RemoveRoleFromGroup",
			Handler:    _IdentitydService_RemoveRoleFromGroup_Handler,
		},
		{
			MethodName: "AddEntityToGroup",
			Handler:    _IdentitydService_AddEntityToGroup_Handler,
		},
		{
			MethodName: "RemoveEntityFromGroup",
			Handler:    _IdentitydService_RemoveEntityFromGroup_Handler,
		},
		{
			MethodName: "CreateCredential",
			Handler:    _IdentitydService_CreateCredential_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _IdentitydService_DeleteCredential_Handler,
		},
		{
			MethodName: "PatchCredential",
			Handler:    _IdentitydService_PatchCredential_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _IdentitydService_GetCredential_Handler,
		},
		{
			MethodName: "ListCredentials",
			Handler:    _IdentitydService_ListCredentials_Handler,
		},
		{
			MethodName: "ListCredentialsForEntity",
			Handler:    _IdentitydService_ListCredentialsForEntity_Handler,
		},
		{
			MethodName: "IssueTokenByCredential",
			Handler:    _IdentitydService_IssueTokenByCredential_Handler,
		},
		{
			MethodName: "IssueTokenByPassword",
			Handler:    _IdentitydService_IssueTokenByPassword_Handler,
		},
		{
			MethodName: "IssueTokenByToken",
			Handler:    _IdentitydService_IssueTokenByToken_Handler,
		},
		{
			MethodName: "RevokeToken",
			Handler:    _IdentitydService_RevokeToken_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _IdentitydService_ValidateToken_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _IdentitydService_CheckToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
