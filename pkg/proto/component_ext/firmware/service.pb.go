// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package component_ext_firmware

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 161 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x52, 0x49, 0xcc, 0xd4, 0xcb, 0x4d,
	0x2d, 0x49, 0x2c, 0xc9, 0xc8, 0xcc, 0x4b, 0x2f, 0xd6, 0x4b, 0xce, 0xcf, 0x2d, 0xc8, 0xcf, 0x4b,
	0xcd, 0x2b, 0xd1, 0x4b, 0xad, 0x28, 0xd1, 0x4b, 0xcb, 0x2c, 0xca, 0x2d, 0x4f, 0x2c, 0x4a, 0x95,
	0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0xeb, 0x49, 0x2a, 0x4d, 0xd3, 0x4f, 0xcd,
	0x2d, 0x28, 0xa9, 0x84, 0x18, 0x61, 0x14, 0xc9, 0x25, 0xea, 0x9b, 0x9f, 0x52, 0x9a, 0x93, 0xea,
	0x06, 0x55, 0x1e, 0x0c, 0xb1, 0x41, 0xc8, 0x81, 0x8b, 0x27, 0xb8, 0x32, 0x2f, 0x19, 0x26, 0x2c,
	0x24, 0xa6, 0x07, 0x31, 0x46, 0x0f, 0x66, 0x8c, 0x9e, 0x2b, 0xc8, 0x18, 0x29, 0x1c, 0xe2, 0x4a,
	0x0c, 0x4e, 0x12, 0x51, 0x62, 0x70, 0x17, 0xc5, 0xa7, 0x56, 0x94, 0xc4, 0xc3, 0x5c, 0x94, 0xc4,
	0x06, 0x56, 0x6b, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xfa, 0x9e, 0x90, 0xcf, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ModuleFirmwareServiceClient is the client API for ModuleFirmwareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ModuleFirmwareServiceClient interface {
	SyncFirmware(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type moduleFirmwareServiceClient struct {
	cc *grpc.ClientConn
}

func NewModuleFirmwareServiceClient(cc *grpc.ClientConn) ModuleFirmwareServiceClient {
	return &moduleFirmwareServiceClient{cc}
}

func (c *moduleFirmwareServiceClient) SyncFirmware(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.component.ext.firmware.ModuleFirmwareService/SyncFirmware", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModuleFirmwareServiceServer is the server API for ModuleFirmwareService service.
type ModuleFirmwareServiceServer interface {
	SyncFirmware(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedModuleFirmwareServiceServer can be embedded to have forward compatible implementations.
type UnimplementedModuleFirmwareServiceServer struct {
}

func (*UnimplementedModuleFirmwareServiceServer) SyncFirmware(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncFirmware not implemented")
}

func RegisterModuleFirmwareServiceServer(s *grpc.Server, srv ModuleFirmwareServiceServer) {
	s.RegisterService(&_ModuleFirmwareService_serviceDesc, srv)
}

func _ModuleFirmwareService_SyncFirmware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleFirmwareServiceServer).SyncFirmware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.component.ext.firmware.ModuleFirmwareService/SyncFirmware",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleFirmwareServiceServer).SyncFirmware(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ModuleFirmwareService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.component.ext.firmware.ModuleFirmwareService",
	HandlerType: (*ModuleFirmwareServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncFirmware",
			Handler:    _ModuleFirmwareService_SyncFirmware_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
