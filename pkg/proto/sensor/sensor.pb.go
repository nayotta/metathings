// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sensor.proto

package sensor

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SensorState int32

const (
	SensorState_SENSOR_STATE_UNKNOWN SensorState = 0
	SensorState_SENSOR_STATE_ON      SensorState = 1
	SensorState_SENSOR_STATE_OFF     SensorState = 2
)

var SensorState_name = map[int32]string{
	0: "SENSOR_STATE_UNKNOWN",
	1: "SENSOR_STATE_ON",
	2: "SENSOR_STATE_OFF",
}

var SensorState_value = map[string]int32{
	"SENSOR_STATE_UNKNOWN": 0,
	"SENSOR_STATE_ON":      1,
	"SENSOR_STATE_OFF":     2,
}

func (x SensorState) String() string {
	return proto.EnumName(SensorState_name, int32(x))
}

func (SensorState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c749425f02243e2d, []int{0}
}

type SensorValue struct {
	// Types that are valid to be assigned to Value:
	//	*SensorValue_Double
	//	*SensorValue_Float
	//	*SensorValue_Int64
	//	*SensorValue_Uint64
	//	*SensorValue_Int32
	//	*SensorValue_Uint32
	//	*SensorValue_String_
	Value                isSensorValue_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SensorValue) Reset()         { *m = SensorValue{} }
func (m *SensorValue) String() string { return proto.CompactTextString(m) }
func (*SensorValue) ProtoMessage()    {}
func (*SensorValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_c749425f02243e2d, []int{0}
}

func (m *SensorValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensorValue.Unmarshal(m, b)
}
func (m *SensorValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensorValue.Marshal(b, m, deterministic)
}
func (m *SensorValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorValue.Merge(m, src)
}
func (m *SensorValue) XXX_Size() int {
	return xxx_messageInfo_SensorValue.Size(m)
}
func (m *SensorValue) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorValue.DiscardUnknown(m)
}

var xxx_messageInfo_SensorValue proto.InternalMessageInfo

type isSensorValue_Value interface {
	isSensorValue_Value()
}

type SensorValue_Double struct {
	Double float64 `protobuf:"fixed64,1,opt,name=double,proto3,oneof"`
}

type SensorValue_Float struct {
	Float float32 `protobuf:"fixed32,2,opt,name=float,proto3,oneof"`
}

type SensorValue_Int64 struct {
	Int64 int64 `protobuf:"varint,3,opt,name=int64,proto3,oneof"`
}

type SensorValue_Uint64 struct {
	Uint64 uint64 `protobuf:"varint,4,opt,name=uint64,proto3,oneof"`
}

type SensorValue_Int32 struct {
	Int32 int32 `protobuf:"varint,5,opt,name=int32,proto3,oneof"`
}

type SensorValue_Uint32 struct {
	Uint32 uint32 `protobuf:"varint,6,opt,name=uint32,proto3,oneof"`
}

type SensorValue_String_ struct {
	String_ string `protobuf:"bytes,7,opt,name=string,proto3,oneof"`
}

func (*SensorValue_Double) isSensorValue_Value() {}

func (*SensorValue_Float) isSensorValue_Value() {}

func (*SensorValue_Int64) isSensorValue_Value() {}

func (*SensorValue_Uint64) isSensorValue_Value() {}

func (*SensorValue_Int32) isSensorValue_Value() {}

func (*SensorValue_Uint32) isSensorValue_Value() {}

func (*SensorValue_String_) isSensorValue_Value() {}

func (m *SensorValue) GetValue() isSensorValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SensorValue) GetDouble() float64 {
	if x, ok := m.GetValue().(*SensorValue_Double); ok {
		return x.Double
	}
	return 0
}

func (m *SensorValue) GetFloat() float32 {
	if x, ok := m.GetValue().(*SensorValue_Float); ok {
		return x.Float
	}
	return 0
}

func (m *SensorValue) GetInt64() int64 {
	if x, ok := m.GetValue().(*SensorValue_Int64); ok {
		return x.Int64
	}
	return 0
}

func (m *SensorValue) GetUint64() uint64 {
	if x, ok := m.GetValue().(*SensorValue_Uint64); ok {
		return x.Uint64
	}
	return 0
}

func (m *SensorValue) GetInt32() int32 {
	if x, ok := m.GetValue().(*SensorValue_Int32); ok {
		return x.Int32
	}
	return 0
}

func (m *SensorValue) GetUint32() uint32 {
	if x, ok := m.GetValue().(*SensorValue_Uint32); ok {
		return x.Uint32
	}
	return 0
}

func (m *SensorValue) GetString_() string {
	if x, ok := m.GetValue().(*SensorValue_String_); ok {
		return x.String_
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SensorValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SensorValue_OneofMarshaler, _SensorValue_OneofUnmarshaler, _SensorValue_OneofSizer, []interface{}{
		(*SensorValue_Double)(nil),
		(*SensorValue_Float)(nil),
		(*SensorValue_Int64)(nil),
		(*SensorValue_Uint64)(nil),
		(*SensorValue_Int32)(nil),
		(*SensorValue_Uint32)(nil),
		(*SensorValue_String_)(nil),
	}
}

func _SensorValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SensorValue)
	// value
	switch x := m.Value.(type) {
	case *SensorValue_Double:
		b.EncodeVarint(1<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.Double))
	case *SensorValue_Float:
		b.EncodeVarint(2<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(math.Float32bits(x.Float)))
	case *SensorValue_Int64:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int64))
	case *SensorValue_Uint64:
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Uint64))
	case *SensorValue_Int32:
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int32))
	case *SensorValue_Uint32:
		b.EncodeVarint(6<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Uint32))
	case *SensorValue_String_:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.String_)
	case nil:
	default:
		return fmt.Errorf("SensorValue.Value has unexpected type %T", x)
	}
	return nil
}

func _SensorValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SensorValue)
	switch tag {
	case 1: // value.double
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &SensorValue_Double{math.Float64frombits(x)}
		return true, err
	case 2: // value.float
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Value = &SensorValue_Float{math.Float32frombits(uint32(x))}
		return true, err
	case 3: // value.int64
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &SensorValue_Int64{int64(x)}
		return true, err
	case 4: // value.uint64
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &SensorValue_Uint64{x}
		return true, err
	case 5: // value.int32
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &SensorValue_Int32{int32(x)}
		return true, err
	case 6: // value.uint32
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &SensorValue_Uint32{uint32(x)}
		return true, err
	case 7: // value.string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &SensorValue_String_{x}
		return true, err
	default:
		return false, nil
	}
}

func _SensorValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SensorValue)
	// value
	switch x := m.Value.(type) {
	case *SensorValue_Double:
		n += 1 // tag and wire
		n += 8
	case *SensorValue_Float:
		n += 1 // tag and wire
		n += 4
	case *SensorValue_Int64:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Int64))
	case *SensorValue_Uint64:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Uint64))
	case *SensorValue_Int32:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Int32))
	case *SensorValue_Uint32:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Uint32))
	case *SensorValue_String_:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.String_)))
		n += len(x.String_)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SensorData struct {
	Data                 map[string]*SensorValue `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SensorData) Reset()         { *m = SensorData{} }
func (m *SensorData) String() string { return proto.CompactTextString(m) }
func (*SensorData) ProtoMessage()    {}
func (*SensorData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c749425f02243e2d, []int{1}
}

func (m *SensorData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensorData.Unmarshal(m, b)
}
func (m *SensorData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensorData.Marshal(b, m, deterministic)
}
func (m *SensorData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorData.Merge(m, src)
}
func (m *SensorData) XXX_Size() int {
	return xxx_messageInfo_SensorData.Size(m)
}
func (m *SensorData) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorData.DiscardUnknown(m)
}

var xxx_messageInfo_SensorData proto.InternalMessageInfo

func (m *SensorData) GetData() map[string]*SensorValue {
	if m != nil {
		return m.Data
	}
	return nil
}

type Sensor struct {
	Name                 string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	State                SensorState             `protobuf:"varint,2,opt,name=state,proto3,enum=ai.metathings.service.sensor.SensorState" json:"state,omitempty"`
	Config               map[string]*SensorValue `protobuf:"bytes,3,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Sensor) Reset()         { *m = Sensor{} }
func (m *Sensor) String() string { return proto.CompactTextString(m) }
func (*Sensor) ProtoMessage()    {}
func (*Sensor) Descriptor() ([]byte, []int) {
	return fileDescriptor_c749425f02243e2d, []int{2}
}

func (m *Sensor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sensor.Unmarshal(m, b)
}
func (m *Sensor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sensor.Marshal(b, m, deterministic)
}
func (m *Sensor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sensor.Merge(m, src)
}
func (m *Sensor) XXX_Size() int {
	return xxx_messageInfo_Sensor.Size(m)
}
func (m *Sensor) XXX_DiscardUnknown() {
	xxx_messageInfo_Sensor.DiscardUnknown(m)
}

var xxx_messageInfo_Sensor proto.InternalMessageInfo

func (m *Sensor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Sensor) GetState() SensorState {
	if m != nil {
		return m.State
	}
	return SensorState_SENSOR_STATE_UNKNOWN
}

func (m *Sensor) GetConfig() map[string]*SensorValue {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterEnum("ai.metathings.service.sensor.SensorState", SensorState_name, SensorState_value)
	proto.RegisterType((*SensorValue)(nil), "ai.metathings.service.sensor.SensorValue")
	proto.RegisterType((*SensorData)(nil), "ai.metathings.service.sensor.SensorData")
	proto.RegisterMapType((map[string]*SensorValue)(nil), "ai.metathings.service.sensor.SensorData.DataEntry")
	proto.RegisterType((*Sensor)(nil), "ai.metathings.service.sensor.Sensor")
	proto.RegisterMapType((map[string]*SensorValue)(nil), "ai.metathings.service.sensor.Sensor.ConfigEntry")
}

func init() { proto.RegisterFile("sensor.proto", fileDescriptor_c749425f02243e2d) }

var fileDescriptor_c749425f02243e2d = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xdf, 0x8a, 0xd4, 0x30,
	0x14, 0xc6, 0x27, 0xed, 0x4c, 0x97, 0x39, 0xe3, 0x9f, 0x12, 0x17, 0x09, 0x83, 0x48, 0x98, 0xab,
	0xe8, 0x45, 0x56, 0x5a, 0x11, 0xf1, 0x46, 0xfc, 0x33, 0xc3, 0x80, 0xd0, 0x81, 0x74, 0xd5, 0xcb,
	0x25, 0xdd, 0xc9, 0xd4, 0x62, 0xb7, 0x19, 0xda, 0x74, 0x65, 0x1f, 0xc2, 0xf7, 0xf1, 0x09, 0x7c,
	0x2e, 0x49, 0xd2, 0x51, 0xf7, 0x46, 0xe6, 0xc6, 0x9b, 0x92, 0x73, 0xbe, 0xf3, 0x3b, 0x5f, 0xf3,
	0x11, 0xb8, 0xd3, 0xa9, 0xa6, 0xd3, 0x2d, 0xdf, 0xb7, 0xda, 0x68, 0xfc, 0x48, 0x56, 0xfc, 0x4a,
	0x19, 0x69, 0xbe, 0x54, 0x4d, 0xd9, 0xf1, 0x4e, 0xb5, 0xd7, 0xd5, 0xa5, 0xe2, 0x7e, 0x66, 0xfe,
	0xb8, 0xd4, 0xba, 0xac, 0xd5, 0x99, 0x9b, 0x2d, 0xfa, 0xdd, 0xd9, 0xb7, 0x56, 0xee, 0xf7, 0xaa,
	0xed, 0x3c, 0xbd, 0xf8, 0x89, 0x60, 0x96, 0xbb, 0xd1, 0x4f, 0xb2, 0xee, 0x15, 0x26, 0x10, 0x6d,
	0x75, 0x5f, 0xd4, 0x8a, 0x20, 0x8a, 0x18, 0x5a, 0x8f, 0xc4, 0x50, 0xe3, 0x87, 0x30, 0xd9, 0xd5,
	0x5a, 0x1a, 0x12, 0x50, 0xc4, 0x82, 0xf5, 0x48, 0xf8, 0xd2, 0xf6, 0xab, 0xc6, 0xbc, 0x78, 0x4e,
	0x42, 0x8a, 0x58, 0x68, 0xfb, 0xae, 0xb4, 0x9b, 0x7a, 0x2f, 0x8c, 0x29, 0x62, 0x63, 0xbb, 0xc9,
	0xd7, 0x03, 0x91, 0x26, 0x64, 0x42, 0x11, 0x9b, 0x0c, 0x44, 0x9a, 0x1c, 0x88, 0x34, 0x21, 0x11,
	0x45, 0xec, 0xee, 0x81, 0xf0, 0x4a, 0x67, 0xda, 0xaa, 0x29, 0xc9, 0x09, 0x45, 0x6c, 0x6a, 0x15,
	0x5f, 0xbf, 0x3d, 0x81, 0xc9, 0xb5, 0xfd, 0xf1, 0xc5, 0x0f, 0x04, 0xe0, 0x2f, 0xf2, 0x5e, 0x1a,
	0x89, 0x57, 0x30, 0xde, 0x4a, 0x23, 0x09, 0xa2, 0x21, 0x9b, 0x25, 0x09, 0xff, 0x57, 0x48, 0xfc,
	0x0f, 0xc7, 0xed, 0x67, 0xd9, 0x98, 0xf6, 0x46, 0x38, 0x7e, 0x5e, 0xc0, 0xf4, 0x77, 0x0b, 0xc7,
	0x10, 0x7e, 0x55, 0x37, 0x2e, 0x99, 0xa9, 0xb0, 0x47, 0xfc, 0x7a, 0xb0, 0x77, 0xa1, 0xcc, 0x92,
	0x27, 0xc7, 0xf8, 0xb8, 0xa0, 0x85, 0xe7, 0x5e, 0x05, 0x2f, 0xd1, 0xe2, 0x7b, 0x00, 0x91, 0x97,
	0x30, 0x86, 0x71, 0x23, 0xaf, 0xd4, 0x60, 0xe1, 0xce, 0xd6, 0xa3, 0x33, 0xd2, 0x78, 0x8f, 0x7b,
	0xc7, 0x79, 0xe4, 0x16, 0x10, 0x9e, 0xc3, 0x6b, 0x88, 0x2e, 0x75, 0xb3, 0xab, 0x4a, 0x12, 0xba,
	0x34, 0x9e, 0x1d, 0xb3, 0x81, 0xbf, 0x73, 0x88, 0xcf, 0x62, 0xe0, 0xe7, 0x5b, 0x98, 0xfd, 0xd5,
	0xfe, 0x4f, 0x79, 0x3c, 0x15, 0x87, 0x27, 0xe9, 0x6e, 0x81, 0x09, 0x9c, 0xe6, 0xcb, 0x2c, 0xdf,
	0x88, 0x8b, 0xfc, 0xfc, 0xcd, 0xf9, 0xf2, 0xe2, 0x63, 0xf6, 0x21, 0xdb, 0x7c, 0xce, 0xe2, 0x11,
	0x7e, 0x00, 0xf7, 0x6f, 0x29, 0x9b, 0x2c, 0x46, 0xf8, 0x14, 0xe2, 0xdb, 0xcd, 0xd5, 0x2a, 0x0e,
	0x8a, 0xc8, 0x3d, 0xf7, 0xf4, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x10, 0x10, 0x5f, 0x37, 0x3c,
	0x03, 0x00, 0x00,
}
