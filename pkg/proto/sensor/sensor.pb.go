// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sensor.proto

package sensor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import any "github.com/golang/protobuf/ptypes/any"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SensorState int32

const (
	SensorState_SENSOR_STATE_UNKNOWN SensorState = 0
	SensorState_SENSOR_STATE_ON      SensorState = 1
	SensorState_SENSOR_STATE_OFF     SensorState = 2
)

var SensorState_name = map[int32]string{
	0: "SENSOR_STATE_UNKNOWN",
	1: "SENSOR_STATE_ON",
	2: "SENSOR_STATE_OFF",
}
var SensorState_value = map[string]int32{
	"SENSOR_STATE_UNKNOWN": 0,
	"SENSOR_STATE_ON":      1,
	"SENSOR_STATE_OFF":     2,
}

func (x SensorState) String() string {
	return proto.EnumName(SensorState_name, int32(x))
}
func (SensorState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sensor_33fa7e995b05b059, []int{0}
}

type SensorData struct {
	// Types that are valid to be assigned to Value:
	//	*SensorData_Double
	//	*SensorData_Float
	//	*SensorData_Int64
	//	*SensorData_Uint64
	//	*SensorData_Int32
	//	*SensorData_Uint32
	//	*SensorData_Bool
	//	*SensorData_String_
	//	*SensorData_Any
	Value                isSensorData_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SensorData) Reset()         { *m = SensorData{} }
func (m *SensorData) String() string { return proto.CompactTextString(m) }
func (*SensorData) ProtoMessage()    {}
func (*SensorData) Descriptor() ([]byte, []int) {
	return fileDescriptor_sensor_33fa7e995b05b059, []int{0}
}
func (m *SensorData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensorData.Unmarshal(m, b)
}
func (m *SensorData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensorData.Marshal(b, m, deterministic)
}
func (dst *SensorData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorData.Merge(dst, src)
}
func (m *SensorData) XXX_Size() int {
	return xxx_messageInfo_SensorData.Size(m)
}
func (m *SensorData) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorData.DiscardUnknown(m)
}

var xxx_messageInfo_SensorData proto.InternalMessageInfo

type isSensorData_Value interface {
	isSensorData_Value()
}

type SensorData_Double struct {
	Double float64 `protobuf:"fixed64,1,opt,name=double,oneof"`
}
type SensorData_Float struct {
	Float float32 `protobuf:"fixed32,2,opt,name=float,oneof"`
}
type SensorData_Int64 struct {
	Int64 int64 `protobuf:"varint,3,opt,name=int64,oneof"`
}
type SensorData_Uint64 struct {
	Uint64 uint64 `protobuf:"varint,4,opt,name=uint64,oneof"`
}
type SensorData_Int32 struct {
	Int32 int32 `protobuf:"varint,5,opt,name=int32,oneof"`
}
type SensorData_Uint32 struct {
	Uint32 uint32 `protobuf:"varint,6,opt,name=uint32,oneof"`
}
type SensorData_Bool struct {
	Bool bool `protobuf:"varint,7,opt,name=bool,oneof"`
}
type SensorData_String_ struct {
	String_ string `protobuf:"bytes,8,opt,name=string,oneof"`
}
type SensorData_Any struct {
	Any *any.Any `protobuf:"bytes,9,opt,name=any,oneof"`
}

func (*SensorData_Double) isSensorData_Value()  {}
func (*SensorData_Float) isSensorData_Value()   {}
func (*SensorData_Int64) isSensorData_Value()   {}
func (*SensorData_Uint64) isSensorData_Value()  {}
func (*SensorData_Int32) isSensorData_Value()   {}
func (*SensorData_Uint32) isSensorData_Value()  {}
func (*SensorData_Bool) isSensorData_Value()    {}
func (*SensorData_String_) isSensorData_Value() {}
func (*SensorData_Any) isSensorData_Value()     {}

func (m *SensorData) GetValue() isSensorData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SensorData) GetDouble() float64 {
	if x, ok := m.GetValue().(*SensorData_Double); ok {
		return x.Double
	}
	return 0
}

func (m *SensorData) GetFloat() float32 {
	if x, ok := m.GetValue().(*SensorData_Float); ok {
		return x.Float
	}
	return 0
}

func (m *SensorData) GetInt64() int64 {
	if x, ok := m.GetValue().(*SensorData_Int64); ok {
		return x.Int64
	}
	return 0
}

func (m *SensorData) GetUint64() uint64 {
	if x, ok := m.GetValue().(*SensorData_Uint64); ok {
		return x.Uint64
	}
	return 0
}

func (m *SensorData) GetInt32() int32 {
	if x, ok := m.GetValue().(*SensorData_Int32); ok {
		return x.Int32
	}
	return 0
}

func (m *SensorData) GetUint32() uint32 {
	if x, ok := m.GetValue().(*SensorData_Uint32); ok {
		return x.Uint32
	}
	return 0
}

func (m *SensorData) GetBool() bool {
	if x, ok := m.GetValue().(*SensorData_Bool); ok {
		return x.Bool
	}
	return false
}

func (m *SensorData) GetString_() string {
	if x, ok := m.GetValue().(*SensorData_String_); ok {
		return x.String_
	}
	return ""
}

func (m *SensorData) GetAny() *any.Any {
	if x, ok := m.GetValue().(*SensorData_Any); ok {
		return x.Any
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SensorData) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SensorData_OneofMarshaler, _SensorData_OneofUnmarshaler, _SensorData_OneofSizer, []interface{}{
		(*SensorData_Double)(nil),
		(*SensorData_Float)(nil),
		(*SensorData_Int64)(nil),
		(*SensorData_Uint64)(nil),
		(*SensorData_Int32)(nil),
		(*SensorData_Uint32)(nil),
		(*SensorData_Bool)(nil),
		(*SensorData_String_)(nil),
		(*SensorData_Any)(nil),
	}
}

func _SensorData_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SensorData)
	// value
	switch x := m.Value.(type) {
	case *SensorData_Double:
		b.EncodeVarint(1<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.Double))
	case *SensorData_Float:
		b.EncodeVarint(2<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(math.Float32bits(x.Float)))
	case *SensorData_Int64:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int64))
	case *SensorData_Uint64:
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Uint64))
	case *SensorData_Int32:
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int32))
	case *SensorData_Uint32:
		b.EncodeVarint(6<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Uint32))
	case *SensorData_Bool:
		t := uint64(0)
		if x.Bool {
			t = 1
		}
		b.EncodeVarint(7<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *SensorData_String_:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.String_)
	case *SensorData_Any:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Any); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SensorData.Value has unexpected type %T", x)
	}
	return nil
}

func _SensorData_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SensorData)
	switch tag {
	case 1: // value.double
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &SensorData_Double{math.Float64frombits(x)}
		return true, err
	case 2: // value.float
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Value = &SensorData_Float{math.Float32frombits(uint32(x))}
		return true, err
	case 3: // value.int64
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &SensorData_Int64{int64(x)}
		return true, err
	case 4: // value.uint64
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &SensorData_Uint64{x}
		return true, err
	case 5: // value.int32
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &SensorData_Int32{int32(x)}
		return true, err
	case 6: // value.uint32
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &SensorData_Uint32{uint32(x)}
		return true, err
	case 7: // value.bool
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &SensorData_Bool{x != 0}
		return true, err
	case 8: // value.string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &SensorData_String_{x}
		return true, err
	case 9: // value.any
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(any.Any)
		err := b.DecodeMessage(msg)
		m.Value = &SensorData_Any{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SensorData_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SensorData)
	// value
	switch x := m.Value.(type) {
	case *SensorData_Double:
		n += 1 // tag and wire
		n += 8
	case *SensorData_Float:
		n += 1 // tag and wire
		n += 4
	case *SensorData_Int64:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Int64))
	case *SensorData_Uint64:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Uint64))
	case *SensorData_Int32:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Int32))
	case *SensorData_Uint32:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Uint32))
	case *SensorData_Bool:
		n += 1 // tag and wire
		n += 1
	case *SensorData_String_:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.String_)))
		n += len(x.String_)
	case *SensorData_Any:
		s := proto.Size(x.Any)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SensorConfig struct {
	// Types that are valid to be assigned to Value:
	//	*SensorConfig_Dobule
	//	*SensorConfig_Float
	//	*SensorConfig_Int64
	//	*SensorConfig_Uint64
	//	*SensorConfig_Int32
	//	*SensorConfig_Uint32
	//	*SensorConfig_Bool
	//	*SensorConfig_String_
	//	*SensorConfig_Bytes
	//	*SensorConfig_Any
	Value                isSensorConfig_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SensorConfig) Reset()         { *m = SensorConfig{} }
func (m *SensorConfig) String() string { return proto.CompactTextString(m) }
func (*SensorConfig) ProtoMessage()    {}
func (*SensorConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_sensor_33fa7e995b05b059, []int{1}
}
func (m *SensorConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensorConfig.Unmarshal(m, b)
}
func (m *SensorConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensorConfig.Marshal(b, m, deterministic)
}
func (dst *SensorConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorConfig.Merge(dst, src)
}
func (m *SensorConfig) XXX_Size() int {
	return xxx_messageInfo_SensorConfig.Size(m)
}
func (m *SensorConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SensorConfig proto.InternalMessageInfo

type isSensorConfig_Value interface {
	isSensorConfig_Value()
}

type SensorConfig_Dobule struct {
	Dobule *wrappers.DoubleValue `protobuf:"bytes,1,opt,name=dobule,oneof"`
}
type SensorConfig_Float struct {
	Float *wrappers.FloatValue `protobuf:"bytes,2,opt,name=float,oneof"`
}
type SensorConfig_Int64 struct {
	Int64 *wrappers.Int64Value `protobuf:"bytes,3,opt,name=int64,oneof"`
}
type SensorConfig_Uint64 struct {
	Uint64 *wrappers.UInt64Value `protobuf:"bytes,4,opt,name=uint64,oneof"`
}
type SensorConfig_Int32 struct {
	Int32 *wrappers.Int32Value `protobuf:"bytes,5,opt,name=int32,oneof"`
}
type SensorConfig_Uint32 struct {
	Uint32 *wrappers.UInt32Value `protobuf:"bytes,6,opt,name=uint32,oneof"`
}
type SensorConfig_Bool struct {
	Bool *wrappers.BoolValue `protobuf:"bytes,7,opt,name=bool,oneof"`
}
type SensorConfig_String_ struct {
	String_ *wrappers.StringValue `protobuf:"bytes,8,opt,name=string,oneof"`
}
type SensorConfig_Bytes struct {
	Bytes *wrappers.BytesValue `protobuf:"bytes,9,opt,name=bytes,oneof"`
}
type SensorConfig_Any struct {
	Any *any.Any `protobuf:"bytes,10,opt,name=any,oneof"`
}

func (*SensorConfig_Dobule) isSensorConfig_Value()  {}
func (*SensorConfig_Float) isSensorConfig_Value()   {}
func (*SensorConfig_Int64) isSensorConfig_Value()   {}
func (*SensorConfig_Uint64) isSensorConfig_Value()  {}
func (*SensorConfig_Int32) isSensorConfig_Value()   {}
func (*SensorConfig_Uint32) isSensorConfig_Value()  {}
func (*SensorConfig_Bool) isSensorConfig_Value()    {}
func (*SensorConfig_String_) isSensorConfig_Value() {}
func (*SensorConfig_Bytes) isSensorConfig_Value()   {}
func (*SensorConfig_Any) isSensorConfig_Value()     {}

func (m *SensorConfig) GetValue() isSensorConfig_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SensorConfig) GetDobule() *wrappers.DoubleValue {
	if x, ok := m.GetValue().(*SensorConfig_Dobule); ok {
		return x.Dobule
	}
	return nil
}

func (m *SensorConfig) GetFloat() *wrappers.FloatValue {
	if x, ok := m.GetValue().(*SensorConfig_Float); ok {
		return x.Float
	}
	return nil
}

func (m *SensorConfig) GetInt64() *wrappers.Int64Value {
	if x, ok := m.GetValue().(*SensorConfig_Int64); ok {
		return x.Int64
	}
	return nil
}

func (m *SensorConfig) GetUint64() *wrappers.UInt64Value {
	if x, ok := m.GetValue().(*SensorConfig_Uint64); ok {
		return x.Uint64
	}
	return nil
}

func (m *SensorConfig) GetInt32() *wrappers.Int32Value {
	if x, ok := m.GetValue().(*SensorConfig_Int32); ok {
		return x.Int32
	}
	return nil
}

func (m *SensorConfig) GetUint32() *wrappers.UInt32Value {
	if x, ok := m.GetValue().(*SensorConfig_Uint32); ok {
		return x.Uint32
	}
	return nil
}

func (m *SensorConfig) GetBool() *wrappers.BoolValue {
	if x, ok := m.GetValue().(*SensorConfig_Bool); ok {
		return x.Bool
	}
	return nil
}

func (m *SensorConfig) GetString_() *wrappers.StringValue {
	if x, ok := m.GetValue().(*SensorConfig_String_); ok {
		return x.String_
	}
	return nil
}

func (m *SensorConfig) GetBytes() *wrappers.BytesValue {
	if x, ok := m.GetValue().(*SensorConfig_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (m *SensorConfig) GetAny() *any.Any {
	if x, ok := m.GetValue().(*SensorConfig_Any); ok {
		return x.Any
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SensorConfig) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SensorConfig_OneofMarshaler, _SensorConfig_OneofUnmarshaler, _SensorConfig_OneofSizer, []interface{}{
		(*SensorConfig_Dobule)(nil),
		(*SensorConfig_Float)(nil),
		(*SensorConfig_Int64)(nil),
		(*SensorConfig_Uint64)(nil),
		(*SensorConfig_Int32)(nil),
		(*SensorConfig_Uint32)(nil),
		(*SensorConfig_Bool)(nil),
		(*SensorConfig_String_)(nil),
		(*SensorConfig_Bytes)(nil),
		(*SensorConfig_Any)(nil),
	}
}

func _SensorConfig_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SensorConfig)
	// value
	switch x := m.Value.(type) {
	case *SensorConfig_Dobule:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Dobule); err != nil {
			return err
		}
	case *SensorConfig_Float:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Float); err != nil {
			return err
		}
	case *SensorConfig_Int64:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Int64); err != nil {
			return err
		}
	case *SensorConfig_Uint64:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Uint64); err != nil {
			return err
		}
	case *SensorConfig_Int32:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Int32); err != nil {
			return err
		}
	case *SensorConfig_Uint32:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Uint32); err != nil {
			return err
		}
	case *SensorConfig_Bool:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bool); err != nil {
			return err
		}
	case *SensorConfig_String_:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.String_); err != nil {
			return err
		}
	case *SensorConfig_Bytes:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bytes); err != nil {
			return err
		}
	case *SensorConfig_Any:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Any); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SensorConfig.Value has unexpected type %T", x)
	}
	return nil
}

func _SensorConfig_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SensorConfig)
	switch tag {
	case 1: // value.dobule
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(wrappers.DoubleValue)
		err := b.DecodeMessage(msg)
		m.Value = &SensorConfig_Dobule{msg}
		return true, err
	case 2: // value.float
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(wrappers.FloatValue)
		err := b.DecodeMessage(msg)
		m.Value = &SensorConfig_Float{msg}
		return true, err
	case 3: // value.int64
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(wrappers.Int64Value)
		err := b.DecodeMessage(msg)
		m.Value = &SensorConfig_Int64{msg}
		return true, err
	case 4: // value.uint64
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(wrappers.UInt64Value)
		err := b.DecodeMessage(msg)
		m.Value = &SensorConfig_Uint64{msg}
		return true, err
	case 5: // value.int32
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(wrappers.Int32Value)
		err := b.DecodeMessage(msg)
		m.Value = &SensorConfig_Int32{msg}
		return true, err
	case 6: // value.uint32
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(wrappers.UInt32Value)
		err := b.DecodeMessage(msg)
		m.Value = &SensorConfig_Uint32{msg}
		return true, err
	case 7: // value.bool
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(wrappers.BoolValue)
		err := b.DecodeMessage(msg)
		m.Value = &SensorConfig_Bool{msg}
		return true, err
	case 8: // value.string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(wrappers.StringValue)
		err := b.DecodeMessage(msg)
		m.Value = &SensorConfig_String_{msg}
		return true, err
	case 9: // value.bytes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(wrappers.BytesValue)
		err := b.DecodeMessage(msg)
		m.Value = &SensorConfig_Bytes{msg}
		return true, err
	case 10: // value.any
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(any.Any)
		err := b.DecodeMessage(msg)
		m.Value = &SensorConfig_Any{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SensorConfig_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SensorConfig)
	// value
	switch x := m.Value.(type) {
	case *SensorConfig_Dobule:
		s := proto.Size(x.Dobule)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SensorConfig_Float:
		s := proto.Size(x.Float)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SensorConfig_Int64:
		s := proto.Size(x.Int64)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SensorConfig_Uint64:
		s := proto.Size(x.Uint64)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SensorConfig_Int32:
		s := proto.Size(x.Int32)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SensorConfig_Uint32:
		s := proto.Size(x.Uint32)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SensorConfig_Bool:
		s := proto.Size(x.Bool)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SensorConfig_String_:
		s := proto.Size(x.String_)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SensorConfig_Bytes:
		s := proto.Size(x.Bytes)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SensorConfig_Any:
		s := proto.Size(x.Any)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Sensor struct {
	Name                 string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	State                SensorState              `protobuf:"varint,2,opt,name=state,enum=ai.metathings.service.sensor.SensorState" json:"state,omitempty"`
	Config               map[string]*SensorConfig `protobuf:"bytes,3,rep,name=config" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Sensor) Reset()         { *m = Sensor{} }
func (m *Sensor) String() string { return proto.CompactTextString(m) }
func (*Sensor) ProtoMessage()    {}
func (*Sensor) Descriptor() ([]byte, []int) {
	return fileDescriptor_sensor_33fa7e995b05b059, []int{2}
}
func (m *Sensor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sensor.Unmarshal(m, b)
}
func (m *Sensor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sensor.Marshal(b, m, deterministic)
}
func (dst *Sensor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sensor.Merge(dst, src)
}
func (m *Sensor) XXX_Size() int {
	return xxx_messageInfo_Sensor.Size(m)
}
func (m *Sensor) XXX_DiscardUnknown() {
	xxx_messageInfo_Sensor.DiscardUnknown(m)
}

var xxx_messageInfo_Sensor proto.InternalMessageInfo

func (m *Sensor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Sensor) GetState() SensorState {
	if m != nil {
		return m.State
	}
	return SensorState_SENSOR_STATE_UNKNOWN
}

func (m *Sensor) GetConfig() map[string]*SensorConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*SensorData)(nil), "ai.metathings.service.sensor.SensorData")
	proto.RegisterType((*SensorConfig)(nil), "ai.metathings.service.sensor.SensorConfig")
	proto.RegisterType((*Sensor)(nil), "ai.metathings.service.sensor.Sensor")
	proto.RegisterMapType((map[string]*SensorConfig)(nil), "ai.metathings.service.sensor.Sensor.ConfigEntry")
	proto.RegisterEnum("ai.metathings.service.sensor.SensorState", SensorState_name, SensorState_value)
}

func init() { proto.RegisterFile("sensor.proto", fileDescriptor_sensor_33fa7e995b05b059) }

var fileDescriptor_sensor_33fa7e995b05b059 = []byte{
	// 571 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4f, 0x6f, 0xd3, 0x4c,
	0x10, 0xc6, 0xb3, 0x76, 0x9c, 0xb6, 0xeb, 0xbe, 0x2f, 0xd1, 0x12, 0x21, 0x13, 0x2a, 0x64, 0xf5,
	0x64, 0x7a, 0x70, 0xab, 0x5d, 0x14, 0x21, 0x2e, 0xd0, 0xd0, 0x44, 0x41, 0x48, 0x89, 0x64, 0xb7,
	0x70, 0xac, 0xd6, 0x65, 0x13, 0x2c, 0x5c, 0x6f, 0x64, 0x6f, 0x8a, 0xfc, 0x01, 0xb8, 0xf2, 0x35,
	0xf8, 0x9a, 0x68, 0xff, 0x38, 0x38, 0x24, 0x45, 0xe5, 0x96, 0xd9, 0x99, 0xdf, 0x8c, 0xe7, 0x79,
	0x26, 0xf0, 0xb0, 0x64, 0x79, 0xc9, 0x8b, 0x70, 0x59, 0x70, 0xc1, 0xd1, 0x11, 0x4d, 0xc3, 0x5b,
	0x26, 0xa8, 0xf8, 0x92, 0xe6, 0x8b, 0x32, 0x2c, 0x59, 0x71, 0x97, 0xde, 0xb0, 0x50, 0xd7, 0xf4,
	0x9f, 0x2f, 0x38, 0x5f, 0x64, 0xec, 0x54, 0xd5, 0x26, 0xab, 0xf9, 0xe9, 0xb7, 0x82, 0x2e, 0x97,
	0xac, 0x28, 0x35, 0xdd, 0x7f, 0xfa, 0x67, 0x9e, 0xe6, 0x95, 0x4e, 0x1d, 0x7f, 0xb7, 0x20, 0x8c,
	0x55, 0x97, 0x0b, 0x2a, 0x28, 0xf2, 0x60, 0xe7, 0x33, 0x5f, 0x25, 0x19, 0xf3, 0x80, 0x0f, 0x02,
	0x30, 0x69, 0x45, 0x26, 0x46, 0x4f, 0xa0, 0x33, 0xcf, 0x38, 0x15, 0x9e, 0xe5, 0x83, 0xc0, 0x9a,
	0xb4, 0x22, 0x1d, 0xca, 0xf7, 0x34, 0x17, 0x83, 0x97, 0x9e, 0xed, 0x83, 0xc0, 0x96, 0xef, 0x2a,
	0x94, 0x9d, 0x56, 0x3a, 0xd1, 0xf6, 0x41, 0xd0, 0x96, 0x9d, 0x74, 0x6c, 0x08, 0x82, 0x3d, 0xc7,
	0x07, 0x81, 0x63, 0x08, 0x82, 0x6b, 0x82, 0x60, 0xaf, 0xe3, 0x83, 0xe0, 0xbf, 0x9a, 0x20, 0x18,
	0xf5, 0x60, 0x3b, 0xe1, 0x3c, 0xf3, 0xf6, 0x7c, 0x10, 0xec, 0x4f, 0x5a, 0x91, 0x8a, 0x64, 0x7d,
	0x29, 0x8a, 0x34, 0x5f, 0x78, 0xfb, 0x3e, 0x08, 0x0e, 0x64, 0xbd, 0x8e, 0x51, 0x00, 0x6d, 0x9a,
	0x57, 0xde, 0x81, 0x0f, 0x02, 0x17, 0xf7, 0x42, 0xbd, 0x7d, 0x58, 0x6f, 0x1f, 0x9e, 0xe7, 0xd5,
	0xa4, 0x15, 0xc9, 0x92, 0xe1, 0x1e, 0x74, 0xee, 0x68, 0xb6, 0x62, 0xc7, 0x3f, 0xdb, 0xf0, 0x50,
	0xeb, 0xf0, 0x8e, 0xe7, 0xf3, 0x74, 0x81, 0x06, 0x52, 0x89, 0x64, 0x65, 0x94, 0x70, 0xf1, 0xd1,
	0x56, 0x9b, 0x0b, 0x25, 0xcc, 0x47, 0x89, 0x6b, 0x9d, 0x64, 0x35, 0x22, 0x4d, 0x9d, 0x5c, 0xfc,
	0x6c, 0x0b, 0x1b, 0xcb, 0x6c, 0x4d, 0x19, 0x11, 0x49, 0x53, 0xc4, 0x5d, 0xd0, 0x7b, 0x99, 0x5d,
	0x43, 0x5a, 0xc7, 0xc1, 0x86, 0xc2, 0xbb, 0xbe, 0xf0, 0x6a, 0x03, 0xab, 0xf5, 0x27, 0x4d, 0xfd,
	0xef, 0x19, 0x46, 0x70, 0x73, 0x18, 0xc1, 0xf5, 0x30, 0x63, 0xce, 0x7d, 0xc3, 0x7e, 0x63, 0xb5,
	0x75, 0x67, 0x0d, 0xeb, 0x5c, 0xdc, 0xdf, 0xa2, 0x86, 0x9c, 0x67, 0x35, 0xa3, 0x6d, 0x1d, 0x6c,
	0xd8, 0xba, 0x6b, 0x52, 0xac, 0xd2, 0xeb, 0x49, 0xc6, 0x74, 0x02, 0x9d, 0xa4, 0x12, 0xac, 0x34,
	0xb6, 0x6f, 0xaf, 0x35, 0x94, 0xd9, 0xf5, 0x5a, 0xaa, 0xb6, 0xbe, 0x14, 0xf8, 0x0f, 0x97, 0xf2,
	0xc3, 0x82, 0x1d, 0x7d, 0x29, 0x08, 0xc1, 0x76, 0x4e, 0x6f, 0xf5, 0x85, 0x1c, 0x44, 0xea, 0x37,
	0x7a, 0x03, 0x9d, 0x52, 0x50, 0xc1, 0x94, 0xff, 0xff, 0xe3, 0x17, 0xe1, 0xdf, 0xfe, 0xb9, 0xa1,
	0x6e, 0x14, 0x4b, 0x20, 0xd2, 0x1c, 0x9a, 0xc0, 0xce, 0x8d, 0x3a, 0x41, 0xcf, 0xf6, 0xed, 0xc0,
	0xc5, 0x67, 0x0f, 0xe9, 0x10, 0xea, 0xab, 0x1d, 0xe5, 0xa2, 0xa8, 0x22, 0xc3, 0xf7, 0x19, 0x74,
	0x1b, 0xcf, 0xa8, 0x0b, 0xed, 0xaf, 0xac, 0x32, 0x1f, 0x2b, 0x7f, 0xa2, 0xb7, 0x66, 0x27, 0x73,
	0xab, 0x27, 0x0f, 0x99, 0xa4, 0x3b, 0x46, 0x1a, 0x7c, 0x6d, 0xbd, 0x02, 0x27, 0x11, 0x74, 0x1b,
	0x6b, 0x20, 0x0f, 0xf6, 0xe2, 0xd1, 0x34, 0x9e, 0x45, 0xd7, 0xf1, 0xe5, 0xf9, 0xe5, 0xe8, 0xfa,
	0x6a, 0xfa, 0x61, 0x3a, 0xfb, 0x34, 0xed, 0xb6, 0xd0, 0x63, 0xf8, 0x68, 0x23, 0x33, 0x9b, 0x76,
	0x01, 0xea, 0xc1, 0xee, 0xe6, 0xe3, 0x78, 0xdc, 0xb5, 0x92, 0x8e, 0xb2, 0x80, 0xfc, 0x0a, 0x00,
	0x00, 0xff, 0xff, 0xb2, 0x15, 0x89, 0x5a, 0x06, 0x05, 0x00, 0x00,
}
