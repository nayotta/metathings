// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sensor.proto

package sensor

import go_proto_validators "github.com/mwitkow/go-proto-validators"
import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *SensorData) Validate() error {
	if oneOfNester, ok := this.GetValue().(*SensorData_Any); ok {
		if oneOfNester.Any != nil {
			if err := go_proto_validators.CallValidatorIfExists(oneOfNester.Any); err != nil {
				return go_proto_validators.FieldError("Any", err)
			}
		}
	}
	return nil
}
func (this *SensorConfig) Validate() error {
	if oneOfNester, ok := this.GetValue().(*SensorConfig_Dobule); ok {
		if oneOfNester.Dobule != nil {
			if err := go_proto_validators.CallValidatorIfExists(oneOfNester.Dobule); err != nil {
				return go_proto_validators.FieldError("Dobule", err)
			}
		}
	}
	if oneOfNester, ok := this.GetValue().(*SensorConfig_Float); ok {
		if oneOfNester.Float != nil {
			if err := go_proto_validators.CallValidatorIfExists(oneOfNester.Float); err != nil {
				return go_proto_validators.FieldError("Float", err)
			}
		}
	}
	if oneOfNester, ok := this.GetValue().(*SensorConfig_Int64); ok {
		if oneOfNester.Int64 != nil {
			if err := go_proto_validators.CallValidatorIfExists(oneOfNester.Int64); err != nil {
				return go_proto_validators.FieldError("Int64", err)
			}
		}
	}
	if oneOfNester, ok := this.GetValue().(*SensorConfig_Uint64); ok {
		if oneOfNester.Uint64 != nil {
			if err := go_proto_validators.CallValidatorIfExists(oneOfNester.Uint64); err != nil {
				return go_proto_validators.FieldError("Uint64", err)
			}
		}
	}
	if oneOfNester, ok := this.GetValue().(*SensorConfig_Int32); ok {
		if oneOfNester.Int32 != nil {
			if err := go_proto_validators.CallValidatorIfExists(oneOfNester.Int32); err != nil {
				return go_proto_validators.FieldError("Int32", err)
			}
		}
	}
	if oneOfNester, ok := this.GetValue().(*SensorConfig_Uint32); ok {
		if oneOfNester.Uint32 != nil {
			if err := go_proto_validators.CallValidatorIfExists(oneOfNester.Uint32); err != nil {
				return go_proto_validators.FieldError("Uint32", err)
			}
		}
	}
	if oneOfNester, ok := this.GetValue().(*SensorConfig_Bool); ok {
		if oneOfNester.Bool != nil {
			if err := go_proto_validators.CallValidatorIfExists(oneOfNester.Bool); err != nil {
				return go_proto_validators.FieldError("Bool", err)
			}
		}
	}
	if oneOfNester, ok := this.GetValue().(*SensorConfig_String_); ok {
		if oneOfNester.String_ != nil {
			if err := go_proto_validators.CallValidatorIfExists(oneOfNester.String_); err != nil {
				return go_proto_validators.FieldError("String_", err)
			}
		}
	}
	if oneOfNester, ok := this.GetValue().(*SensorConfig_Bytes); ok {
		if oneOfNester.Bytes != nil {
			if err := go_proto_validators.CallValidatorIfExists(oneOfNester.Bytes); err != nil {
				return go_proto_validators.FieldError("Bytes", err)
			}
		}
	}
	if oneOfNester, ok := this.GetValue().(*SensorConfig_Any); ok {
		if oneOfNester.Any != nil {
			if err := go_proto_validators.CallValidatorIfExists(oneOfNester.Any); err != nil {
				return go_proto_validators.FieldError("Any", err)
			}
		}
	}
	return nil
}
func (this *Sensor) Validate() error {
	// Validation of proto3 map<> fields is unsupported.
	return nil
}
