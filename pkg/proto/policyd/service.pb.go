// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package policyd

import (
	context "context"
	fmt "fmt"
	proto1 "github.com/casbin/casbin-server/proto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EnforceBucketRequest struct {
	Requests             []*proto1.EnforceRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *EnforceBucketRequest) Reset()         { *m = EnforceBucketRequest{} }
func (m *EnforceBucketRequest) String() string { return proto.CompactTextString(m) }
func (*EnforceBucketRequest) ProtoMessage()    {}
func (*EnforceBucketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *EnforceBucketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnforceBucketRequest.Unmarshal(m, b)
}
func (m *EnforceBucketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnforceBucketRequest.Marshal(b, m, deterministic)
}
func (m *EnforceBucketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnforceBucketRequest.Merge(m, src)
}
func (m *EnforceBucketRequest) XXX_Size() int {
	return xxx_messageInfo_EnforceBucketRequest.Size(m)
}
func (m *EnforceBucketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnforceBucketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnforceBucketRequest proto.InternalMessageInfo

func (m *EnforceBucketRequest) GetRequests() []*proto1.EnforceRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

func init() {
	proto.RegisterType((*EnforceBucketRequest)(nil), "ai.metathings.service.policyd.EnforceBucketRequest")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 625 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xf1, 0x6f, 0xd2, 0x40,
	0x14, 0xc7, 0x35, 0x26, 0x4e, 0x1e, 0x82, 0xa3, 0x63, 0x38, 0xc8, 0x34, 0xba, 0x9f, 0xfc, 0xc5,
	0x2e, 0x32, 0xb7, 0xe9, 0xcc, 0x94, 0x32, 0x11, 0x96, 0x38, 0x46, 0x20, 0x4b, 0x8c, 0xbf, 0x1d,
	0xed, 0xc9, 0x4e, 0xdb, 0x5e, 0xbd, 0x1e, 0x5b, 0xf0, 0x2f, 0xf3, 0xcf, 0x33, 0xeb, 0xdd, 0x75,
	0x85, 0x14, 0xe4, 0xca, 0x7e, 0x02, 0xde, 0xbd, 0xef, 0xe7, 0xbd, 0xbb, 0x7e, 0xe9, 0x3d, 0x28,
	0x84, 0x98, 0x5d, 0x11, 0x1b, 0x9b, 0x01, 0xa3, 0x9c, 0x1a, 0xcf, 0x10, 0x31, 0x3d, 0xcc, 0x11,
	0xbf, 0x24, 0xfe, 0x28, 0x34, 0xe3, 0x45, 0xea, 0x12, 0x7b, 0xe2, 0xd4, 0xea, 0x23, 0xc2, 0x2f,
	0xc7, 0x43, 0xd3, 0xa6, 0xde, 0xae, 0x8d, 0xc2, 0x21, 0xf1, 0xe5, 0xc7, 0xeb, 0x9b, 0x4c, 0xcc,
	0x76, 0x23, 0x8a, 0x8c, 0x09, 0xe4, 0xce, 0x29, 0x94, 0x5b, 0xfe, 0x0f, 0xca, 0x6c, 0xdc, 0x1c,
	0xdb, 0xbf, 0x30, 0xef, 0xe3, 0xdf, 0x63, 0x1c, 0x72, 0xe3, 0x0d, 0x3c, 0x62, 0xe2, 0x6b, 0xb8,
	0x75, 0xff, 0xc5, 0x83, 0x57, 0xf9, 0xfa, 0xa6, 0x50, 0x98, 0x32, 0x5d, 0x26, 0xf6, 0xe3, 0xb4,
	0xfa, 0xdf, 0x4d, 0x28, 0xf6, 0x44, 0x2b, 0x03, 0xd1, 0x99, 0x71, 0x02, 0xf9, 0x2e, 0xbe, 0x96,
	0x0a, 0x66, 0x54, 0x25, 0x22, 0x11, 0x93, 0x98, 0xda, 0xd3, 0xb4, 0xa5, 0xc0, 0x9d, 0xec, 0xdc,
	0x33, 0x1a, 0x00, 0x5d, 0x7c, 0x6d, 0x39, 0x28, 0xe0, 0x98, 0x19, 0x5b, 0xb7, 0x89, 0x32, 0xa4,
	0x10, 0x95, 0x94, 0x15, 0x41, 0x78, 0x0b, 0x6b, 0x12, 0x6a, 0xa4, 0xef, 0xa2, 0xb6, 0x2e, 0xc3,
	0x4d, 0x4a, 0x5d, 0xa5, 0x3a, 0x00, 0xf8, 0x4a, 0x91, 0x23, 0xb6, 0x64, 0x6c, 0x28, 0xa1, 0x17,
	0xf0, 0x89, 0x92, 0x95, 0xa6, 0x83, 0xb1, 0x6e, 0x80, 0xae, 0xb0, 0xb6, 0x6e, 0x1f, 0x72, 0x96,
	0xa3, 0xca, 0x95, 0x65, 0x86, 0xf8, 0xb9, 0xa8, 0xcd, 0x23, 0x28, 0x5a, 0x8e, 0xd3, 0x45, 0x1e,
	0xd6, 0xd7, 0xbe, 0x83, 0xc7, 0x7d, 0xec, 0xd1, 0xb8, 0xd9, 0xe5, 0x95, 0xc7, 0x50, 0x12, 0xca,
	0x6c, 0x85, 0x3b, 0x50, 0x16, 0xf2, 0x2f, 0xc4, 0xe5, 0x98, 0xc5, 0x84, 0x6d, 0x99, 0x3b, 0x1d,
	0x5e, 0x44, 0x3a, 0x83, 0xea, 0x34, 0x29, 0xd9, 0x90, 0x3e, 0xee, 0x10, 0x72, 0x6d, 0xcc, 0x17,
	0x3d, 0x3b, 0x15, 0xb4, 0x18, 0x43, 0x93, 0xfa, 0xe7, 0xdb, 0x03, 0x29, 0xb6, 0x31, 0xff, 0xff,
	0x69, 0xcc, 0x91, 0x77, 0xa0, 0xd4, 0xc6, 0x5c, 0xeb, 0x34, 0xe6, 0x90, 0xce, 0xa0, 0x92, 0x20,
	0x2d, 0x7f, 0x1a, 0x73, 0xf7, 0x55, 0xb2, 0x1c, 0xa7, 0xcd, 0xe8, 0x38, 0x20, 0xfe, 0x48, 0xfb,
	0x41, 0x37, 0xa1, 0xa2, 0xdc, 0x99, 0x99, 0xd1, 0x50, 0x66, 0xc9, 0x4c, 0x68, 0x29, 0x93, 0xac,
	0xd6, 0x48, 0x0f, 0xb6, 0xa7, 0xbd, 0x36, 0x43, 0xd2, 0xb7, 0xdb, 0x05, 0xbc, 0x4c, 0x71, 0xef,
	0xca, 0xd8, 0x4f, 0x91, 0x9b, 0x66, 0x30, 0x3a, 0x6e, 0x6e, 0x45, 0x26, 0x5a, 0xfe, 0xb4, 0xe6,
	0x60, 0x7a, 0x50, 0x4d, 0x78, 0x51, 0x6b, 0x5b, 0x73, 0x88, 0x17, 0xf0, 0x7c, 0xd6, 0xdd, 0x77,
	0x81, 0x3d, 0x8a, 0xfe, 0xbd, 0x96, 0xeb, 0x0e, 0xc6, 0xc3, 0x9f, 0xd8, 0xe6, 0xe1, 0xe2, 0xf7,
	0x76, 0xa4, 0x56, 0xda, 0x13, 0xd8, 0x10, 0xda, 0xa8, 0x9b, 0x18, 0xa0, 0x6e, 0xb4, 0x01, 0xf1,
	0x02, 0x17, 0xb7, 0xe3, 0xab, 0x35, 0x1d, 0xf2, 0x1e, 0x0a, 0x02, 0x72, 0xae, 0x5d, 0xbf, 0x09,
	0x46, 0xa2, 0xfe, 0xf9, 0x6a, 0xe5, 0x2d, 0x9b, 0x13, 0xea, 0x67, 0x2f, 0xaf, 0xf4, 0x7a, 0xe5,
	0x0f, 0x21, 0x2f, 0x18, 0x7d, 0xea, 0x62, 0x9d, 0xe2, 0x0d, 0x58, 0x4f, 0x14, 0x17, 0x6a, 0xbd,
	0xd2, 0xfb, 0x90, 0xeb, 0xa0, 0x30, 0xcb, 0xad, 0xdb, 0x41, 0x61, 0xb6, 0xcb, 0xef, 0x18, 0x4a,
	0x1d, 0x14, 0xae, 0xf2, 0x4a, 0x55, 0xa5, 0x33, 0x33, 0xbe, 0x41, 0x61, 0x6a, 0xec, 0x33, 0xf6,
	0xcc, 0x85, 0xb3, 0xa5, 0x99, 0x36, 0x24, 0xa6, 0x92, 0x3f, 0xc0, 0x93, 0x9b, 0x29, 0x86, 0xe1,
	0x30, 0xbe, 0x46, 0x97, 0x6f, 0xeb, 0x23, 0x18, 0x72, 0x1e, 0xc9, 0xa6, 0x3f, 0x00, 0x38, 0xf5,
	0x09, 0x27, 0xc8, 0x25, 0x7f, 0xf0, 0xf2, 0xa3, 0x57, 0x33, 0xf7, 0x7d, 0x4d, 0x6e, 0x74, 0xf8,
	0x30, 0x5a, 0xde, 0xfb, 0x17, 0x00, 0x00, 0xff, 0xff, 0xac, 0x74, 0x4c, 0x40, 0x7b, 0x0b, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PolicydServiceClient is the client API for PolicydService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolicydServiceClient interface {
	// Casbin server functions
	NewEnforcer(ctx context.Context, in *proto1.NewEnforcerRequest, opts ...grpc.CallOption) (*proto1.NewEnforcerReply, error)
	NewAdapter(ctx context.Context, in *proto1.NewAdapterRequest, opts ...grpc.CallOption) (*proto1.NewAdapterReply, error)
	Enforce(ctx context.Context, in *proto1.EnforceRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	LoadPolicy(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.EmptyReply, error)
	SavePolicy(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.EmptyReply, error)
	AddPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	AddNamedPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	RemovePolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	RemoveNamedPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	RemoveFilteredPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	RemoveFilteredNamedPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	GetPolicy(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error)
	GetNamedPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error)
	GetFilteredPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error)
	GetFilteredNamedPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error)
	AddGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	AddNamedGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	RemoveGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	RemoveNamedGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	RemoveFilteredGroupingPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	RemoveFilteredNamedGroupingPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	GetGroupingPolicy(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error)
	GetNamedGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error)
	GetFilteredGroupingPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error)
	GetFilteredNamedGroupingPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error)
	GetAllSubjects(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error)
	GetAllNamedSubjects(ctx context.Context, in *proto1.SimpleGetRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error)
	GetAllObjects(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error)
	GetAllNamedObjects(ctx context.Context, in *proto1.SimpleGetRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error)
	GetAllActions(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error)
	GetAllNamedActions(ctx context.Context, in *proto1.SimpleGetRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error)
	GetAllRoles(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error)
	GetAllNamedRoles(ctx context.Context, in *proto1.SimpleGetRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error)
	HasPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	HasNamedPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	HasGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	HasNamedGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	// Custom functions
	EnforceBucket(ctx context.Context, in *EnforceBucketRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	AddPresetPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	RemovePresetPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error)
	Initialize(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.EmptyReply, error)
}

type policydServiceClient struct {
	cc *grpc.ClientConn
}

func NewPolicydServiceClient(cc *grpc.ClientConn) PolicydServiceClient {
	return &policydServiceClient{cc}
}

func (c *policydServiceClient) NewEnforcer(ctx context.Context, in *proto1.NewEnforcerRequest, opts ...grpc.CallOption) (*proto1.NewEnforcerReply, error) {
	out := new(proto1.NewEnforcerReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/NewEnforcer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) NewAdapter(ctx context.Context, in *proto1.NewAdapterRequest, opts ...grpc.CallOption) (*proto1.NewAdapterReply, error) {
	out := new(proto1.NewAdapterReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/NewAdapter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) Enforce(ctx context.Context, in *proto1.EnforceRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/Enforce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) LoadPolicy(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.EmptyReply, error) {
	out := new(proto1.EmptyReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/LoadPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) SavePolicy(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.EmptyReply, error) {
	out := new(proto1.EmptyReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/SavePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) AddPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/AddPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) AddNamedPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/AddNamedPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) RemovePolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/RemovePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) RemoveNamedPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/RemoveNamedPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) RemoveFilteredPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/RemoveFilteredPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) RemoveFilteredNamedPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/RemoveFilteredNamedPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetPolicy(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error) {
	out := new(proto1.Array2DReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetNamedPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error) {
	out := new(proto1.Array2DReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetNamedPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetFilteredPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error) {
	out := new(proto1.Array2DReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetFilteredPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetFilteredNamedPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error) {
	out := new(proto1.Array2DReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetFilteredNamedPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) AddGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/AddGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) AddNamedGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/AddNamedGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) RemoveGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/RemoveGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) RemoveNamedGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/RemoveNamedGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) RemoveFilteredGroupingPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/RemoveFilteredGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) RemoveFilteredNamedGroupingPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/RemoveFilteredNamedGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetGroupingPolicy(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error) {
	out := new(proto1.Array2DReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetNamedGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error) {
	out := new(proto1.Array2DReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetNamedGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetFilteredGroupingPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error) {
	out := new(proto1.Array2DReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetFilteredGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetFilteredNamedGroupingPolicy(ctx context.Context, in *proto1.FilteredPolicyRequest, opts ...grpc.CallOption) (*proto1.Array2DReply, error) {
	out := new(proto1.Array2DReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetFilteredNamedGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetAllSubjects(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error) {
	out := new(proto1.ArrayReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetAllSubjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetAllNamedSubjects(ctx context.Context, in *proto1.SimpleGetRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error) {
	out := new(proto1.ArrayReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetAllNamedSubjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetAllObjects(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error) {
	out := new(proto1.ArrayReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetAllObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetAllNamedObjects(ctx context.Context, in *proto1.SimpleGetRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error) {
	out := new(proto1.ArrayReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetAllNamedObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetAllActions(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error) {
	out := new(proto1.ArrayReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetAllActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetAllNamedActions(ctx context.Context, in *proto1.SimpleGetRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error) {
	out := new(proto1.ArrayReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetAllNamedActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetAllRoles(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error) {
	out := new(proto1.ArrayReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetAllRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) GetAllNamedRoles(ctx context.Context, in *proto1.SimpleGetRequest, opts ...grpc.CallOption) (*proto1.ArrayReply, error) {
	out := new(proto1.ArrayReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/GetAllNamedRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) HasPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/HasPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) HasNamedPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/HasNamedPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) HasGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/HasGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) HasNamedGroupingPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/HasNamedGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) EnforceBucket(ctx context.Context, in *EnforceBucketRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/EnforceBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) AddPresetPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/AddPresetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) RemovePresetPolicy(ctx context.Context, in *proto1.PolicyRequest, opts ...grpc.CallOption) (*proto1.BoolReply, error) {
	out := new(proto1.BoolReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/RemovePresetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policydServiceClient) Initialize(ctx context.Context, in *proto1.EmptyRequest, opts ...grpc.CallOption) (*proto1.EmptyReply, error) {
	out := new(proto1.EmptyReply)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.policyd.PolicydService/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicydServiceServer is the server API for PolicydService service.
type PolicydServiceServer interface {
	// Casbin server functions
	NewEnforcer(context.Context, *proto1.NewEnforcerRequest) (*proto1.NewEnforcerReply, error)
	NewAdapter(context.Context, *proto1.NewAdapterRequest) (*proto1.NewAdapterReply, error)
	Enforce(context.Context, *proto1.EnforceRequest) (*proto1.BoolReply, error)
	LoadPolicy(context.Context, *proto1.EmptyRequest) (*proto1.EmptyReply, error)
	SavePolicy(context.Context, *proto1.EmptyRequest) (*proto1.EmptyReply, error)
	AddPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	AddNamedPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	RemovePolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	RemoveNamedPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	RemoveFilteredPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.BoolReply, error)
	RemoveFilteredNamedPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.BoolReply, error)
	GetPolicy(context.Context, *proto1.EmptyRequest) (*proto1.Array2DReply, error)
	GetNamedPolicy(context.Context, *proto1.PolicyRequest) (*proto1.Array2DReply, error)
	GetFilteredPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.Array2DReply, error)
	GetFilteredNamedPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.Array2DReply, error)
	AddGroupingPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	AddNamedGroupingPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	RemoveGroupingPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	RemoveNamedGroupingPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	RemoveFilteredGroupingPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.BoolReply, error)
	RemoveFilteredNamedGroupingPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.BoolReply, error)
	GetGroupingPolicy(context.Context, *proto1.EmptyRequest) (*proto1.Array2DReply, error)
	GetNamedGroupingPolicy(context.Context, *proto1.PolicyRequest) (*proto1.Array2DReply, error)
	GetFilteredGroupingPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.Array2DReply, error)
	GetFilteredNamedGroupingPolicy(context.Context, *proto1.FilteredPolicyRequest) (*proto1.Array2DReply, error)
	GetAllSubjects(context.Context, *proto1.EmptyRequest) (*proto1.ArrayReply, error)
	GetAllNamedSubjects(context.Context, *proto1.SimpleGetRequest) (*proto1.ArrayReply, error)
	GetAllObjects(context.Context, *proto1.EmptyRequest) (*proto1.ArrayReply, error)
	GetAllNamedObjects(context.Context, *proto1.SimpleGetRequest) (*proto1.ArrayReply, error)
	GetAllActions(context.Context, *proto1.EmptyRequest) (*proto1.ArrayReply, error)
	GetAllNamedActions(context.Context, *proto1.SimpleGetRequest) (*proto1.ArrayReply, error)
	GetAllRoles(context.Context, *proto1.EmptyRequest) (*proto1.ArrayReply, error)
	GetAllNamedRoles(context.Context, *proto1.SimpleGetRequest) (*proto1.ArrayReply, error)
	HasPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	HasNamedPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	HasGroupingPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	HasNamedGroupingPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	// Custom functions
	EnforceBucket(context.Context, *EnforceBucketRequest) (*proto1.BoolReply, error)
	AddPresetPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	RemovePresetPolicy(context.Context, *proto1.PolicyRequest) (*proto1.BoolReply, error)
	Initialize(context.Context, *proto1.EmptyRequest) (*proto1.EmptyReply, error)
}

func RegisterPolicydServiceServer(s *grpc.Server, srv PolicydServiceServer) {
	s.RegisterService(&_PolicydService_serviceDesc, srv)
}

func _PolicydService_NewEnforcer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.NewEnforcerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).NewEnforcer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/NewEnforcer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).NewEnforcer(ctx, req.(*proto1.NewEnforcerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_NewAdapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.NewAdapterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).NewAdapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/NewAdapter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).NewAdapter(ctx, req.(*proto1.NewAdapterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_Enforce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.EnforceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).Enforce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/Enforce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).Enforce(ctx, req.(*proto1.EnforceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_LoadPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).LoadPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/LoadPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).LoadPolicy(ctx, req.(*proto1.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_SavePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).SavePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/SavePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).SavePolicy(ctx, req.(*proto1.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_AddPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).AddPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/AddPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).AddPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_AddNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).AddNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/AddNamedPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).AddNamedPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_RemovePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).RemovePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/RemovePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).RemovePolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_RemoveNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).RemoveNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/RemoveNamedPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).RemoveNamedPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_RemoveFilteredPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).RemoveFilteredPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/RemoveFilteredPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).RemoveFilteredPolicy(ctx, req.(*proto1.FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_RemoveFilteredNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).RemoveFilteredNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/RemoveFilteredNamedPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).RemoveFilteredNamedPolicy(ctx, req.(*proto1.FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetPolicy(ctx, req.(*proto1.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetNamedPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetNamedPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetFilteredPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetFilteredPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetFilteredPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetFilteredPolicy(ctx, req.(*proto1.FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetFilteredNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetFilteredNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetFilteredNamedPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetFilteredNamedPolicy(ctx, req.(*proto1.FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_AddGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).AddGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/AddGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).AddGroupingPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_AddNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).AddNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/AddNamedGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).AddNamedGroupingPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_RemoveGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).RemoveGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/RemoveGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).RemoveGroupingPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_RemoveNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).RemoveNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/RemoveNamedGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).RemoveNamedGroupingPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_RemoveFilteredGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).RemoveFilteredGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/RemoveFilteredGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).RemoveFilteredGroupingPolicy(ctx, req.(*proto1.FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_RemoveFilteredNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).RemoveFilteredNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/RemoveFilteredNamedGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).RemoveFilteredNamedGroupingPolicy(ctx, req.(*proto1.FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetGroupingPolicy(ctx, req.(*proto1.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetNamedGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetNamedGroupingPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetFilteredGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetFilteredGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetFilteredGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetFilteredGroupingPolicy(ctx, req.(*proto1.FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetFilteredNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetFilteredNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetFilteredNamedGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetFilteredNamedGroupingPolicy(ctx, req.(*proto1.FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetAllSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetAllSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetAllSubjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetAllSubjects(ctx, req.(*proto1.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetAllNamedSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.SimpleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetAllNamedSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetAllNamedSubjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetAllNamedSubjects(ctx, req.(*proto1.SimpleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetAllObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetAllObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetAllObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetAllObjects(ctx, req.(*proto1.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetAllNamedObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.SimpleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetAllNamedObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetAllNamedObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetAllNamedObjects(ctx, req.(*proto1.SimpleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetAllActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetAllActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetAllActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetAllActions(ctx, req.(*proto1.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetAllNamedActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.SimpleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetAllNamedActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetAllNamedActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetAllNamedActions(ctx, req.(*proto1.SimpleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetAllRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetAllRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetAllRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetAllRoles(ctx, req.(*proto1.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_GetAllNamedRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.SimpleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).GetAllNamedRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/GetAllNamedRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).GetAllNamedRoles(ctx, req.(*proto1.SimpleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_HasPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).HasPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/HasPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).HasPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_HasNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).HasNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/HasNamedPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).HasNamedPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_HasGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).HasGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/HasGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).HasGroupingPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_HasNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).HasNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/HasNamedGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).HasNamedGroupingPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_EnforceBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnforceBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).EnforceBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/EnforceBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).EnforceBucket(ctx, req.(*EnforceBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_AddPresetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).AddPresetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/AddPresetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).AddPresetPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_RemovePresetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).RemovePresetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/RemovePresetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).RemovePresetPolicy(ctx, req.(*proto1.PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicydService_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicydServiceServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.policyd.PolicydService/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicydServiceServer).Initialize(ctx, req.(*proto1.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolicydService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.policyd.PolicydService",
	HandlerType: (*PolicydServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewEnforcer",
			Handler:    _PolicydService_NewEnforcer_Handler,
		},
		{
			MethodName: "NewAdapter",
			Handler:    _PolicydService_NewAdapter_Handler,
		},
		{
			MethodName: "Enforce",
			Handler:    _PolicydService_Enforce_Handler,
		},
		{
			MethodName: "LoadPolicy",
			Handler:    _PolicydService_LoadPolicy_Handler,
		},
		{
			MethodName: "SavePolicy",
			Handler:    _PolicydService_SavePolicy_Handler,
		},
		{
			MethodName: "AddPolicy",
			Handler:    _PolicydService_AddPolicy_Handler,
		},
		{
			MethodName: "AddNamedPolicy",
			Handler:    _PolicydService_AddNamedPolicy_Handler,
		},
		{
			MethodName: "RemovePolicy",
			Handler:    _PolicydService_RemovePolicy_Handler,
		},
		{
			MethodName: "RemoveNamedPolicy",
			Handler:    _PolicydService_RemoveNamedPolicy_Handler,
		},
		{
			MethodName: "RemoveFilteredPolicy",
			Handler:    _PolicydService_RemoveFilteredPolicy_Handler,
		},
		{
			MethodName: "RemoveFilteredNamedPolicy",
			Handler:    _PolicydService_RemoveFilteredNamedPolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _PolicydService_GetPolicy_Handler,
		},
		{
			MethodName: "GetNamedPolicy",
			Handler:    _PolicydService_GetNamedPolicy_Handler,
		},
		{
			MethodName: "GetFilteredPolicy",
			Handler:    _PolicydService_GetFilteredPolicy_Handler,
		},
		{
			MethodName: "GetFilteredNamedPolicy",
			Handler:    _PolicydService_GetFilteredNamedPolicy_Handler,
		},
		{
			MethodName: "AddGroupingPolicy",
			Handler:    _PolicydService_AddGroupingPolicy_Handler,
		},
		{
			MethodName: "AddNamedGroupingPolicy",
			Handler:    _PolicydService_AddNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "RemoveGroupingPolicy",
			Handler:    _PolicydService_RemoveGroupingPolicy_Handler,
		},
		{
			MethodName: "RemoveNamedGroupingPolicy",
			Handler:    _PolicydService_RemoveNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "RemoveFilteredGroupingPolicy",
			Handler:    _PolicydService_RemoveFilteredGroupingPolicy_Handler,
		},
		{
			MethodName: "RemoveFilteredNamedGroupingPolicy",
			Handler:    _PolicydService_RemoveFilteredNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "GetGroupingPolicy",
			Handler:    _PolicydService_GetGroupingPolicy_Handler,
		},
		{
			MethodName: "GetNamedGroupingPolicy",
			Handler:    _PolicydService_GetNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "GetFilteredGroupingPolicy",
			Handler:    _PolicydService_GetFilteredGroupingPolicy_Handler,
		},
		{
			MethodName: "GetFilteredNamedGroupingPolicy",
			Handler:    _PolicydService_GetFilteredNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "GetAllSubjects",
			Handler:    _PolicydService_GetAllSubjects_Handler,
		},
		{
			MethodName: "GetAllNamedSubjects",
			Handler:    _PolicydService_GetAllNamedSubjects_Handler,
		},
		{
			MethodName: "GetAllObjects",
			Handler:    _PolicydService_GetAllObjects_Handler,
		},
		{
			MethodName: "GetAllNamedObjects",
			Handler:    _PolicydService_GetAllNamedObjects_Handler,
		},
		{
			MethodName: "GetAllActions",
			Handler:    _PolicydService_GetAllActions_Handler,
		},
		{
			MethodName: "GetAllNamedActions",
			Handler:    _PolicydService_GetAllNamedActions_Handler,
		},
		{
			MethodName: "GetAllRoles",
			Handler:    _PolicydService_GetAllRoles_Handler,
		},
		{
			MethodName: "GetAllNamedRoles",
			Handler:    _PolicydService_GetAllNamedRoles_Handler,
		},
		{
			MethodName: "HasPolicy",
			Handler:    _PolicydService_HasPolicy_Handler,
		},
		{
			MethodName: "HasNamedPolicy",
			Handler:    _PolicydService_HasNamedPolicy_Handler,
		},
		{
			MethodName: "HasGroupingPolicy",
			Handler:    _PolicydService_HasGroupingPolicy_Handler,
		},
		{
			MethodName: "HasNamedGroupingPolicy",
			Handler:    _PolicydService_HasNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "EnforceBucket",
			Handler:    _PolicydService_EnforceBucket_Handler,
		},
		{
			MethodName: "AddPresetPolicy",
			Handler:    _PolicydService_AddPresetPolicy_Handler,
		},
		{
			MethodName: "RemovePresetPolicy",
			Handler:    _PolicydService_RemovePresetPolicy_Handler,
		},
		{
			MethodName: "Initialize",
			Handler:    _PolicydService_Initialize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
