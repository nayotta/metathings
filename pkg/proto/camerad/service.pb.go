// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package camerad

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xc1, 0x52, 0xf2, 0x30,
	0x10, 0xc7, 0x99, 0xf9, 0x3e, 0x40, 0x02, 0x72, 0x88, 0x8e, 0x87, 0x3a, 0x5e, 0xb8, 0x29, 0x18,
	0x46, 0x78, 0x03, 0x11, 0xb9, 0x78, 0x60, 0x2c, 0x5e, 0x9c, 0xd1, 0x4e, 0x68, 0x97, 0xb6, 0x63,
	0x21, 0x35, 0x59, 0x60, 0x7c, 0x65, 0x9f, 0xc2, 0x69, 0x9b, 0x54, 0x2e, 0x9a, 0x7a, 0xdb, 0x6d,
	0x7f, 0xbb, 0xff, 0xcd, 0x3f, 0x1b, 0x72, 0xac, 0x40, 0xee, 0x62, 0x1f, 0x58, 0x2a, 0x05, 0x0a,
	0x7a, 0xc1, 0x63, 0xb6, 0x06, 0xe4, 0x18, 0xc5, 0x9b, 0x50, 0x31, 0xf3, 0xd3, 0xe7, 0x6b, 0x90,
	0x3c, 0x70, 0xce, 0x43, 0x21, 0xc2, 0x04, 0x86, 0x39, 0xbc, 0xdc, 0xae, 0x86, 0xb0, 0x4e, 0xf1,
	0xa3, 0xa8, 0x75, 0x3a, 0xbe, 0x04, 0x8e, 0x60, 0xb2, 0x00, 0x12, 0x28, 0xb3, 0x76, 0xca, 0xd1,
	0x8f, 0x74, 0xd2, 0x0a, 0x01, 0x75, 0x48, 0x92, 0x58, 0x99, 0xf8, 0x24, 0x8b, 0xbd, 0x95, 0x90,
	0xde, 0x56, 0x81, 0x34, 0x85, 0x0a, 0xb9, 0x2c, 0x69, 0x85, 0x22, 0xd5, 0x71, 0xd7, 0xe7, 0x49,
	0xb2, 0xe4, 0xfe, 0x9b, 0xce, 0x4f, 0x55, 0x24, 0xf6, 0x1e, 0x0a, 0x0f, 0x36, 0x18, 0x9b, 0x99,
	0x46, 0x9f, 0x4d, 0xd2, 0x9d, 0x14, 0xc3, 0xbb, 0xc5, 0x59, 0x68, 0x48, 0x1a, 0x93, 0x7c, 0x50,
	0x3a, 0x60, 0xbf, 0x9e, 0x96, 0x15, 0xd8, 0x23, 0xbc, 0x6f, 0x41, 0xa1, 0x73, 0x5d, 0x91, 0x56,
	0xa9, 0xd8, 0x28, 0xe8, 0xd5, 0xe8, 0x9c, 0x34, 0xee, 0x72, 0x0f, 0xac, 0x42, 0x05, 0x66, 0x84,
	0xce, 0x58, 0xe1, 0x32, 0x33, 0x2e, 0xb3, 0x69, 0xe6, 0x72, 0xaf, 0x46, 0x03, 0x52, 0x9f, 0x67,
	0x3e, 0xd2, 0xbe, 0xa5, 0x61, 0x4e, 0x99, 0x7e, 0x83, 0x6a, 0x70, 0x39, 0xf7, 0x2b, 0xf9, 0x37,
	0x03, 0xa4, 0x97, 0x96, 0xb2, 0x19, 0xa0, 0x51, 0xb8, 0xaa, 0x82, 0x96, 0xfd, 0x39, 0xf9, 0xff,
	0x10, 0x2b, 0xa4, 0xb6, 0xaa, 0x0c, 0x32, 0x0a, 0xfd, 0x4a, 0x6c, 0x29, 0xb1, 0x23, 0xed, 0xec,
	0xcb, 0xbd, 0x90, 0x4f, 0x0a, 0x24, 0xbd, 0xa9, 0x50, 0xad, 0x59, 0x23, 0x38, 0xfa, 0x4b, 0x49,
	0xa9, 0x1b, 0x90, 0xba, 0x9b, 0xed, 0xab, 0xf5, 0x82, 0x72, 0xaa, 0xea, 0x05, 0x69, 0xf8, 0xd0,
	0x40, 0x17, 0x45, 0x6a, 0x35, 0x30, 0x83, 0xaa, 0x1a, 0x58, 0xb0, 0xa5, 0xc4, 0x82, 0x1c, 0x4d,
	0xf4, 0xfb, 0xa2, 0xcc, 0xb6, 0xf8, 0x1a, 0xb4, 0xef, 0xef, 0x0b, 0xe9, 0xb8, 0x91, 0xd8, 0x2f,
	0xc4, 0x34, 0x7f, 0xa3, 0xf4, 0x07, 0xd2, 0x19, 0xdb, 0x86, 0x3d, 0x68, 0xf2, 0x3d, 0xf4, 0x6d,
	0xeb, 0xb9, 0xa9, 0x89, 0x65, 0x23, 0xef, 0x38, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xae,
	0x14, 0xa9, 0xdf, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CameradServiceClient is the client API for CameradService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CameradServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Patch(ctx context.Context, in *PatchRequest, opts ...grpc.CallOption) (*PatchResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	ListForUser(ctx context.Context, in *ListForUserRequest, opts ...grpc.CallOption) (*ListForUserResponse, error)
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// for camera entity call
	Callback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ShowToEntity(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ShowToEntityResponse, error)
}

type cameradServiceClient struct {
	cc *grpc.ClientConn
}

func NewCameradServiceClient(cc *grpc.ClientConn) CameradServiceClient {
	return &cameradServiceClient{cc}
}

func (c *cameradServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.camerad.CameradService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameradServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.camerad.CameradService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameradServiceClient) Patch(ctx context.Context, in *PatchRequest, opts ...grpc.CallOption) (*PatchResponse, error) {
	out := new(PatchResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.camerad.CameradService/Patch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameradServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.camerad.CameradService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameradServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.camerad.CameradService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameradServiceClient) ListForUser(ctx context.Context, in *ListForUserRequest, opts ...grpc.CallOption) (*ListForUserResponse, error) {
	out := new(ListForUserResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.camerad.CameradService/ListForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameradServiceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.camerad.CameradService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameradServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.camerad.CameradService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameradServiceClient) Callback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.camerad.CameradService/Callback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameradServiceClient) ShowToEntity(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ShowToEntityResponse, error) {
	out := new(ShowToEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.camerad.CameradService/ShowToEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CameradServiceServer is the server API for CameradService service.
type CameradServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Delete(context.Context, *DeleteRequest) (*empty.Empty, error)
	Patch(context.Context, *PatchRequest) (*PatchResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	ListForUser(context.Context, *ListForUserRequest) (*ListForUserResponse, error)
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// for camera entity call
	Callback(context.Context, *CallbackRequest) (*empty.Empty, error)
	ShowToEntity(context.Context, *empty.Empty) (*ShowToEntityResponse, error)
}

func RegisterCameradServiceServer(s *grpc.Server, srv CameradServiceServer) {
	s.RegisterService(&_CameradService_serviceDesc, srv)
}

func _CameradService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameradServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.camerad.CameradService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameradServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameradService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameradServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.camerad.CameradService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameradServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameradService_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameradServiceServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.camerad.CameradService/Patch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameradServiceServer).Patch(ctx, req.(*PatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameradService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameradServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.camerad.CameradService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameradServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameradService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameradServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.camerad.CameradService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameradServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameradService_ListForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameradServiceServer).ListForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.camerad.CameradService/ListForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameradServiceServer).ListForUser(ctx, req.(*ListForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameradService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameradServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.camerad.CameradService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameradServiceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameradService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameradServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.camerad.CameradService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameradServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameradService_Callback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameradServiceServer).Callback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.camerad.CameradService/Callback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameradServiceServer).Callback(ctx, req.(*CallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameradService_ShowToEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameradServiceServer).ShowToEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.camerad.CameradService/ShowToEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameradServiceServer).ShowToEntity(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CameradService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.camerad.CameradService",
	HandlerType: (*CameradServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CameradService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CameradService_Delete_Handler,
		},
		{
			MethodName: "Patch",
			Handler:    _CameradService_Patch_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CameradService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CameradService_List_Handler,
		},
		{
			MethodName: "ListForUser",
			Handler:    _CameradService_ListForUser_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _CameradService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _CameradService_Stop_Handler,
		},
		{
			MethodName: "Callback",
			Handler:    _CameradService_Callback_Handler,
		},
		{
			MethodName: "ShowToEntity",
			Handler:    _CameradService_ShowToEntity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
