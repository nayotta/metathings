// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package identityd

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IdentitydService service

type IdentitydServiceClient interface {
	// https://developer.openstack.org/api-ref/identity/v3/#create-region
	CreateRegion(ctx context.Context, in *CreateRegionRequest, opts ...grpc.CallOption) (*CreateRegionResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/#delete-region
	DeleteRegion(ctx context.Context, in *DeleteRegionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/#update-region
	PatchRegion(ctx context.Context, in *PatchRegionRequest, opts ...grpc.CallOption) (*PatchRegionResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/#show-region-details
	GetRegion(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*GetRegionResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/#list-regions
	ListRegions(ctx context.Context, in *ListRegionsRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-domain
	CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-domain
	DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#update-domain
	PatchDomain(ctx context.Context, in *PatchDomainRequest, opts ...grpc.CallOption) (*PatchDomainResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#show-domain-details
	GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*GetDomainResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-domains
	ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-project
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-project
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#update-project
	PatchProject(ctx context.Context, in *PatchProjectRequest, opts ...grpc.CallOption) (*PatchProjectResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#show-project-details
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-projects
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-projects-for-user
	ListProjectsForUser(ctx context.Context, in *ListProjectsForUserRequest, opts ...grpc.CallOption) (*ListProjectsForUserResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-user
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-user
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#update-user
	PatchUser(ctx context.Context, in *PatchUserRequest, opts ...grpc.CallOption) (*PatchUserResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#show-user-details
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-users
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#change-password-for-user
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-users-in-group
	ListUsersInGroup(ctx context.Context, in *ListUsersInGroupRequest, opts ...grpc.CallOption) (*ListUsersInGroupResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-group
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-group
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#update-group
	PatchGroup(ctx context.Context, in *PatchGroupRequest, opts ...grpc.CallOption) (*PatchGroupResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#show-group-details
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-groups
	ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#add-user-to-group
	AddUserToGroup(ctx context.Context, in *AddUserToGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#remove-user-from-group
	RemoveUserFromGroup(ctx context.Context, in *RemoveUserFromGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#check-whether-user-belongs-to-group
	CheckUserInGroup(ctx context.Context, in *CheckUserInGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-groups-to-which-a-user-belongs
	ListGroupsForUser(ctx context.Context, in *ListGroupsForUserRequest, opts ...grpc.CallOption) (*ListGroupsForUserResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-role
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-role
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#update-role
	PatchRole(ctx context.Context, in *PatchRoleRequest, opts ...grpc.CallOption) (*PatchRoleResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#show-role-details
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-roles
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#assign-role-to-group-on-domain
	AddRoleToGroupOnDomain(ctx context.Context, in *AddRoleToGroupOnDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#unassign-role-from-group-on-domain
	RemoveRoleFromGroupOnDomain(ctx context.Context, in *RemoveRoleFromGroupOnDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#check-whether-user-has-role-assignment-on-domain
	CheckRoleInGroupOnDomain(ctx context.Context, in *CheckRoleInGroupOnDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-group-on-domain
	ListRolesForGroupOnDomain(ctx context.Context, in *ListRolesForGroupOnDomainRequest, opts ...grpc.CallOption) (*ListRolesForGroupOnDomainResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-group-on-domain
	AddRoleToUserOnDomain(ctx context.Context, in *AddRoleToUserOnDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-group-on-domain
	RemoveRoleFromUserOnDomain(ctx context.Context, in *RemoveRoleFromUserOnDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-group-on-domain
	CheckRoleInUserOnDomain(ctx context.Context, in *CheckRoleInUserOnDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-group-on-domain
	ListRolesForUserOnDomain(ctx context.Context, in *ListRolesForUserOnDomainRequest, opts ...grpc.CallOption) (*ListRolesForUserOnDomainResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#assign-role-to-group-on-project
	AddRoleToGroupOnProject(ctx context.Context, in *AddRoleToGroupOnProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#assign-role-to-group-on-project
	RemoveRoleFromGroupOnProject(ctx context.Context, in *RemoveRoleFromGroupOnProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#check-whether-group-has-role-assignment-on-project
	CheckRoleInGroupOnProject(ctx context.Context, in *CheckRoleInGroupOnProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-user-on-project
	ListRolesForGroupOnProject(ctx context.Context, in *ListRolesForGroupOnProjectRequest, opts ...grpc.CallOption) (*ListRolesForGroupOnProjectResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#assign-role-to-user-on-project
	AddRoleToUserOnProject(ctx context.Context, in *AddRoleToUserOnProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#unassign-role-from-user-on-project
	RemoveRoleFromUserOnProject(ctx context.Context, in *RemoveRoleFromUserOnProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#check-whether-user-has-role-assignment-on-project
	CheckRoleInUserOnProject(ctx context.Context, in *CheckRoleInUserOnProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-user-on-project
	ListRolesForUserOnProject(ctx context.Context, in *ListRolesForUserOnProjectRequest, opts ...grpc.CallOption) (*ListRolesForUserOnProjectResponse, error)
	// password authentication with unsnscoped authorization
	// https://developer.openstack.org/api-ref/identity/v3/index.html#password-authentication-with-unscoped-authorization
	// password authentication with scoped authorization
	// https://developer.openstack.org/api-ref/identity/v3/index.html#password-authentication-with-scoped-authorization
	// password authentication with unscoped authorization
	// https://developer.openstack.org/api-ref/identity/v3/index.html#password-authentication-with-explicit-unscoped-authorization
	// token authentication with unscoped authorization
	// https://developer.openstack.org/api-ref/identity/v3/index.html#token-authentication-with-unscoped-authorization
	// token authentication with scoped authorization
	// https://developer.openstack.org/api-ref/identity/v3/index.html#token-authentication-with-scoped-authorization
	// token authentication with explicit unscoped authorization
	// https://developer.openstack.org/api-ref/identity/v3/index.html#token-authentication-with-explicit-unscoped-authorization
	// application credential authorization
	// https://developer.openstack.org/api-ref/identity/v3/index.html#authenticating-with-an-application-credential
	IssueToken(ctx context.Context, in *IssueTokenRequest, opts ...grpc.CallOption) (*IssueTokenResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#revoke-token
	RevokeToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#check-token
	CheckToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#validate-and-show-information-for-token
	ValidateToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-application-credential
	CreateApplicationCredential(ctx context.Context, in *CreateApplicationCredentialRequest, opts ...grpc.CallOption) (*CreateApplicationCredentialResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-application-credential
	DeleteApplicationCredential(ctx context.Context, in *DeleteApplicationCredentialRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#show-application-credential-details
	GetApplicationCredential(ctx context.Context, in *GetApplicationCredentialRequest, opts ...grpc.CallOption) (*GetApplicationCredentialResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-application-credentials
	ListApplicationCredentials(ctx context.Context, in *ListApplicationCredentialsRequest, opts ...grpc.CallOption) (*ListApplicationCredentialsResponse, error)
}

type identitydServiceClient struct {
	cc *grpc.ClientConn
}

func NewIdentitydServiceClient(cc *grpc.ClientConn) IdentitydServiceClient {
	return &identitydServiceClient{cc}
}

func (c *identitydServiceClient) CreateRegion(ctx context.Context, in *CreateRegionRequest, opts ...grpc.CallOption) (*CreateRegionResponse, error) {
	out := new(CreateRegionResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/CreateRegion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteRegion(ctx context.Context, in *DeleteRegionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/DeleteRegion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchRegion(ctx context.Context, in *PatchRegionRequest, opts ...grpc.CallOption) (*PatchRegionResponse, error) {
	out := new(PatchRegionResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/PatchRegion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetRegion(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*GetRegionResponse, error) {
	out := new(GetRegionResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/GetRegion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListRegions(ctx context.Context, in *ListRegionsRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error) {
	out := new(ListRegionsResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/ListRegions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error) {
	out := new(CreateDomainResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/CreateDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/DeleteDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchDomain(ctx context.Context, in *PatchDomainRequest, opts ...grpc.CallOption) (*PatchDomainResponse, error) {
	out := new(PatchDomainResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/PatchDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*GetDomainResponse, error) {
	out := new(GetDomainResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/GetDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error) {
	out := new(ListDomainsResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/ListDomains", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/CreateProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/DeleteProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchProject(ctx context.Context, in *PatchProjectRequest, opts ...grpc.CallOption) (*PatchProjectResponse, error) {
	out := new(PatchProjectResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/PatchProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/GetProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/ListProjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListProjectsForUser(ctx context.Context, in *ListProjectsForUserRequest, opts ...grpc.CallOption) (*ListProjectsForUserResponse, error) {
	out := new(ListProjectsForUserResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/ListProjectsForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchUser(ctx context.Context, in *PatchUserRequest, opts ...grpc.CallOption) (*PatchUserResponse, error) {
	out := new(PatchUserResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/PatchUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/ListUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/ChangePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListUsersInGroup(ctx context.Context, in *ListUsersInGroupRequest, opts ...grpc.CallOption) (*ListUsersInGroupResponse, error) {
	out := new(ListUsersInGroupResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/ListUsersInGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/DeleteGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchGroup(ctx context.Context, in *PatchGroupRequest, opts ...grpc.CallOption) (*PatchGroupResponse, error) {
	out := new(PatchGroupResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/PatchGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/GetGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	out := new(ListGroupsResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/ListGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AddUserToGroup(ctx context.Context, in *AddUserToGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/AddUserToGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RemoveUserFromGroup(ctx context.Context, in *RemoveUserFromGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/RemoveUserFromGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CheckUserInGroup(ctx context.Context, in *CheckUserInGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/CheckUserInGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListGroupsForUser(ctx context.Context, in *ListGroupsForUserRequest, opts ...grpc.CallOption) (*ListGroupsForUserResponse, error) {
	out := new(ListGroupsForUserResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/ListGroupsForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/CreateRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/DeleteRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) PatchRole(ctx context.Context, in *PatchRoleRequest, opts ...grpc.CallOption) (*PatchRoleResponse, error) {
	out := new(PatchRoleResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/PatchRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/GetRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/ListRoles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AddRoleToGroupOnDomain(ctx context.Context, in *AddRoleToGroupOnDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/AddRoleToGroupOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RemoveRoleFromGroupOnDomain(ctx context.Context, in *RemoveRoleFromGroupOnDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/RemoveRoleFromGroupOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CheckRoleInGroupOnDomain(ctx context.Context, in *CheckRoleInGroupOnDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/CheckRoleInGroupOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListRolesForGroupOnDomain(ctx context.Context, in *ListRolesForGroupOnDomainRequest, opts ...grpc.CallOption) (*ListRolesForGroupOnDomainResponse, error) {
	out := new(ListRolesForGroupOnDomainResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/ListRolesForGroupOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AddRoleToUserOnDomain(ctx context.Context, in *AddRoleToUserOnDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/AddRoleToUserOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RemoveRoleFromUserOnDomain(ctx context.Context, in *RemoveRoleFromUserOnDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/RemoveRoleFromUserOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CheckRoleInUserOnDomain(ctx context.Context, in *CheckRoleInUserOnDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/CheckRoleInUserOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListRolesForUserOnDomain(ctx context.Context, in *ListRolesForUserOnDomainRequest, opts ...grpc.CallOption) (*ListRolesForUserOnDomainResponse, error) {
	out := new(ListRolesForUserOnDomainResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/ListRolesForUserOnDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AddRoleToGroupOnProject(ctx context.Context, in *AddRoleToGroupOnProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/AddRoleToGroupOnProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RemoveRoleFromGroupOnProject(ctx context.Context, in *RemoveRoleFromGroupOnProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/RemoveRoleFromGroupOnProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CheckRoleInGroupOnProject(ctx context.Context, in *CheckRoleInGroupOnProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/CheckRoleInGroupOnProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListRolesForGroupOnProject(ctx context.Context, in *ListRolesForGroupOnProjectRequest, opts ...grpc.CallOption) (*ListRolesForGroupOnProjectResponse, error) {
	out := new(ListRolesForGroupOnProjectResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/ListRolesForGroupOnProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) AddRoleToUserOnProject(ctx context.Context, in *AddRoleToUserOnProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/AddRoleToUserOnProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RemoveRoleFromUserOnProject(ctx context.Context, in *RemoveRoleFromUserOnProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/RemoveRoleFromUserOnProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CheckRoleInUserOnProject(ctx context.Context, in *CheckRoleInUserOnProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/CheckRoleInUserOnProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListRolesForUserOnProject(ctx context.Context, in *ListRolesForUserOnProjectRequest, opts ...grpc.CallOption) (*ListRolesForUserOnProjectResponse, error) {
	out := new(ListRolesForUserOnProjectResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/ListRolesForUserOnProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) IssueToken(ctx context.Context, in *IssueTokenRequest, opts ...grpc.CallOption) (*IssueTokenResponse, error) {
	out := new(IssueTokenResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/IssueToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) RevokeToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/RevokeToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CheckToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/CheckToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ValidateToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	out := new(ValidateTokenResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/ValidateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) CreateApplicationCredential(ctx context.Context, in *CreateApplicationCredentialRequest, opts ...grpc.CallOption) (*CreateApplicationCredentialResponse, error) {
	out := new(CreateApplicationCredentialResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/CreateApplicationCredential", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) DeleteApplicationCredential(ctx context.Context, in *DeleteApplicationCredentialRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/DeleteApplicationCredential", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) GetApplicationCredential(ctx context.Context, in *GetApplicationCredentialRequest, opts ...grpc.CallOption) (*GetApplicationCredentialResponse, error) {
	out := new(GetApplicationCredentialResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/GetApplicationCredential", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitydServiceClient) ListApplicationCredentials(ctx context.Context, in *ListApplicationCredentialsRequest, opts ...grpc.CallOption) (*ListApplicationCredentialsResponse, error) {
	out := new(ListApplicationCredentialsResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.identityd.IdentitydService/ListApplicationCredentials", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IdentitydService service

type IdentitydServiceServer interface {
	// https://developer.openstack.org/api-ref/identity/v3/#create-region
	CreateRegion(context.Context, *CreateRegionRequest) (*CreateRegionResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/#delete-region
	DeleteRegion(context.Context, *DeleteRegionRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/#update-region
	PatchRegion(context.Context, *PatchRegionRequest) (*PatchRegionResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/#show-region-details
	GetRegion(context.Context, *GetRegionRequest) (*GetRegionResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/#list-regions
	ListRegions(context.Context, *ListRegionsRequest) (*ListRegionsResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-domain
	CreateDomain(context.Context, *CreateDomainRequest) (*CreateDomainResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-domain
	DeleteDomain(context.Context, *DeleteDomainRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#update-domain
	PatchDomain(context.Context, *PatchDomainRequest) (*PatchDomainResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#show-domain-details
	GetDomain(context.Context, *GetDomainRequest) (*GetDomainResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-domains
	ListDomains(context.Context, *ListDomainsRequest) (*ListDomainsResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-project
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-project
	DeleteProject(context.Context, *DeleteProjectRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#update-project
	PatchProject(context.Context, *PatchProjectRequest) (*PatchProjectResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#show-project-details
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-projects
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-projects-for-user
	ListProjectsForUser(context.Context, *ListProjectsForUserRequest) (*ListProjectsForUserResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-user
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-user
	DeleteUser(context.Context, *DeleteUserRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#update-user
	PatchUser(context.Context, *PatchUserRequest) (*PatchUserResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#show-user-details
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-users
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#change-password-for-user
	ChangePassword(context.Context, *ChangePasswordRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-users-in-group
	ListUsersInGroup(context.Context, *ListUsersInGroupRequest) (*ListUsersInGroupResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-group
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-group
	DeleteGroup(context.Context, *DeleteGroupRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#update-group
	PatchGroup(context.Context, *PatchGroupRequest) (*PatchGroupResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#show-group-details
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-groups
	ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#add-user-to-group
	AddUserToGroup(context.Context, *AddUserToGroupRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#remove-user-from-group
	RemoveUserFromGroup(context.Context, *RemoveUserFromGroupRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#check-whether-user-belongs-to-group
	CheckUserInGroup(context.Context, *CheckUserInGroupRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-groups-to-which-a-user-belongs
	ListGroupsForUser(context.Context, *ListGroupsForUserRequest) (*ListGroupsForUserResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-role
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-role
	DeleteRole(context.Context, *DeleteRoleRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#update-role
	PatchRole(context.Context, *PatchRoleRequest) (*PatchRoleResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#show-role-details
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-roles
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#assign-role-to-group-on-domain
	AddRoleToGroupOnDomain(context.Context, *AddRoleToGroupOnDomainRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#unassign-role-from-group-on-domain
	RemoveRoleFromGroupOnDomain(context.Context, *RemoveRoleFromGroupOnDomainRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#check-whether-user-has-role-assignment-on-domain
	CheckRoleInGroupOnDomain(context.Context, *CheckRoleInGroupOnDomainRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-group-on-domain
	ListRolesForGroupOnDomain(context.Context, *ListRolesForGroupOnDomainRequest) (*ListRolesForGroupOnDomainResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-group-on-domain
	AddRoleToUserOnDomain(context.Context, *AddRoleToUserOnDomainRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-group-on-domain
	RemoveRoleFromUserOnDomain(context.Context, *RemoveRoleFromUserOnDomainRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-group-on-domain
	CheckRoleInUserOnDomain(context.Context, *CheckRoleInUserOnDomainRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-group-on-domain
	ListRolesForUserOnDomain(context.Context, *ListRolesForUserOnDomainRequest) (*ListRolesForUserOnDomainResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#assign-role-to-group-on-project
	AddRoleToGroupOnProject(context.Context, *AddRoleToGroupOnProjectRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#assign-role-to-group-on-project
	RemoveRoleFromGroupOnProject(context.Context, *RemoveRoleFromGroupOnProjectRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#check-whether-group-has-role-assignment-on-project
	CheckRoleInGroupOnProject(context.Context, *CheckRoleInGroupOnProjectRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-user-on-project
	ListRolesForGroupOnProject(context.Context, *ListRolesForGroupOnProjectRequest) (*ListRolesForGroupOnProjectResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#assign-role-to-user-on-project
	AddRoleToUserOnProject(context.Context, *AddRoleToUserOnProjectRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#unassign-role-from-user-on-project
	RemoveRoleFromUserOnProject(context.Context, *RemoveRoleFromUserOnProjectRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#check-whether-user-has-role-assignment-on-project
	CheckRoleInUserOnProject(context.Context, *CheckRoleInUserOnProjectRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-role-assignments-for-user-on-project
	ListRolesForUserOnProject(context.Context, *ListRolesForUserOnProjectRequest) (*ListRolesForUserOnProjectResponse, error)
	// password authentication with unsnscoped authorization
	// https://developer.openstack.org/api-ref/identity/v3/index.html#password-authentication-with-unscoped-authorization
	// password authentication with scoped authorization
	// https://developer.openstack.org/api-ref/identity/v3/index.html#password-authentication-with-scoped-authorization
	// password authentication with unscoped authorization
	// https://developer.openstack.org/api-ref/identity/v3/index.html#password-authentication-with-explicit-unscoped-authorization
	// token authentication with unscoped authorization
	// https://developer.openstack.org/api-ref/identity/v3/index.html#token-authentication-with-unscoped-authorization
	// token authentication with scoped authorization
	// https://developer.openstack.org/api-ref/identity/v3/index.html#token-authentication-with-scoped-authorization
	// token authentication with explicit unscoped authorization
	// https://developer.openstack.org/api-ref/identity/v3/index.html#token-authentication-with-explicit-unscoped-authorization
	// application credential authorization
	// https://developer.openstack.org/api-ref/identity/v3/index.html#authenticating-with-an-application-credential
	IssueToken(context.Context, *IssueTokenRequest) (*IssueTokenResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#revoke-token
	RevokeToken(context.Context, *empty.Empty) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#check-token
	CheckToken(context.Context, *empty.Empty) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#validate-and-show-information-for-token
	ValidateToken(context.Context, *empty.Empty) (*ValidateTokenResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#create-application-credential
	CreateApplicationCredential(context.Context, *CreateApplicationCredentialRequest) (*CreateApplicationCredentialResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#delete-application-credential
	DeleteApplicationCredential(context.Context, *DeleteApplicationCredentialRequest) (*empty.Empty, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#show-application-credential-details
	GetApplicationCredential(context.Context, *GetApplicationCredentialRequest) (*GetApplicationCredentialResponse, error)
	// https://developer.openstack.org/api-ref/identity/v3/index.html#list-application-credentials
	ListApplicationCredentials(context.Context, *ListApplicationCredentialsRequest) (*ListApplicationCredentialsResponse, error)
}

func RegisterIdentitydServiceServer(s *grpc.Server, srv IdentitydServiceServer) {
	s.RegisterService(&_IdentitydService_serviceDesc, srv)
}

func _IdentitydService_CreateRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/CreateRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateRegion(ctx, req.(*CreateRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/DeleteRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteRegion(ctx, req.(*DeleteRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/PatchRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchRegion(ctx, req.(*PatchRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/GetRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetRegion(ctx, req.(*GetRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/ListRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListRegions(ctx, req.(*ListRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/CreateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateDomain(ctx, req.(*CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/DeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteDomain(ctx, req.(*DeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/PatchDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchDomain(ctx, req.(*PatchDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/GetDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetDomain(ctx, req.(*GetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/ListDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListDomains(ctx, req.(*ListDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/PatchProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchProject(ctx, req.(*PatchProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListProjectsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListProjectsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/ListProjectsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListProjectsForUser(ctx, req.(*ListProjectsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/PatchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchUser(ctx, req.(*PatchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListUsersInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersInGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListUsersInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/ListUsersInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListUsersInGroup(ctx, req.(*ListUsersInGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/PatchGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchGroup(ctx, req.(*PatchGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListGroups(ctx, req.(*ListGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AddUserToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AddUserToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/AddUserToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AddUserToGroup(ctx, req.(*AddUserToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RemoveUserFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RemoveUserFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/RemoveUserFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RemoveUserFromGroup(ctx, req.(*RemoveUserFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CheckUserInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserInGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CheckUserInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/CheckUserInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CheckUserInGroup(ctx, req.(*CheckUserInGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListGroupsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListGroupsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/ListGroupsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListGroupsForUser(ctx, req.(*ListGroupsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_PatchRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).PatchRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/PatchRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).PatchRole(ctx, req.(*PatchRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AddRoleToGroupOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleToGroupOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AddRoleToGroupOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/AddRoleToGroupOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AddRoleToGroupOnDomain(ctx, req.(*AddRoleToGroupOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RemoveRoleFromGroupOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromGroupOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RemoveRoleFromGroupOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/RemoveRoleFromGroupOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RemoveRoleFromGroupOnDomain(ctx, req.(*RemoveRoleFromGroupOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CheckRoleInGroupOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRoleInGroupOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CheckRoleInGroupOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/CheckRoleInGroupOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CheckRoleInGroupOnDomain(ctx, req.(*CheckRoleInGroupOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListRolesForGroupOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesForGroupOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListRolesForGroupOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/ListRolesForGroupOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListRolesForGroupOnDomain(ctx, req.(*ListRolesForGroupOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AddRoleToUserOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleToUserOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AddRoleToUserOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/AddRoleToUserOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AddRoleToUserOnDomain(ctx, req.(*AddRoleToUserOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RemoveRoleFromUserOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromUserOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RemoveRoleFromUserOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/RemoveRoleFromUserOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RemoveRoleFromUserOnDomain(ctx, req.(*RemoveRoleFromUserOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CheckRoleInUserOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRoleInUserOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CheckRoleInUserOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/CheckRoleInUserOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CheckRoleInUserOnDomain(ctx, req.(*CheckRoleInUserOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListRolesForUserOnDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesForUserOnDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListRolesForUserOnDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/ListRolesForUserOnDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListRolesForUserOnDomain(ctx, req.(*ListRolesForUserOnDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AddRoleToGroupOnProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleToGroupOnProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AddRoleToGroupOnProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/AddRoleToGroupOnProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AddRoleToGroupOnProject(ctx, req.(*AddRoleToGroupOnProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RemoveRoleFromGroupOnProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromGroupOnProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RemoveRoleFromGroupOnProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/RemoveRoleFromGroupOnProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RemoveRoleFromGroupOnProject(ctx, req.(*RemoveRoleFromGroupOnProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CheckRoleInGroupOnProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRoleInGroupOnProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CheckRoleInGroupOnProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/CheckRoleInGroupOnProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CheckRoleInGroupOnProject(ctx, req.(*CheckRoleInGroupOnProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListRolesForGroupOnProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesForGroupOnProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListRolesForGroupOnProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/ListRolesForGroupOnProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListRolesForGroupOnProject(ctx, req.(*ListRolesForGroupOnProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_AddRoleToUserOnProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleToUserOnProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).AddRoleToUserOnProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/AddRoleToUserOnProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).AddRoleToUserOnProject(ctx, req.(*AddRoleToUserOnProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RemoveRoleFromUserOnProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleFromUserOnProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RemoveRoleFromUserOnProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/RemoveRoleFromUserOnProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RemoveRoleFromUserOnProject(ctx, req.(*RemoveRoleFromUserOnProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CheckRoleInUserOnProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRoleInUserOnProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CheckRoleInUserOnProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/CheckRoleInUserOnProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CheckRoleInUserOnProject(ctx, req.(*CheckRoleInUserOnProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListRolesForUserOnProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesForUserOnProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListRolesForUserOnProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/ListRolesForUserOnProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListRolesForUserOnProject(ctx, req.(*ListRolesForUserOnProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_IssueToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).IssueToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/IssueToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).IssueToken(ctx, req.(*IssueTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_RevokeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).RevokeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/RevokeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).RevokeToken(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/CheckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CheckToken(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ValidateToken(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_CreateApplicationCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).CreateApplicationCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/CreateApplicationCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).CreateApplicationCredential(ctx, req.(*CreateApplicationCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_DeleteApplicationCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).DeleteApplicationCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/DeleteApplicationCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).DeleteApplicationCredential(ctx, req.(*DeleteApplicationCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_GetApplicationCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).GetApplicationCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/GetApplicationCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).GetApplicationCredential(ctx, req.(*GetApplicationCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitydService_ListApplicationCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitydServiceServer).ListApplicationCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.identityd.IdentitydService/ListApplicationCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitydServiceServer).ListApplicationCredentials(ctx, req.(*ListApplicationCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdentitydService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.identityd.IdentitydService",
	HandlerType: (*IdentitydServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRegion",
			Handler:    _IdentitydService_CreateRegion_Handler,
		},
		{
			MethodName: "DeleteRegion",
			Handler:    _IdentitydService_DeleteRegion_Handler,
		},
		{
			MethodName: "PatchRegion",
			Handler:    _IdentitydService_PatchRegion_Handler,
		},
		{
			MethodName: "GetRegion",
			Handler:    _IdentitydService_GetRegion_Handler,
		},
		{
			MethodName: "ListRegions",
			Handler:    _IdentitydService_ListRegions_Handler,
		},
		{
			MethodName: "CreateDomain",
			Handler:    _IdentitydService_CreateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _IdentitydService_DeleteDomain_Handler,
		},
		{
			MethodName: "PatchDomain",
			Handler:    _IdentitydService_PatchDomain_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _IdentitydService_GetDomain_Handler,
		},
		{
			MethodName: "ListDomains",
			Handler:    _IdentitydService_ListDomains_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _IdentitydService_CreateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _IdentitydService_DeleteProject_Handler,
		},
		{
			MethodName: "PatchProject",
			Handler:    _IdentitydService_PatchProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _IdentitydService_GetProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _IdentitydService_ListProjects_Handler,
		},
		{
			MethodName: "ListProjectsForUser",
			Handler:    _IdentitydService_ListProjectsForUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _IdentitydService_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _IdentitydService_DeleteUser_Handler,
		},
		{
			MethodName: "PatchUser",
			Handler:    _IdentitydService_PatchUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _IdentitydService_GetUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _IdentitydService_ListUsers_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _IdentitydService_ChangePassword_Handler,
		},
		{
			MethodName: "ListUsersInGroup",
			Handler:    _IdentitydService_ListUsersInGroup_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _IdentitydService_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _IdentitydService_DeleteGroup_Handler,
		},
		{
			MethodName: "PatchGroup",
			Handler:    _IdentitydService_PatchGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _IdentitydService_GetGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _IdentitydService_ListGroups_Handler,
		},
		{
			MethodName: "AddUserToGroup",
			Handler:    _IdentitydService_AddUserToGroup_Handler,
		},
		{
			MethodName: "RemoveUserFromGroup",
			Handler:    _IdentitydService_RemoveUserFromGroup_Handler,
		},
		{
			MethodName: "CheckUserInGroup",
			Handler:    _IdentitydService_CheckUserInGroup_Handler,
		},
		{
			MethodName: "ListGroupsForUser",
			Handler:    _IdentitydService_ListGroupsForUser_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _IdentitydService_CreateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _IdentitydService_DeleteRole_Handler,
		},
		{
			MethodName: "PatchRole",
			Handler:    _IdentitydService_PatchRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _IdentitydService_GetRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _IdentitydService_ListRoles_Handler,
		},
		{
			MethodName: "AddRoleToGroupOnDomain",
			Handler:    _IdentitydService_AddRoleToGroupOnDomain_Handler,
		},
		{
			MethodName: "RemoveRoleFromGroupOnDomain",
			Handler:    _IdentitydService_RemoveRoleFromGroupOnDomain_Handler,
		},
		{
			MethodName: "CheckRoleInGroupOnDomain",
			Handler:    _IdentitydService_CheckRoleInGroupOnDomain_Handler,
		},
		{
			MethodName: "ListRolesForGroupOnDomain",
			Handler:    _IdentitydService_ListRolesForGroupOnDomain_Handler,
		},
		{
			MethodName: "AddRoleToUserOnDomain",
			Handler:    _IdentitydService_AddRoleToUserOnDomain_Handler,
		},
		{
			MethodName: "RemoveRoleFromUserOnDomain",
			Handler:    _IdentitydService_RemoveRoleFromUserOnDomain_Handler,
		},
		{
			MethodName: "CheckRoleInUserOnDomain",
			Handler:    _IdentitydService_CheckRoleInUserOnDomain_Handler,
		},
		{
			MethodName: "ListRolesForUserOnDomain",
			Handler:    _IdentitydService_ListRolesForUserOnDomain_Handler,
		},
		{
			MethodName: "AddRoleToGroupOnProject",
			Handler:    _IdentitydService_AddRoleToGroupOnProject_Handler,
		},
		{
			MethodName: "RemoveRoleFromGroupOnProject",
			Handler:    _IdentitydService_RemoveRoleFromGroupOnProject_Handler,
		},
		{
			MethodName: "CheckRoleInGroupOnProject",
			Handler:    _IdentitydService_CheckRoleInGroupOnProject_Handler,
		},
		{
			MethodName: "ListRolesForGroupOnProject",
			Handler:    _IdentitydService_ListRolesForGroupOnProject_Handler,
		},
		{
			MethodName: "AddRoleToUserOnProject",
			Handler:    _IdentitydService_AddRoleToUserOnProject_Handler,
		},
		{
			MethodName: "RemoveRoleFromUserOnProject",
			Handler:    _IdentitydService_RemoveRoleFromUserOnProject_Handler,
		},
		{
			MethodName: "CheckRoleInUserOnProject",
			Handler:    _IdentitydService_CheckRoleInUserOnProject_Handler,
		},
		{
			MethodName: "ListRolesForUserOnProject",
			Handler:    _IdentitydService_ListRolesForUserOnProject_Handler,
		},
		{
			MethodName: "IssueToken",
			Handler:    _IdentitydService_IssueToken_Handler,
		},
		{
			MethodName: "RevokeToken",
			Handler:    _IdentitydService_RevokeToken_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _IdentitydService_CheckToken_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _IdentitydService_ValidateToken_Handler,
		},
		{
			MethodName: "CreateApplicationCredential",
			Handler:    _IdentitydService_CreateApplicationCredential_Handler,
		},
		{
			MethodName: "DeleteApplicationCredential",
			Handler:    _IdentitydService_DeleteApplicationCredential_Handler,
		},
		{
			MethodName: "GetApplicationCredential",
			Handler:    _IdentitydService_GetApplicationCredential_Handler,
		},
		{
			MethodName: "ListApplicationCredentials",
			Handler:    _IdentitydService_ListApplicationCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_service_fbaba09a384eda0a) }

var fileDescriptor_service_fbaba09a384eda0a = []byte{
	// 1481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x59, 0xdf, 0x6f, 0x1b, 0xc5,
	0x13, 0xaf, 0x5f, 0xbe, 0x5f, 0xb2, 0x49, 0x4a, 0x72, 0x69, 0x9b, 0xc6, 0x89, 0x44, 0x9b, 0xb4,
	0xe5, 0xcd, 0x69, 0x9c, 0x14, 0xd1, 0x02, 0x49, 0x1c, 0x87, 0x58, 0x91, 0x90, 0x88, 0x42, 0xe1,
	0xa1, 0x42, 0x98, 0x8b, 0x6f, 0xe3, 0x1c, 0xb1, 0x6f, 0xdd, 0xbb, 0xb5, 0x43, 0xab, 0x16, 0xf1,
	0x8a, 0xc4, 0x0b, 0xfc, 0x07, 0x48, 0x48, 0x48, 0xfc, 0x95, 0x68, 0x7f, 0x7a, 0x77, 0x7d, 0xf6,
	0xcd, 0xda, 0xaf, 0x73, 0x9f, 0xcf, 0x7c, 0x66, 0x66, 0x67, 0x67, 0xee, 0x6c, 0xb4, 0x98, 0xe1,
	0x74, 0x10, 0xb7, 0x70, 0xa5, 0x97, 0x12, 0x4a, 0x82, 0x8f, 0xc2, 0xb8, 0xd2, 0xc5, 0x34, 0xa4,
	0x57, 0x71, 0xd2, 0xce, 0x2a, 0xea, 0x61, 0x1c, 0xe1, 0x84, 0xc6, 0xf4, 0x4d, 0x54, 0x5e, 0x6f,
	0x13, 0xd2, 0xee, 0xe0, 0x6d, 0x0e, 0xbf, 0xe8, 0x5f, 0x6e, 0xe3, 0x6e, 0x8f, 0xbe, 0x11, 0xec,
	0xf2, 0x4a, 0x2b, 0xc5, 0x21, 0xc5, 0xcd, 0x14, 0xb7, 0x63, 0x92, 0x28, 0x63, 0x84, 0x3b, 0xd8,
	0x35, 0x06, 0xbd, 0x90, 0xb6, 0xae, 0x6c, 0xdb, 0x52, 0x1b, 0x53, 0x07, 0xd5, 0x89, 0x33, 0x65,
	0xca, 0x1c, 0x8d, 0x88, 0x74, 0xc3, 0xd8, 0xd5, 0xb0, 0x8c, 0x52, 0xc3, 0xb2, 0x71, 0x0d, 0x1b,
	0xc5, 0x35, 0x84, 0x49, 0x69, 0xdc, 0x91, 0x1a, 0xbd, 0x94, 0xfc, 0x84, 0x5b, 0x54, 0x59, 0xa5,
	0x88, 0x6d, 0x5d, 0x11, 0x2a, 0xb6, 0x71, 0x99, 0xc9, 0x38, 0x38, 0xae, 0x23, 0x6d, 0x4a, 0x68,
	0xc3, 0x32, 0x36, 0x2f, 0x49, 0xda, 0xec, 0x67, 0x38, 0x55, 0x5e, 0x64, 0x18, 0xa6, 0x49, 0xc6,
	0x60, 0x98, 0x96, 0x44, 0x00, 0x86, 0xe5, 0x36, 0x53, 0x37, 0x11, 0x5c, 0x85, 0x19, 0x94, 0xee,
	0xdd, 0xd6, 0x55, 0x98, 0xb4, 0x71, 0xb3, 0x17, 0x66, 0xd9, 0x0d, 0x49, 0x23, 0x69, 0x5e, 0x1b,
	0x02, 0x9b, 0x71, 0xd2, 0x6c, 0xa7, 0xa4, 0xdf, 0x53, 0x65, 0x92, 0xb1, 0x58, 0x36, 0x19, 0x8c,
	0x69, 0x5b, 0x16, 0xd1, 0x98, 0xa6, 0x0f, 0x59, 0x38, 0x16, 0x86, 0xcb, 0x70, 0x8b, 0x0a, 0x68,
	0x35, 0x8c, 0x22, 0x2e, 0xdc, 0xa4, 0xc4, 0xc2, 0x6e, 0xa4, 0xb8, 0x4b, 0x06, 0x22, 0xe1, 0xe6,
	0x65, 0x4a, 0xba, 0xd6, 0xd3, 0xb5, 0xd6, 0x15, 0x6e, 0x5d, 0x8b, 0x87, 0x4e, 0xc0, 0x65, 0x43,
	0x64, 0x5c, 0x61, 0x53, 0xd2, 0xc1, 0x4e, 0x61, 0x0d, 0x93, 0x2c, 0xac, 0x61, 0xe1, 0x85, 0x35,
	0x11, 0xa2, 0x3f, 0x49, 0x07, 0xab, 0x3c, 0x1e, 0xb2, 0x3c, 0x98, 0x41, 0xe7, 0xd1, 0x24, 0x89,
	0xdd, 0x70, 0x4f, 0x64, 0x46, 0x1c, 0x35, 0xcc, 0x68, 0x04, 0xb7, 0x25, 0x72, 0xe3, 0x30, 0x95,
	0xdb, 0x08, 0xe8, 0xd1, 0x30, 0x02, 0x9e, 0x64, 0x3e, 0xea, 0x81, 0x19, 0x15, 0x2f, 0x96, 0x8b,
	0x78, 0x3c, 0x12, 0x54, 0x2e, 0x6c, 0xd3, 0x8e, 0x29, 0x17, 0xb3, 0xe5, 0x84, 0x94, 0xef, 0x28,
	0xb7, 0x4e, 0xf6, 0x8d, 0xf9, 0x78, 0x7c, 0xa1, 0x6c, 0xe0, 0xa3, 0x31, 0x95, 0xb2, 0x51, 0x8f,
	0xc7, 0x95, 0xca, 0x86, 0x3d, 0xcc, 0xab, 0x95, 0x0d, 0x79, 0x32, 0xb6, 0x58, 0x36, 0x6e, 0x2b,
	0xbf, 0x5a, 0x4e, 0xf0, 0x63, 0xca, 0xe5, 0x0c, 0x94, 0x38, 0xcb, 0xfa, 0x2c, 0xa4, 0x6b, 0xac,
	0x4a, 0x78, 0x67, 0x10, 0x76, 0xe2, 0x88, 0xb5, 0xb1, 0x69, 0xdd, 0x92, 0xad, 0x1d, 0xf6, 0x7a,
	0x9d, 0xb8, 0x15, 0xd2, 0x98, 0x24, 0xcd, 0x56, 0x8a, 0xf9, 0xfc, 0x0e, 0x3b, 0x0a, 0x24, 0x9b,
	0x7d, 0x22, 0xe8, 0x01, 0x6b, 0xf6, 0x89, 0x88, 0x4d, 0x1e, 0x7a, 0x3e, 0x44, 0x5e, 0x88, 0xea,
	0x1f, 0x2f, 0xd0, 0xd2, 0xa9, 0xda, 0x1e, 0xdf, 0x88, 0x75, 0x12, 0xbc, 0x47, 0x0b, 0x75, 0x1e,
	0xe6, 0x39, 0x1f, 0xed, 0xc1, 0x5e, 0xa5, 0x60, 0xed, 0x54, 0x4c, 0xf8, 0x39, 0x7e, 0xdd, 0xc7,
	0x19, 0x2d, 0x3f, 0xf3, 0x64, 0x65, 0x3d, 0x92, 0x64, 0x78, 0xf3, 0x56, 0xf0, 0x03, 0x5a, 0x38,
	0xe6, 0x05, 0x00, 0xcb, 0x9b, 0x70, 0x25, 0x7f, 0xaf, 0x22, 0x56, 0x61, 0x45, 0xad, 0xc2, 0xca,
	0x97, 0x6c, 0x15, 0x6e, 0xde, 0x0a, 0xde, 0xa2, 0xf9, 0x33, 0x36, 0x3a, 0xa4, 0xfb, 0xdd, 0x42,
	0xf7, 0x06, 0x5a, 0x79, 0xdf, 0xf3, 0x23, 0xe9, 0xdc, 0x28, 0x9a, 0x6b, 0x60, 0x2a, 0x95, 0x77,
	0x0a, 0x9d, 0x68, 0xac, 0xd2, 0xad, 0xfa, 0x50, 0xb4, 0xea, 0x5b, 0x34, 0xff, 0x55, 0x9c, 0x49,
	0x7b, 0x06, 0xc8, 0xd8, 0x40, 0xc3, 0x33, 0xb6, 0x48, 0x5a, 0x5b, 0x37, 0xd3, 0x31, 0x1f, 0x30,
	0xe0, 0x66, 0x12, 0x70, 0xdf, 0x66, 0x52, 0xac, 0xd1, 0x66, 0x02, 0xcb, 0x9b, 0x70, 0x78, 0x33,
	0x49, 0xf7, 0xc0, 0x66, 0xb2, 0xbd, 0xef, 0xf9, 0x91, 0x9c, 0x66, 0x92, 0xca, 0xa0, 0x66, 0xb2,
	0x75, 0xab, 0x3e, 0x14, 0xb7, 0x99, 0x84, 0x1d, 0xda, 0x4c, 0x12, 0xed, 0xd7, 0x4c, 0x9a, 0xa4,
	0xb5, 0x7f, 0x2d, 0xa1, 0x45, 0x71, 0xd0, 0x67, 0x62, 0xfe, 0x06, 0xd0, 0xc6, 0x90, 0x78, 0x15,
	0xc0, 0x27, 0xbe, 0x34, 0x1d, 0xc2, 0x8f, 0x68, 0x51, 0x74, 0x08, 0x3c, 0x02, 0x0b, 0x5f, 0xdc,
	0x52, 0xef, 0xd1, 0x02, 0x3f, 0x6f, 0x25, 0x00, 0x6c, 0x0f, 0xc7, 0xff, 0x33, 0x4f, 0x96, 0x4e,
	0xf0, 0x06, 0xa1, 0x06, 0xa6, 0x4a, 0x1c, 0xd4, 0x23, 0x8e, 0xf4, 0xae, 0x17, 0xc7, 0x9c, 0x14,
	0xec, 0xd4, 0xe5, 0x83, 0x2c, 0x80, 0x35, 0x89, 0x82, 0xc3, 0xf3, 0xb6, 0x59, 0x5a, 0xfe, 0xcf,
	0x12, 0x5a, 0x31, 0x1f, 0x9d, 0x90, 0xf4, 0xdb, 0x0c, 0xa7, 0xc1, 0x67, 0x5e, 0x0e, 0x25, 0x4b,
	0x45, 0xf3, 0xf9, 0x74, 0x64, 0xf3, 0x30, 0x44, 0x23, 0xf2, 0x50, 0xaa, 0xc0, 0xae, 0x35, 0x23,
	0xd8, 0xf5, 0xe2, 0x68, 0xe1, 0x57, 0x08, 0x89, 0xb6, 0x05, 0x0a, 0x0f, 0xc1, 0xc5, 0x0d, 0x4e,
	0xd1, 0x1c, 0xef, 0x3d, 0xee, 0x7a, 0x07, 0xd6, 0xa7, 0xa6, 0xe7, 0xaa, 0x0f, 0x45, 0x67, 0x94,
	0xa0, 0xff, 0x37, 0x30, 0xe5, 0x9a, 0xdb, 0x90, 0x06, 0x35, 0x15, 0x9f, 0xc2, 0x09, 0xe6, 0x74,
	0x66, 0x67, 0xcb, 0xac, 0x19, 0x20, 0x4b, 0x8d, 0x85, 0x67, 0x69, 0x50, 0xb4, 0xea, 0x05, 0xba,
	0x5d, 0xe7, 0x1f, 0x8f, 0x67, 0xf2, 0xdb, 0x31, 0x00, 0x8c, 0x3a, 0x8b, 0x50, 0x7c, 0x7e, 0xbf,
	0x95, 0xd0, 0x92, 0xd6, 0x3e, 0x4d, 0x1a, 0xec, 0x4d, 0x3d, 0xf8, 0x14, 0x1e, 0xae, 0xa4, 0x28,
	0xa1, 0xe7, 0x53, 0x30, 0xcd, 0x6d, 0x24, 0xfa, 0x57, 0x44, 0x01, 0xed, 0x76, 0x2b, 0x80, 0x3d,
	0x3f, 0x92, 0xd6, 0xfe, 0x1e, 0xcd, 0x8b, 0xb6, 0x87, 0x6a, 0x1b, 0xe8, 0xe2, 0x2a, 0xdf, 0x20,
	0xc4, 0xdb, 0x58, 0x38, 0x07, 0xf6, 0xbc, 0xe5, 0x7b, 0xd7, 0x8b, 0xa3, 0xd3, 0x7a, 0x8d, 0x3e,
	0x68, 0x60, 0x2a, 0x64, 0x41, 0x8d, 0x6f, 0x89, 0xee, 0x78, 0x30, 0xcc, 0x31, 0xc7, 0xce, 0x98,
	0x9b, 0xb3, 0x00, 0xd6, 0xf9, 0x02, 0x0c, 0xcf, 0xd5, 0xe4, 0x98, 0xd7, 0xa5, 0x16, 0x45, 0xac,
	0xb7, 0x5e, 0x12, 0x91, 0x71, 0xf1, 0x75, 0xb1, 0x09, 0xc5, 0x07, 0xd9, 0x41, 0x2b, 0xe7, 0xfc,
	0x8b, 0x94, 0xb1, 0x4e, 0x52, 0xd2, 0x15, 0x42, 0xc5, 0x7b, 0x25, 0x87, 0x55, 0xac, 0x76, 0x89,
	0x96, 0xea, 0xec, 0xbb, 0x96, 0xd1, 0xe0, 0x77, 0xd3, 0xa5, 0x14, 0xeb, 0xfc, 0x5e, 0x42, 0xcb,
	0xc3, 0x92, 0xaa, 0x65, 0xf9, 0xdc, 0xe3, 0x18, 0x9c, 0x55, 0xf9, 0x62, 0x1a, 0xea, 0xe8, 0xa2,
	0x3c, 0x27, 0x1d, 0x0c, 0x5e, 0x94, 0x0c, 0xec, 0xbb, 0x28, 0x05, 0x67, 0x74, 0x51, 0x02, 0x85,
	0x87, 0x60, 0xf8, 0xa2, 0xe4, 0xae, 0x81, 0x8b, 0xd2, 0xf4, 0x5c, 0xf5, 0xa1, 0x38, 0x8b, 0x92,
	0x6b, 0x82, 0x16, 0xa5, 0xa9, 0xf8, 0x14, 0x4e, 0x70, 0x17, 0x25, 0xb3, 0x42, 0x17, 0x25, 0xc7,
	0xfa, 0x2d, 0x4a, 0x49, 0xd1, 0xaa, 0x29, 0xba, 0x57, 0x8b, 0x22, 0x66, 0x95, 0x17, 0xf9, 0xeb,
	0x44, 0x7e, 0x49, 0xed, 0x43, 0x26, 0x40, 0x0e, 0xb1, 0xf8, 0x3c, 0xdf, 0xa1, 0x75, 0x71, 0xa7,
	0x19, 0x5b, 0xdf, 0x69, 0x2d, 0x5c, 0x07, 0x4e, 0x84, 0x5c, 0x76, 0xb1, 0xfa, 0x00, 0xdd, 0xe7,
	0xd7, 0x9c, 0xd1, 0xe5, 0x35, 0xd7, 0xd2, 0x87, 0xb0, 0x09, 0x91, 0x43, 0x2d, 0xd6, 0xfd, 0xbb,
	0x84, 0xd6, 0xf4, 0x09, 0x9c, 0x90, 0xd4, 0x56, 0xae, 0xc1, 0x4f, 0xcf, 0xe5, 0x2a, 0xe9, 0xa3,
	0x59, 0x5c, 0xe8, 0x86, 0xe8, 0xa1, 0xbb, 0xfa, 0x5c, 0xd9, 0x70, 0xd1, 0x11, 0x7e, 0x01, 0xef,
	0x07, 0x93, 0x07, 0xf9, 0xed, 0xa0, 0x6c, 0x1f, 0xa8, 0x25, 0x7b, 0xe4, 0xd9, 0x0d, 0x7e, 0xda,
	0x14, 0xad, 0x1a, 0x27, 0x6a, 0x09, 0x1f, 0xf8, 0xf4, 0x82, 0x9f, 0xea, 0x5f, 0x25, 0x74, 0xdf,
	0x3c, 0x0b, 0x4b, 0xf7, 0xd0, 0xeb, 0x18, 0xf3, 0x84, 0x6b, 0x33, 0x78, 0x30, 0xc6, 0xd1, 0xaa,
	0x7b, 0xbf, 0xd5, 0xc7, 0xf0, 0x81, 0xf7, 0x64, 0x00, 0x7f, 0xf4, 0xff, 0x82, 0x36, 0x72, 0x2f,
	0xb7, 0x92, 0x3e, 0x9e, 0x6e, 0x36, 0x80, 0xf5, 0x7f, 0x46, 0x6b, 0xa3, 0x37, 0x5c, 0x89, 0xd7,
	0xa6, 0x98, 0x0e, 0x60, 0xe5, 0x7f, 0x4a, 0xa8, 0x9c, 0x73, 0x3f, 0x95, 0xf6, 0x54, 0x97, 0xdb,
	0x11, 0xaf, 0xcf, 0xe4, 0x23, 0x77, 0x65, 0x88, 0xe6, 0x51, 0x41, 0xee, 0xfb, 0x8e, 0x08, 0x70,
	0x75, 0x46, 0x56, 0x86, 0x2d, 0x5c, 0x9f, 0x6a, 0x48, 0x80, 0xd5, 0xed, 0x95, 0x61, 0x4b, 0x1f,
	0xfa, 0x8f, 0x09, 0xb0, 0xae, 0xbb, 0x32, 0x6c, 0xe5, 0x69, 0xae, 0xb9, 0x23, 0x7d, 0x34, 0x8b,
	0x0b, 0xf3, 0xa5, 0xf3, 0x34, 0xcb, 0xfa, 0xf8, 0x25, 0xb9, 0xc6, 0x09, 0xe0, 0xdd, 0x6f, 0x08,
	0x86, 0xbf, 0x74, 0x9a, 0x1c, 0x2d, 0x7c, 0x80, 0xe6, 0xcf, 0xf1, 0x80, 0x5c, 0x4b, 0xe5, 0x31,
	0x85, 0x9c, 0x50, 0xe0, 0x7d, 0x84, 0xf8, 0xe9, 0x4c, 0xcb, 0x0f, 0xd1, 0xe2, 0x77, 0xf2, 0xff,
	0xad, 0xc9, 0x2e, 0x8a, 0x3f, 0xa7, 0x2c, 0x3f, 0x46, 0x8e, 0xff, 0x96, 0xd0, 0xba, 0x78, 0xe3,
	0xae, 0x0d, 0xff, 0xc2, 0xaa, 0xeb, 0x7f, 0xb0, 0x00, 0xad, 0x3f, 0x81, 0xad, 0xea, 0x7f, 0x3c,
	0x9b, 0x13, 0x1d, 0xec, 0x3b, 0xb4, 0x2e, 0x5e, 0xec, 0xa7, 0x8d, 0x75, 0x02, 0x1b, 0xb6, 0x56,
	0x1b, 0x98, 0xe6, 0x6b, 0x1f, 0x42, 0x5e, 0xc9, 0x27, 0x0a, 0xd7, 0x66, 0xf0, 0xa0, 0x2b, 0xa4,
	0xc6, 0x7c, 0x2e, 0x2e, 0x03, 0x8e, 0xf9, 0x7c, 0xb2, 0xdf, 0x98, 0x1f, 0xe7, 0x43, 0x45, 0x7a,
	0x34, 0xff, 0x6a, 0x4e, 0x33, 0x2e, 0xfe, 0xc7, 0x8b, 0xbd, 0xfb, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xd6, 0x89, 0x80, 0x51, 0x89, 0x23, 0x00, 0x00,
}
