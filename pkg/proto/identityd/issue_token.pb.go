// Code generated by protoc-gen-go. DO NOT EDIT.
// source: issue_token.proto

package identityd

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/mwitkow/go-proto-validators"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AUTH_METHOD int32

const (
	AUTH_METHOD_UNKNOWN                AUTH_METHOD = 0
	AUTH_METHOD_PASSWORD               AUTH_METHOD = 1
	AUTH_METHOD_TOKEN                  AUTH_METHOD = 2
	AUTH_METHOD_APPLICATION_CREDENTIAL AUTH_METHOD = 3
)

var AUTH_METHOD_name = map[int32]string{
	0: "UNKNOWN",
	1: "PASSWORD",
	2: "TOKEN",
	3: "APPLICATION_CREDENTIAL",
}
var AUTH_METHOD_value = map[string]int32{
	"UNKNOWN":                0,
	"PASSWORD":               1,
	"TOKEN":                  2,
	"APPLICATION_CREDENTIAL": 3,
}

func (x AUTH_METHOD) String() string {
	return proto.EnumName(AUTH_METHOD_name, int32(x))
}
func (AUTH_METHOD) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_issue_token_da78f491fb31322c, []int{0}
}

type TokenScope struct {
	DomainId             *wrappers.StringValue `protobuf:"bytes,1,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	ProjectId            *wrappers.StringValue `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TokenScope) Reset()         { *m = TokenScope{} }
func (m *TokenScope) String() string { return proto.CompactTextString(m) }
func (*TokenScope) ProtoMessage()    {}
func (*TokenScope) Descriptor() ([]byte, []int) {
	return fileDescriptor_issue_token_da78f491fb31322c, []int{0}
}
func (m *TokenScope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenScope.Unmarshal(m, b)
}
func (m *TokenScope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenScope.Marshal(b, m, deterministic)
}
func (dst *TokenScope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenScope.Merge(dst, src)
}
func (m *TokenScope) XXX_Size() int {
	return xxx_messageInfo_TokenScope.Size(m)
}
func (m *TokenScope) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenScope.DiscardUnknown(m)
}

var xxx_messageInfo_TokenScope proto.InternalMessageInfo

func (m *TokenScope) GetDomainId() *wrappers.StringValue {
	if m != nil {
		return m.DomainId
	}
	return nil
}

func (m *TokenScope) GetProjectId() *wrappers.StringValue {
	if m != nil {
		return m.ProjectId
	}
	return nil
}

type PasswordPayload struct {
	Id                   *wrappers.StringValue `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Username             *wrappers.StringValue `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password             *wrappers.StringValue `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	DomainId             *wrappers.StringValue `protobuf:"bytes,4,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	DomainName           *wrappers.StringValue `protobuf:"bytes,5,opt,name=domain_name,json=domainName" json:"domain_name,omitempty"`
	Scope                *TokenScope           `protobuf:"bytes,6,opt,name=scope" json:"scope,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PasswordPayload) Reset()         { *m = PasswordPayload{} }
func (m *PasswordPayload) String() string { return proto.CompactTextString(m) }
func (*PasswordPayload) ProtoMessage()    {}
func (*PasswordPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_issue_token_da78f491fb31322c, []int{1}
}
func (m *PasswordPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PasswordPayload.Unmarshal(m, b)
}
func (m *PasswordPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PasswordPayload.Marshal(b, m, deterministic)
}
func (dst *PasswordPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordPayload.Merge(dst, src)
}
func (m *PasswordPayload) XXX_Size() int {
	return xxx_messageInfo_PasswordPayload.Size(m)
}
func (m *PasswordPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordPayload.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordPayload proto.InternalMessageInfo

func (m *PasswordPayload) GetId() *wrappers.StringValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *PasswordPayload) GetUsername() *wrappers.StringValue {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *PasswordPayload) GetPassword() *wrappers.StringValue {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *PasswordPayload) GetDomainId() *wrappers.StringValue {
	if m != nil {
		return m.DomainId
	}
	return nil
}

func (m *PasswordPayload) GetDomainName() *wrappers.StringValue {
	if m != nil {
		return m.DomainName
	}
	return nil
}

func (m *PasswordPayload) GetScope() *TokenScope {
	if m != nil {
		return m.Scope
	}
	return nil
}

type TokenPayload struct {
	TokenId              *wrappers.StringValue `protobuf:"bytes,1,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
	Scope                *TokenScope           `protobuf:"bytes,2,opt,name=scope" json:"scope,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TokenPayload) Reset()         { *m = TokenPayload{} }
func (m *TokenPayload) String() string { return proto.CompactTextString(m) }
func (*TokenPayload) ProtoMessage()    {}
func (*TokenPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_issue_token_da78f491fb31322c, []int{2}
}
func (m *TokenPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenPayload.Unmarshal(m, b)
}
func (m *TokenPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenPayload.Marshal(b, m, deterministic)
}
func (dst *TokenPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenPayload.Merge(dst, src)
}
func (m *TokenPayload) XXX_Size() int {
	return xxx_messageInfo_TokenPayload.Size(m)
}
func (m *TokenPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenPayload.DiscardUnknown(m)
}

var xxx_messageInfo_TokenPayload proto.InternalMessageInfo

func (m *TokenPayload) GetTokenId() *wrappers.StringValue {
	if m != nil {
		return m.TokenId
	}
	return nil
}

func (m *TokenPayload) GetScope() *TokenScope {
	if m != nil {
		return m.Scope
	}
	return nil
}

type ApplicationCredentialPayload struct {
	Id                   *wrappers.StringValue `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name                 *wrappers.StringValue `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Secret               *wrappers.StringValue `protobuf:"bytes,3,opt,name=secret" json:"secret,omitempty"`
	UserId               *wrappers.StringValue `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Username             *wrappers.StringValue `protobuf:"bytes,5,opt,name=username" json:"username,omitempty"`
	DomainId             *wrappers.StringValue `protobuf:"bytes,6,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ApplicationCredentialPayload) Reset()         { *m = ApplicationCredentialPayload{} }
func (m *ApplicationCredentialPayload) String() string { return proto.CompactTextString(m) }
func (*ApplicationCredentialPayload) ProtoMessage()    {}
func (*ApplicationCredentialPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_issue_token_da78f491fb31322c, []int{3}
}
func (m *ApplicationCredentialPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationCredentialPayload.Unmarshal(m, b)
}
func (m *ApplicationCredentialPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationCredentialPayload.Marshal(b, m, deterministic)
}
func (dst *ApplicationCredentialPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationCredentialPayload.Merge(dst, src)
}
func (m *ApplicationCredentialPayload) XXX_Size() int {
	return xxx_messageInfo_ApplicationCredentialPayload.Size(m)
}
func (m *ApplicationCredentialPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationCredentialPayload.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationCredentialPayload proto.InternalMessageInfo

func (m *ApplicationCredentialPayload) GetId() *wrappers.StringValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ApplicationCredentialPayload) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ApplicationCredentialPayload) GetSecret() *wrappers.StringValue {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *ApplicationCredentialPayload) GetUserId() *wrappers.StringValue {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *ApplicationCredentialPayload) GetUsername() *wrappers.StringValue {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *ApplicationCredentialPayload) GetDomainId() *wrappers.StringValue {
	if m != nil {
		return m.DomainId
	}
	return nil
}

type IssueTokenRequest struct {
	Method AUTH_METHOD `protobuf:"varint,1,opt,name=method,enum=ai.metathings.service.identityd.AUTH_METHOD" json:"method,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*IssueTokenRequest_Password
	//	*IssueTokenRequest_Token
	//	*IssueTokenRequest_ApplicationCredential
	Payload              isIssueTokenRequest_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *IssueTokenRequest) Reset()         { *m = IssueTokenRequest{} }
func (m *IssueTokenRequest) String() string { return proto.CompactTextString(m) }
func (*IssueTokenRequest) ProtoMessage()    {}
func (*IssueTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_issue_token_da78f491fb31322c, []int{4}
}
func (m *IssueTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssueTokenRequest.Unmarshal(m, b)
}
func (m *IssueTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssueTokenRequest.Marshal(b, m, deterministic)
}
func (dst *IssueTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueTokenRequest.Merge(dst, src)
}
func (m *IssueTokenRequest) XXX_Size() int {
	return xxx_messageInfo_IssueTokenRequest.Size(m)
}
func (m *IssueTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IssueTokenRequest proto.InternalMessageInfo

type isIssueTokenRequest_Payload interface {
	isIssueTokenRequest_Payload()
}

type IssueTokenRequest_Password struct {
	Password *PasswordPayload `protobuf:"bytes,2,opt,name=password,oneof"`
}
type IssueTokenRequest_Token struct {
	Token *TokenPayload `protobuf:"bytes,3,opt,name=token,oneof"`
}
type IssueTokenRequest_ApplicationCredential struct {
	ApplicationCredential *ApplicationCredentialPayload `protobuf:"bytes,4,opt,name=application_credential,json=applicationCredential,oneof"`
}

func (*IssueTokenRequest_Password) isIssueTokenRequest_Payload()              {}
func (*IssueTokenRequest_Token) isIssueTokenRequest_Payload()                 {}
func (*IssueTokenRequest_ApplicationCredential) isIssueTokenRequest_Payload() {}

func (m *IssueTokenRequest) GetPayload() isIssueTokenRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *IssueTokenRequest) GetMethod() AUTH_METHOD {
	if m != nil {
		return m.Method
	}
	return AUTH_METHOD_UNKNOWN
}

func (m *IssueTokenRequest) GetPassword() *PasswordPayload {
	if x, ok := m.GetPayload().(*IssueTokenRequest_Password); ok {
		return x.Password
	}
	return nil
}

func (m *IssueTokenRequest) GetToken() *TokenPayload {
	if x, ok := m.GetPayload().(*IssueTokenRequest_Token); ok {
		return x.Token
	}
	return nil
}

func (m *IssueTokenRequest) GetApplicationCredential() *ApplicationCredentialPayload {
	if x, ok := m.GetPayload().(*IssueTokenRequest_ApplicationCredential); ok {
		return x.ApplicationCredential
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IssueTokenRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IssueTokenRequest_OneofMarshaler, _IssueTokenRequest_OneofUnmarshaler, _IssueTokenRequest_OneofSizer, []interface{}{
		(*IssueTokenRequest_Password)(nil),
		(*IssueTokenRequest_Token)(nil),
		(*IssueTokenRequest_ApplicationCredential)(nil),
	}
}

func _IssueTokenRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IssueTokenRequest)
	// payload
	switch x := m.Payload.(type) {
	case *IssueTokenRequest_Password:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Password); err != nil {
			return err
		}
	case *IssueTokenRequest_Token:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Token); err != nil {
			return err
		}
	case *IssueTokenRequest_ApplicationCredential:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApplicationCredential); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("IssueTokenRequest.Payload has unexpected type %T", x)
	}
	return nil
}

func _IssueTokenRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IssueTokenRequest)
	switch tag {
	case 2: // payload.password
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PasswordPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &IssueTokenRequest_Password{msg}
		return true, err
	case 3: // payload.token
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TokenPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &IssueTokenRequest_Token{msg}
		return true, err
	case 4: // payload.application_credential
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ApplicationCredentialPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &IssueTokenRequest_ApplicationCredential{msg}
		return true, err
	default:
		return false, nil
	}
}

func _IssueTokenRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IssueTokenRequest)
	// payload
	switch x := m.Payload.(type) {
	case *IssueTokenRequest_Password:
		s := proto.Size(x.Password)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IssueTokenRequest_Token:
		s := proto.Size(x.Token)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IssueTokenRequest_ApplicationCredential:
		s := proto.Size(x.ApplicationCredential)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type IssueTokenResponse struct {
	Token                *Token   `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssueTokenResponse) Reset()         { *m = IssueTokenResponse{} }
func (m *IssueTokenResponse) String() string { return proto.CompactTextString(m) }
func (*IssueTokenResponse) ProtoMessage()    {}
func (*IssueTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_issue_token_da78f491fb31322c, []int{5}
}
func (m *IssueTokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssueTokenResponse.Unmarshal(m, b)
}
func (m *IssueTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssueTokenResponse.Marshal(b, m, deterministic)
}
func (dst *IssueTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueTokenResponse.Merge(dst, src)
}
func (m *IssueTokenResponse) XXX_Size() int {
	return xxx_messageInfo_IssueTokenResponse.Size(m)
}
func (m *IssueTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IssueTokenResponse proto.InternalMessageInfo

func (m *IssueTokenResponse) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func init() {
	proto.RegisterType((*TokenScope)(nil), "ai.metathings.service.identityd.TokenScope")
	proto.RegisterType((*PasswordPayload)(nil), "ai.metathings.service.identityd.PasswordPayload")
	proto.RegisterType((*TokenPayload)(nil), "ai.metathings.service.identityd.TokenPayload")
	proto.RegisterType((*ApplicationCredentialPayload)(nil), "ai.metathings.service.identityd.ApplicationCredentialPayload")
	proto.RegisterType((*IssueTokenRequest)(nil), "ai.metathings.service.identityd.IssueTokenRequest")
	proto.RegisterType((*IssueTokenResponse)(nil), "ai.metathings.service.identityd.IssueTokenResponse")
	proto.RegisterEnum("ai.metathings.service.identityd.AUTH_METHOD", AUTH_METHOD_name, AUTH_METHOD_value)
}

func init() { proto.RegisterFile("issue_token.proto", fileDescriptor_issue_token_da78f491fb31322c) }

var fileDescriptor_issue_token_da78f491fb31322c = []byte{
	// 619 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcd, 0x4e, 0xdb, 0x4e,
	0x14, 0xc5, 0x89, 0x21, 0x4e, 0x72, 0x83, 0xfe, 0xff, 0x30, 0x52, 0x11, 0x42, 0xa8, 0xa0, 0x2c,
	0xaa, 0xaa, 0x05, 0x07, 0xd1, 0x0f, 0xb5, 0x6a, 0x51, 0x65, 0x20, 0x52, 0x2c, 0xa8, 0x1d, 0x39,
	0xa6, 0x2c, 0xa3, 0xc1, 0x9e, 0x9a, 0x29, 0xb6, 0xc7, 0xf5, 0x8c, 0x89, 0xd8, 0xf7, 0x09, 0xfa,
	0x82, 0xad, 0xfa, 0x04, 0xdd, 0x77, 0x53, 0x79, 0xec, 0x7c, 0x50, 0x55, 0x8d, 0xc3, 0x2e, 0xc9,
	0x9c, 0x73, 0xe7, 0xdc, 0x7b, 0x7f, 0x13, 0x58, 0xa3, 0x9c, 0xa7, 0x64, 0x28, 0xd8, 0x35, 0x89,
	0xb4, 0x38, 0x61, 0x82, 0xa1, 0x6d, 0x4c, 0xb5, 0x90, 0x08, 0x2c, 0xae, 0x68, 0xe4, 0x73, 0x8d,
	0x93, 0xe4, 0x86, 0xba, 0x44, 0xa3, 0x1e, 0x89, 0x04, 0x15, 0xb7, 0xde, 0xe6, 0x43, 0x9f, 0x31,
	0x3f, 0x20, 0x1d, 0x29, 0xbf, 0x4c, 0x3f, 0x76, 0x46, 0x09, 0x8e, 0x63, 0x92, 0xf0, 0xbc, 0xc0,
	0xe6, 0x4b, 0x9f, 0x8a, 0xab, 0xf4, 0x52, 0x73, 0x59, 0xd8, 0x09, 0x47, 0x54, 0x5c, 0xb3, 0x51,
	0xc7, 0x67, 0x7b, 0xf2, 0x70, 0xef, 0x06, 0x07, 0xd4, 0xc3, 0x82, 0x25, 0xbc, 0x33, 0xf9, 0x58,
	0xf8, 0x9a, 0x33, 0x29, 0xda, 0x5f, 0x2a, 0x00, 0x4e, 0xf6, 0x7d, 0xe0, 0xb2, 0x98, 0xa0, 0xd7,
	0xd0, 0xf0, 0x58, 0x88, 0x69, 0x34, 0xa4, 0xde, 0x46, 0x65, 0xa7, 0xf2, 0xb8, 0x79, 0xb0, 0xa5,
	0xe5, 0x39, 0xb4, 0x71, 0x0e, 0x6d, 0x20, 0x12, 0x1a, 0xf9, 0x1f, 0x70, 0x90, 0x12, 0xbb, 0x9e,
	0xcb, 0x0d, 0x0f, 0xbd, 0x01, 0x88, 0x13, 0xf6, 0x89, 0xb8, 0x22, 0xf3, 0x2a, 0x25, 0xbc, 0x8d,
	0x42, 0x6f, 0x78, 0xed, 0x9f, 0x0a, 0xfc, 0xdf, 0xc7, 0x9c, 0x8f, 0x58, 0xe2, 0xf5, 0xf1, 0x6d,
	0xc0, 0xb0, 0x87, 0x76, 0x41, 0x29, 0x19, 0x42, 0xa1, 0x1e, 0x7a, 0x05, 0xf5, 0x94, 0x93, 0x24,
	0xc2, 0x21, 0x29, 0x75, 0xf9, 0x44, 0x9d, 0x39, 0xe3, 0xe2, 0xea, 0x8d, 0xe5, 0x32, 0xce, 0xb1,
	0xfa, 0xee, 0xb4, 0x56, 0x16, 0x9a, 0xd6, 0x21, 0x34, 0x0b, 0xab, 0x4c, 0x5c, 0x2d, 0x61, 0x86,
	0xdc, 0x60, 0x66, 0x99, 0x75, 0xa8, 0xf2, 0x6c, 0x61, 0x1b, 0xaa, 0x34, 0x3e, 0xd5, 0xe6, 0xc0,
	0xa4, 0x4d, 0x77, 0x6c, 0xe7, 0xce, 0xf6, 0xd7, 0x0a, 0xac, 0xca, 0x5f, 0xc7, 0xf3, 0x7e, 0x07,
	0x75, 0x49, 0x46, 0xc9, 0xd5, 0x1f, 0xa9, 0x3f, 0xbe, 0x6d, 0x2b, 0x3b, 0x15, 0xbb, 0x26, 0x5d,
	0x86, 0x37, 0x0d, 0xa5, 0xdc, 0x3b, 0xd4, 0x77, 0x05, 0xb6, 0xf4, 0x38, 0x0e, 0xa8, 0x8b, 0x05,
	0x65, 0xd1, 0x71, 0x42, 0xa4, 0x18, 0x07, 0xf7, 0x83, 0x62, 0x1f, 0x56, 0x4a, 0x03, 0x21, 0x95,
	0xe8, 0x39, 0xa8, 0x9c, 0xb8, 0x09, 0x11, 0xa5, 0x50, 0x28, 0xb4, 0xe8, 0x05, 0xd4, 0x32, 0x9c,
	0xca, 0x62, 0xa0, 0x66, 0x62, 0xe3, 0x2e, 0xb3, 0xd5, 0x85, 0x98, 0xbd, 0x43, 0x9e, 0xba, 0x08,
	0x79, 0xed, 0x5f, 0x0a, 0xac, 0x19, 0xd9, 0xbf, 0x91, 0x9c, 0xbe, 0x4d, 0x3e, 0xa7, 0x84, 0x0b,
	0x74, 0x06, 0x6a, 0x48, 0xc4, 0x15, 0xcb, 0x67, 0xfb, 0xdf, 0xc1, 0xee, 0xdc, 0xe5, 0xe9, 0xe7,
	0x4e, 0x6f, 0xf8, 0xbe, 0xeb, 0xf4, 0xac, 0x93, 0x09, 0x0a, 0x45, 0x0d, 0x64, 0xce, 0x3c, 0xa9,
	0x7c, 0xf6, 0xfb, 0x73, 0xeb, 0xfd, 0xf1, 0xfc, 0x7b, 0x4b, 0x33, 0x0f, 0xad, 0x0b, 0x55, 0x09,
	0x59, 0xb1, 0x94, 0xbd, 0x72, 0x64, 0x4d, 0x2b, 0xe5, 0x6e, 0x74, 0x03, 0xeb, 0x78, 0x0a, 0xd7,
	0xd0, 0x9d, 0xd0, 0x55, 0x6c, 0xed, 0x70, 0x7e, 0xd3, 0xff, 0x60, 0xb3, 0xb7, 0x64, 0x3f, 0xc0,
	0x7f, 0x3b, 0x3f, 0x6a, 0x40, 0x2d, 0xce, 0x35, 0x6d, 0x1b, 0xd0, 0xec, 0xf0, 0x79, 0xcc, 0x22,
	0x4e, 0xd0, 0xdb, 0x71, 0x7f, 0x39, 0xd8, 0x8f, 0xca, 0xf5, 0x57, 0xb4, 0xf5, 0xc4, 0x82, 0xe6,
	0xcc, 0x32, 0x50, 0x13, 0x6a, 0xe7, 0xe6, 0xa9, 0x69, 0x5d, 0x98, 0xad, 0x25, 0xb4, 0x0a, 0xf5,
	0xbe, 0x3e, 0x18, 0x5c, 0x58, 0xf6, 0x49, 0xab, 0x82, 0x1a, 0x50, 0x75, 0xac, 0xd3, 0xae, 0xd9,
	0x52, 0xd0, 0x26, 0xac, 0xeb, 0xfd, 0xfe, 0x99, 0x71, 0xac, 0x3b, 0x86, 0x65, 0x0e, 0x8f, 0xed,
	0xee, 0x49, 0xd7, 0x74, 0x0c, 0xfd, 0xac, 0xb5, 0x7c, 0xa9, 0x4a, 0x84, 0x9e, 0xfd, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0xf5, 0xa7, 0x4c, 0x16, 0xb6, 0x06, 0x00, 0x00,
}
