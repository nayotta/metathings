// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: issue_token.proto

package identityd

import fmt "fmt"
import go_proto_validators "github.com/mwitkow/go-proto-validators"
import proto "github.com/golang/protobuf/proto"
import math "math"
import _ "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/mwitkow/go-proto-validators"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *TokenScope) Validate() error {
	if this.DomainId != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.DomainId); err != nil {
			return go_proto_validators.FieldError("DomainId", err)
		}
	}
	if this.ProjectId != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.ProjectId); err != nil {
			return go_proto_validators.FieldError("ProjectId", err)
		}
	}
	return nil
}
func (this *PasswordPayload) Validate() error {
	if this.Id != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.Id); err != nil {
			return go_proto_validators.FieldError("Id", err)
		}
	}
	if this.Username != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.Username); err != nil {
			return go_proto_validators.FieldError("Username", err)
		}
	}
	if this.Password != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.Password); err != nil {
			return go_proto_validators.FieldError("Password", err)
		}
	}
	if this.DomainId != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.DomainId); err != nil {
			return go_proto_validators.FieldError("DomainId", err)
		}
	}
	if this.DomainName != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.DomainName); err != nil {
			return go_proto_validators.FieldError("DomainName", err)
		}
	}
	if this.Scope != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.Scope); err != nil {
			return go_proto_validators.FieldError("Scope", err)
		}
	}
	return nil
}
func (this *TokenPayload) Validate() error {
	if nil == this.TokenId {
		return go_proto_validators.FieldError("TokenId", fmt.Errorf("message must exist"))
	}
	if this.TokenId != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.TokenId); err != nil {
			return go_proto_validators.FieldError("TokenId", err)
		}
	}
	if this.Scope != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.Scope); err != nil {
			return go_proto_validators.FieldError("Scope", err)
		}
	}
	return nil
}
func (this *ApplicationCredentialPayload) Validate() error {
	if this.Id != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.Id); err != nil {
			return go_proto_validators.FieldError("Id", err)
		}
	}
	if this.Name != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.Name); err != nil {
			return go_proto_validators.FieldError("Name", err)
		}
	}
	if this.Secret != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.Secret); err != nil {
			return go_proto_validators.FieldError("Secret", err)
		}
	}
	if this.UserId != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.UserId); err != nil {
			return go_proto_validators.FieldError("UserId", err)
		}
	}
	if this.Username != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.Username); err != nil {
			return go_proto_validators.FieldError("Username", err)
		}
	}
	if this.DomainId != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.DomainId); err != nil {
			return go_proto_validators.FieldError("DomainId", err)
		}
	}
	return nil
}
func (this *IssueTokenRequest) Validate() error {
	if oneOfNester, ok := this.GetPayload().(*IssueTokenRequest_Password); ok {
		if oneOfNester.Password != nil {
			if err := go_proto_validators.CallValidatorIfExists(oneOfNester.Password); err != nil {
				return go_proto_validators.FieldError("Password", err)
			}
		}
	}
	if oneOfNester, ok := this.GetPayload().(*IssueTokenRequest_Token); ok {
		if oneOfNester.Token != nil {
			if err := go_proto_validators.CallValidatorIfExists(oneOfNester.Token); err != nil {
				return go_proto_validators.FieldError("Token", err)
			}
		}
	}
	if oneOfNester, ok := this.GetPayload().(*IssueTokenRequest_ApplicationCredential); ok {
		if oneOfNester.ApplicationCredential != nil {
			if err := go_proto_validators.CallValidatorIfExists(oneOfNester.ApplicationCredential); err != nil {
				return go_proto_validators.FieldError("ApplicationCredential", err)
			}
		}
	}
	return nil
}
func (this *IssueTokenResponse) Validate() error {
	if this.Token != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.Token); err != nil {
			return go_proto_validators.FieldError("Token", err)
		}
	}
	return nil
}
