// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package core_agent

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0xfb, 0x6d, 0x0a, 0x9d, 0x2f, 0x62, 0x1d, 0xc1, 0x45, 0xdc, 0x48, 0x1f, 0x60, 0x0a,
	0xad, 0x75, 0xa1, 0x2b, 0xad, 0x45, 0x17, 0x82, 0xa2, 0x2b, 0xdd, 0x84, 0x69, 0xbc, 0xa6, 0x03,
	0x69, 0x26, 0xce, 0xdc, 0x16, 0x04, 0xa1, 0x6f, 0xe0, 0xeb, 0xf9, 0x3a, 0x92, 0x4c, 0x66, 0x92,
	0xd6, 0x45, 0x12, 0xb7, 0x27, 0xe7, 0x77, 0xff, 0x9d, 0x09, 0xd9, 0xd3, 0xa0, 0xd6, 0x22, 0x04,
	0x96, 0x2a, 0x89, 0x92, 0x9e, 0x70, 0xc1, 0x96, 0x80, 0x1c, 0x17, 0x22, 0x89, 0x34, 0xb3, 0x1f,
	0x43, 0xa9, 0x20, 0xe0, 0x11, 0x24, 0xe8, 0x1f, 0x47, 0x52, 0x46, 0x31, 0x0c, 0x73, 0xff, 0x7c,
	0xf5, 0x36, 0x84, 0x65, 0x8a, 0x1f, 0x06, 0xf7, 0x0f, 0x43, 0x05, 0x1c, 0x21, 0x80, 0x04, 0x45,
	0x29, 0xbe, 0x42, 0x0c, 0xbb, 0x22, 0x4d, 0x39, 0x86, 0x8b, 0x6d, 0xad, 0x1f, 0x01, 0xee, 0xa0,
	0xb1, 0xd0, 0x85, 0x24, 0x40, 0x17, 0xa2, 0x5f, 0x34, 0x91, 0x2a, 0xf8, 0x05, 0xec, 0x2f, 0x80,
	0x2b, 0x9c, 0x03, 0x47, 0x23, 0x8c, 0xbe, 0xbb, 0xa4, 0x3f, 0x95, 0x0a, 0x2e, 0xb3, 0xe1, 0x9f,
	0xcc, 0x3a, 0x74, 0x43, 0xbc, 0x69, 0x5e, 0x63, 0x96, 0xb3, 0x74, 0xc2, 0xea, 0xd6, 0x66, 0x55,
	0xff, 0x23, 0xbc, 0xaf, 0x40, 0xa3, 0x7f, 0xd6, 0x16, 0xd3, 0xa9, 0x4c, 0x34, 0x0c, 0x3a, 0x34,
	0x20, 0xde, 0x75, 0x7e, 0x94, 0xe6, 0x03, 0x54, 0xfd, 0x76, 0x80, 0x23, 0x66, 0xc2, 0x60, 0x36,
	0x0c, 0x36, 0xcb, 0xc2, 0x18, 0x74, 0xe8, 0x27, 0xf9, 0xff, 0x90, 0x1d, 0xb8, 0xa8, 0x7f, 0x5a,
	0x5f, 0xbf, 0x62, 0xb7, 0xe5, 0x27, 0x2d, 0x29, 0xb7, 0xde, 0x9a, 0xf4, 0x6e, 0x00, 0x8b, 0xde,
	0xa3, 0xfa, 0x2a, 0xce, 0x6c, 0x3b, 0x8f, 0x5b, 0x31, 0xae, 0xef, 0x86, 0x78, 0x77, 0x42, 0x1b,
	0x5d, 0x80, 0x6e, 0x72, 0xd6, 0xaa, 0xbf, 0x45, 0xae, 0xdb, 0x98, 0x1b, 0xe0, 0xeb, 0x1f, 0x39,
	0x30, 0x91, 0xdf, 0xab, 0xf2, 0x02, 0xe7, 0x4d, 0xdf, 0x49, 0x05, 0xb2, 0xb3, 0x5c, 0xfc, 0x89,
	0x75, 0x03, 0x3d, 0x93, 0xde, 0xad, 0xfd, 0x23, 0x9a, 0x24, 0xe1, 0xcc, 0xb5, 0x4f, 0xec, 0xca,
	0x7b, 0x21, 0x25, 0x38, 0xef, 0xe6, 0xdf, 0xc7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd5, 0xfe,
	0xfd, 0xb9, 0x50, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoreAgentServiceClient is the client API for CoreAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoreAgentServiceClient interface {
	CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error)
	DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PatchEntity(ctx context.Context, in *PatchEntityRequest, opts ...grpc.CallOption) (*PatchEntityResponse, error)
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error)
	ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error)
	CreateOrGetEntity(ctx context.Context, in *CreateOrGetEntityRequest, opts ...grpc.CallOption) (*CreateOrGetEntityResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type coreAgentServiceClient struct {
	cc *grpc.ClientConn
}

func NewCoreAgentServiceClient(cc *grpc.ClientConn) CoreAgentServiceClient {
	return &coreAgentServiceClient{cc}
}

func (c *coreAgentServiceClient) CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error) {
	out := new(CreateEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.core_agent.CoreAgentService/CreateEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAgentServiceClient) DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.core_agent.CoreAgentService/DeleteEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAgentServiceClient) PatchEntity(ctx context.Context, in *PatchEntityRequest, opts ...grpc.CallOption) (*PatchEntityResponse, error) {
	out := new(PatchEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.core_agent.CoreAgentService/PatchEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAgentServiceClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error) {
	out := new(GetEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.core_agent.CoreAgentService/GetEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAgentServiceClient) ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error) {
	out := new(ListEntitiesResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.core_agent.CoreAgentService/ListEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAgentServiceClient) CreateOrGetEntity(ctx context.Context, in *CreateOrGetEntityRequest, opts ...grpc.CallOption) (*CreateOrGetEntityResponse, error) {
	out := new(CreateOrGetEntityResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.core_agent.CoreAgentService/CreateOrGetEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAgentServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.core_agent.CoreAgentService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreAgentServiceServer is the server API for CoreAgentService service.
type CoreAgentServiceServer interface {
	CreateEntity(context.Context, *CreateEntityRequest) (*CreateEntityResponse, error)
	DeleteEntity(context.Context, *DeleteEntityRequest) (*empty.Empty, error)
	PatchEntity(context.Context, *PatchEntityRequest) (*PatchEntityResponse, error)
	GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error)
	ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error)
	CreateOrGetEntity(context.Context, *CreateOrGetEntityRequest) (*CreateOrGetEntityResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*empty.Empty, error)
}

func RegisterCoreAgentServiceServer(s *grpc.Server, srv CoreAgentServiceServer) {
	s.RegisterService(&_CoreAgentService_serviceDesc, srv)
}

func _CoreAgentService_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAgentServiceServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.core_agent.CoreAgentService/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAgentServiceServer).CreateEntity(ctx, req.(*CreateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAgentService_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAgentServiceServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.core_agent.CoreAgentService/DeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAgentServiceServer).DeleteEntity(ctx, req.(*DeleteEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAgentService_PatchEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAgentServiceServer).PatchEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.core_agent.CoreAgentService/PatchEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAgentServiceServer).PatchEntity(ctx, req.(*PatchEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAgentService_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAgentServiceServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.core_agent.CoreAgentService/GetEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAgentServiceServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAgentService_ListEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAgentServiceServer).ListEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.core_agent.CoreAgentService/ListEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAgentServiceServer).ListEntities(ctx, req.(*ListEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAgentService_CreateOrGetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrGetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAgentServiceServer).CreateOrGetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.core_agent.CoreAgentService/CreateOrGetEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAgentServiceServer).CreateOrGetEntity(ctx, req.(*CreateOrGetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAgentService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAgentServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.core_agent.CoreAgentService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAgentServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoreAgentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.core_agent.CoreAgentService",
	HandlerType: (*CoreAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntity",
			Handler:    _CoreAgentService_CreateEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _CoreAgentService_DeleteEntity_Handler,
		},
		{
			MethodName: "PatchEntity",
			Handler:    _CoreAgentService_PatchEntity_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _CoreAgentService_GetEntity_Handler,
		},
		{
			MethodName: "ListEntities",
			Handler:    _CoreAgentService_ListEntities_Handler,
		},
		{
			MethodName: "CreateOrGetEntity",
			Handler:    _CoreAgentService_CreateOrGetEntity_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _CoreAgentService_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
