// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package core_agent

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CoreAgentService service

type CoreAgentServiceClient interface {
	CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error)
	DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	PatchEntity(ctx context.Context, in *PatchEntityRequest, opts ...grpc.CallOption) (*PatchEntityResponse, error)
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error)
	ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error)
}

type coreAgentServiceClient struct {
	cc *grpc.ClientConn
}

func NewCoreAgentServiceClient(cc *grpc.ClientConn) CoreAgentServiceClient {
	return &coreAgentServiceClient{cc}
}

func (c *coreAgentServiceClient) CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error) {
	out := new(CreateEntityResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.core_agent.CoreAgentService/CreateEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAgentServiceClient) DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.core_agent.CoreAgentService/DeleteEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAgentServiceClient) PatchEntity(ctx context.Context, in *PatchEntityRequest, opts ...grpc.CallOption) (*PatchEntityResponse, error) {
	out := new(PatchEntityResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.core_agent.CoreAgentService/PatchEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAgentServiceClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error) {
	out := new(GetEntityResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.core_agent.CoreAgentService/GetEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAgentServiceClient) ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error) {
	out := new(ListEntitiesResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.core_agent.CoreAgentService/ListEntities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CoreAgentService service

type CoreAgentServiceServer interface {
	CreateEntity(context.Context, *CreateEntityRequest) (*CreateEntityResponse, error)
	DeleteEntity(context.Context, *DeleteEntityRequest) (*google_protobuf2.Empty, error)
	PatchEntity(context.Context, *PatchEntityRequest) (*PatchEntityResponse, error)
	GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error)
	ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error)
}

func RegisterCoreAgentServiceServer(s *grpc.Server, srv CoreAgentServiceServer) {
	s.RegisterService(&_CoreAgentService_serviceDesc, srv)
}

func _CoreAgentService_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAgentServiceServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.core_agent.CoreAgentService/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAgentServiceServer).CreateEntity(ctx, req.(*CreateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAgentService_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAgentServiceServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.core_agent.CoreAgentService/DeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAgentServiceServer).DeleteEntity(ctx, req.(*DeleteEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAgentService_PatchEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAgentServiceServer).PatchEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.core_agent.CoreAgentService/PatchEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAgentServiceServer).PatchEntity(ctx, req.(*PatchEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAgentService_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAgentServiceServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.core_agent.CoreAgentService/GetEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAgentServiceServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAgentService_ListEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAgentServiceServer).ListEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.core_agent.CoreAgentService/ListEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAgentServiceServer).ListEntities(ctx, req.(*ListEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoreAgentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.core_agent.CoreAgentService",
	HandlerType: (*CoreAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntity",
			Handler:    _CoreAgentService_CreateEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _CoreAgentService_DeleteEntity_Handler,
		},
		{
			MethodName: "PatchEntity",
			Handler:    _CoreAgentService_PatchEntity_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _CoreAgentService_GetEntity_Handler,
		},
		{
			MethodName: "ListEntities",
			Handler:    _CoreAgentService_ListEntities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0x4f, 0x4b, 0xf3, 0x30,
	0x1c, 0xde, 0xe1, 0xe5, 0x05, 0x63, 0x85, 0x11, 0xc1, 0x43, 0xbd, 0xc8, 0x3e, 0x40, 0x06, 0x9b,
	0xf3, 0xae, 0x73, 0x78, 0xf1, 0x20, 0x7a, 0xf3, 0x52, 0xba, 0xfa, 0x98, 0x05, 0xba, 0xa6, 0x26,
	0xbf, 0x0d, 0x04, 0x61, 0x1f, 0xd8, 0x2f, 0x21, 0x4d, 0x9a, 0xae, 0xdb, 0xa5, 0xeb, 0xf5, 0xc9,
	0xf3, 0xef, 0xf7, 0x84, 0x5d, 0x58, 0x98, 0xad, 0xca, 0x20, 0x4a, 0xa3, 0x49, 0xf3, 0x9b, 0x54,
	0x89, 0x35, 0x28, 0xa5, 0x95, 0x2a, 0xa4, 0x15, 0xe1, 0x31, 0xd3, 0x06, 0x49, 0x2a, 0x51, 0x50,
	0x7c, 0x2d, 0xb5, 0x96, 0x39, 0xc6, 0x8e, 0xbf, 0xdc, 0x7c, 0x8e, 0xb1, 0x2e, 0xe9, 0xdb, 0xcb,
	0xe3, 0xcb, 0xcc, 0x20, 0x25, 0x24, 0x28, 0x48, 0xed, 0xc1, 0x0f, 0xe4, 0x38, 0x06, 0x79, 0x99,
	0x52, 0xb6, 0x3a, 0xc4, 0x86, 0x12, 0x74, 0x24, 0xcd, 0x95, 0xad, 0x21, 0x05, 0xeb, 0xc1, 0xc9,
	0xef, 0x3f, 0x36, 0x9c, 0x6b, 0x83, 0xfb, 0xaa, 0xcf, 0x9b, 0x6f, 0xc8, 0x77, 0x2c, 0x9a, 0xbb,
	0xec, 0x85, 0xd3, 0xf3, 0x99, 0xe8, 0xba, 0x44, 0xb4, 0xf9, 0xaf, 0xf8, 0xda, 0xc0, 0x52, 0x7c,
	0xd7, 0x57, 0x66, 0x4b, 0x5d, 0x58, 0x8c, 0x06, 0x3c, 0x61, 0xd1, 0xa3, 0xbb, 0xf3, 0xf4, 0x02,
	0x6d, 0x7e, 0x28, 0x70, 0x25, 0xfc, 0xbe, 0x22, 0xec, 0x2b, 0x16, 0xd5, 0xbe, 0xa3, 0x01, 0xff,
	0x61, 0xe7, 0x2f, 0xd5, 0x66, 0xb5, 0xff, 0x6d, 0xb7, 0x7f, 0x8b, 0x1e, 0xec, 0x67, 0x3d, 0x55,
	0xcd, 0x79, 0x5b, 0x76, 0xf6, 0x04, 0xaa, 0xb3, 0x27, 0xdd, 0x2e, 0x0d, 0x39, 0x24, 0x4f, 0x7b,
	0x69, 0x9a, 0xdc, 0x1d, 0x8b, 0x9e, 0x95, 0xf5, 0xb8, 0x82, 0x3d, 0x65, 0xd6, 0x36, 0xbf, 0xc7,
	0xbf, 0x1e, 0xca, 0x42, 0x81, 0x87, 0xe8, 0x9d, 0xed, 0x49, 0xcb, 0xff, 0xee, 0x5b, 0xa6, 0x7f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x84, 0xd5, 0xf5, 0x37, 0x03, 0x00, 0x00,
}
