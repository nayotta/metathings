// Code generated by protoc-gen-go. DO NOT EDIT.
// source: issue_token.proto

package identity

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/mwitkow/go-proto-validators"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AUTH_METHOD int32

const (
	AUTH_METHOD_UNKNOWN                AUTH_METHOD = 0
	AUTH_METHOD_PASSWORD               AUTH_METHOD = 1
	AUTH_METHOD_TOKEN                  AUTH_METHOD = 2
	AUTH_METHOD_APPLICATION_CREDENTIAL AUTH_METHOD = 3
)

var AUTH_METHOD_name = map[int32]string{
	0: "UNKNOWN",
	1: "PASSWORD",
	2: "TOKEN",
	3: "APPLICATION_CREDENTIAL",
}
var AUTH_METHOD_value = map[string]int32{
	"UNKNOWN":                0,
	"PASSWORD":               1,
	"TOKEN":                  2,
	"APPLICATION_CREDENTIAL": 3,
}

func (x AUTH_METHOD) String() string {
	return proto.EnumName(AUTH_METHOD_name, int32(x))
}
func (AUTH_METHOD) EnumDescriptor() ([]byte, []int) { return fileDescriptor35, []int{0} }

type TokenScope struct {
	DomainId  *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	ProjectId *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (m *TokenScope) Reset()                    { *m = TokenScope{} }
func (m *TokenScope) String() string            { return proto.CompactTextString(m) }
func (*TokenScope) ProtoMessage()               {}
func (*TokenScope) Descriptor() ([]byte, []int) { return fileDescriptor35, []int{0} }

func (m *TokenScope) GetDomainId() *google_protobuf.StringValue {
	if m != nil {
		return m.DomainId
	}
	return nil
}

func (m *TokenScope) GetProjectId() *google_protobuf.StringValue {
	if m != nil {
		return m.ProjectId
	}
	return nil
}

type PasswordPayload struct {
	Id         *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Username   *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password   *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	DomainId   *google_protobuf.StringValue `protobuf:"bytes,4,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	DomainName *google_protobuf.StringValue `protobuf:"bytes,5,opt,name=domain_name,json=domainName" json:"domain_name,omitempty"`
	Scope      *TokenScope                  `protobuf:"bytes,6,opt,name=scope" json:"scope,omitempty"`
}

func (m *PasswordPayload) Reset()                    { *m = PasswordPayload{} }
func (m *PasswordPayload) String() string            { return proto.CompactTextString(m) }
func (*PasswordPayload) ProtoMessage()               {}
func (*PasswordPayload) Descriptor() ([]byte, []int) { return fileDescriptor35, []int{1} }

func (m *PasswordPayload) GetId() *google_protobuf.StringValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *PasswordPayload) GetUsername() *google_protobuf.StringValue {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *PasswordPayload) GetPassword() *google_protobuf.StringValue {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *PasswordPayload) GetDomainId() *google_protobuf.StringValue {
	if m != nil {
		return m.DomainId
	}
	return nil
}

func (m *PasswordPayload) GetDomainName() *google_protobuf.StringValue {
	if m != nil {
		return m.DomainName
	}
	return nil
}

func (m *PasswordPayload) GetScope() *TokenScope {
	if m != nil {
		return m.Scope
	}
	return nil
}

type TokenPayload struct {
	TokenId *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
	Scope   *TokenScope                  `protobuf:"bytes,2,opt,name=scope" json:"scope,omitempty"`
}

func (m *TokenPayload) Reset()                    { *m = TokenPayload{} }
func (m *TokenPayload) String() string            { return proto.CompactTextString(m) }
func (*TokenPayload) ProtoMessage()               {}
func (*TokenPayload) Descriptor() ([]byte, []int) { return fileDescriptor35, []int{2} }

func (m *TokenPayload) GetTokenId() *google_protobuf.StringValue {
	if m != nil {
		return m.TokenId
	}
	return nil
}

func (m *TokenPayload) GetScope() *TokenScope {
	if m != nil {
		return m.Scope
	}
	return nil
}

type ApplicationCredentialPayload struct {
	Id     *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name   *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Secret *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=secret" json:"secret,omitempty"`
}

func (m *ApplicationCredentialPayload) Reset()                    { *m = ApplicationCredentialPayload{} }
func (m *ApplicationCredentialPayload) String() string            { return proto.CompactTextString(m) }
func (*ApplicationCredentialPayload) ProtoMessage()               {}
func (*ApplicationCredentialPayload) Descriptor() ([]byte, []int) { return fileDescriptor35, []int{3} }

func (m *ApplicationCredentialPayload) GetId() *google_protobuf.StringValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ApplicationCredentialPayload) GetName() *google_protobuf.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ApplicationCredentialPayload) GetSecret() *google_protobuf.StringValue {
	if m != nil {
		return m.Secret
	}
	return nil
}

type IssueTokenRequest struct {
	Method AUTH_METHOD `protobuf:"varint,1,opt,name=method,enum=ai.metathings.service.identity.AUTH_METHOD" json:"method,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*IssueTokenRequest_Password
	//	*IssueTokenRequest_Token
	//	*IssueTokenRequest_ApplicationCredential
	Payload isIssueTokenRequest_Payload `protobuf_oneof:"payload"`
}

func (m *IssueTokenRequest) Reset()                    { *m = IssueTokenRequest{} }
func (m *IssueTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*IssueTokenRequest) ProtoMessage()               {}
func (*IssueTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor35, []int{4} }

type isIssueTokenRequest_Payload interface {
	isIssueTokenRequest_Payload()
}

type IssueTokenRequest_Password struct {
	Password *PasswordPayload `protobuf:"bytes,2,opt,name=password,oneof"`
}
type IssueTokenRequest_Token struct {
	Token *TokenPayload `protobuf:"bytes,3,opt,name=token,oneof"`
}
type IssueTokenRequest_ApplicationCredential struct {
	ApplicationCredential *ApplicationCredentialPayload `protobuf:"bytes,4,opt,name=application_credential,json=applicationCredential,oneof"`
}

func (*IssueTokenRequest_Password) isIssueTokenRequest_Payload()              {}
func (*IssueTokenRequest_Token) isIssueTokenRequest_Payload()                 {}
func (*IssueTokenRequest_ApplicationCredential) isIssueTokenRequest_Payload() {}

func (m *IssueTokenRequest) GetPayload() isIssueTokenRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *IssueTokenRequest) GetMethod() AUTH_METHOD {
	if m != nil {
		return m.Method
	}
	return AUTH_METHOD_UNKNOWN
}

func (m *IssueTokenRequest) GetPassword() *PasswordPayload {
	if x, ok := m.GetPayload().(*IssueTokenRequest_Password); ok {
		return x.Password
	}
	return nil
}

func (m *IssueTokenRequest) GetToken() *TokenPayload {
	if x, ok := m.GetPayload().(*IssueTokenRequest_Token); ok {
		return x.Token
	}
	return nil
}

func (m *IssueTokenRequest) GetApplicationCredential() *ApplicationCredentialPayload {
	if x, ok := m.GetPayload().(*IssueTokenRequest_ApplicationCredential); ok {
		return x.ApplicationCredential
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IssueTokenRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IssueTokenRequest_OneofMarshaler, _IssueTokenRequest_OneofUnmarshaler, _IssueTokenRequest_OneofSizer, []interface{}{
		(*IssueTokenRequest_Password)(nil),
		(*IssueTokenRequest_Token)(nil),
		(*IssueTokenRequest_ApplicationCredential)(nil),
	}
}

func _IssueTokenRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IssueTokenRequest)
	// payload
	switch x := m.Payload.(type) {
	case *IssueTokenRequest_Password:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Password); err != nil {
			return err
		}
	case *IssueTokenRequest_Token:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Token); err != nil {
			return err
		}
	case *IssueTokenRequest_ApplicationCredential:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApplicationCredential); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("IssueTokenRequest.Payload has unexpected type %T", x)
	}
	return nil
}

func _IssueTokenRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IssueTokenRequest)
	switch tag {
	case 2: // payload.password
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PasswordPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &IssueTokenRequest_Password{msg}
		return true, err
	case 3: // payload.token
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TokenPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &IssueTokenRequest_Token{msg}
		return true, err
	case 4: // payload.application_credential
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ApplicationCredentialPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &IssueTokenRequest_ApplicationCredential{msg}
		return true, err
	default:
		return false, nil
	}
}

func _IssueTokenRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IssueTokenRequest)
	// payload
	switch x := m.Payload.(type) {
	case *IssueTokenRequest_Password:
		s := proto.Size(x.Password)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IssueTokenRequest_Token:
		s := proto.Size(x.Token)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IssueTokenRequest_ApplicationCredential:
		s := proto.Size(x.ApplicationCredential)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type IssueTokenResponse struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *IssueTokenResponse) Reset()                    { *m = IssueTokenResponse{} }
func (m *IssueTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*IssueTokenResponse) ProtoMessage()               {}
func (*IssueTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor35, []int{5} }

func (m *IssueTokenResponse) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func init() {
	proto.RegisterType((*TokenScope)(nil), "ai.metathings.service.identity.TokenScope")
	proto.RegisterType((*PasswordPayload)(nil), "ai.metathings.service.identity.PasswordPayload")
	proto.RegisterType((*TokenPayload)(nil), "ai.metathings.service.identity.TokenPayload")
	proto.RegisterType((*ApplicationCredentialPayload)(nil), "ai.metathings.service.identity.ApplicationCredentialPayload")
	proto.RegisterType((*IssueTokenRequest)(nil), "ai.metathings.service.identity.IssueTokenRequest")
	proto.RegisterType((*IssueTokenResponse)(nil), "ai.metathings.service.identity.IssueTokenResponse")
	proto.RegisterEnum("ai.metathings.service.identity.AUTH_METHOD", AUTH_METHOD_name, AUTH_METHOD_value)
}

func init() { proto.RegisterFile("issue_token.proto", fileDescriptor35) }

var fileDescriptor35 = []byte{
	// 616 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x18, 0xac, 0xdd, 0x24, 0x4d, 0xbe, 0x54, 0x90, 0xae, 0x44, 0x15, 0x55, 0x55, 0xa9, 0x22, 0x21,
	0xa1, 0xd2, 0x3a, 0xa8, 0x20, 0x04, 0x2a, 0x08, 0xdc, 0x26, 0x52, 0xdc, 0x1f, 0x3b, 0x38, 0x2e,
	0x3d, 0x46, 0x5b, 0x7b, 0x71, 0x97, 0xda, 0x5e, 0xe3, 0x5d, 0x37, 0xea, 0x63, 0xf0, 0x1c, 0x5c,
	0x79, 0x1f, 0x24, 0x5e, 0x80, 0x23, 0x57, 0xe4, 0x9f, 0x24, 0x06, 0xa1, 0xd6, 0xf4, 0x96, 0xcd,
	0xce, 0x7c, 0x99, 0xf9, 0x66, 0x36, 0xb0, 0x42, 0x39, 0x8f, 0xc9, 0x58, 0xb0, 0x4b, 0x12, 0x28,
	0x61, 0xc4, 0x04, 0x43, 0x1b, 0x98, 0x2a, 0x3e, 0x11, 0x58, 0x5c, 0xd0, 0xc0, 0xe5, 0x0a, 0x27,
	0xd1, 0x15, 0xb5, 0x89, 0x42, 0x1d, 0x12, 0x08, 0x2a, 0xae, 0xd7, 0x36, 0x5c, 0xc6, 0x5c, 0x8f,
	0x74, 0x53, 0xf4, 0x79, 0xfc, 0xb1, 0x3b, 0x89, 0x70, 0x18, 0x92, 0x88, 0x67, 0xfc, 0xb5, 0x17,
	0x2e, 0x15, 0x17, 0xf1, 0xb9, 0x62, 0x33, 0xbf, 0xeb, 0x4f, 0xa8, 0xb8, 0x64, 0x93, 0xae, 0xcb,
	0x76, 0xd2, 0xcb, 0x9d, 0x2b, 0xec, 0x51, 0x07, 0x0b, 0x16, 0xf1, 0xee, 0xec, 0x63, 0xce, 0x6b,
	0x16, 0x44, 0x74, 0xbe, 0x4a, 0x00, 0x56, 0x72, 0x1e, 0xd9, 0x2c, 0x24, 0xe8, 0x15, 0x34, 0x1c,
	0xe6, 0x63, 0x1a, 0x8c, 0xa9, 0xd3, 0x96, 0x36, 0xa5, 0xc7, 0xcd, 0xdd, 0x75, 0x25, 0xd3, 0xa1,
	0x4c, 0x75, 0x28, 0x23, 0x11, 0xd1, 0xc0, 0xfd, 0x80, 0xbd, 0x98, 0x98, 0xf5, 0x0c, 0xae, 0x39,
	0x68, 0x0f, 0x20, 0x8c, 0xd8, 0x27, 0x62, 0x8b, 0x84, 0xbb, 0x58, 0x82, 0xdb, 0xc8, 0xf1, 0x9a,
	0x73, 0x58, 0xa9, 0xcb, 0xad, 0xc5, 0xc3, 0x4a, 0xbd, 0xd2, 0xaa, 0x9a, 0xcd, 0x5c, 0x41, 0x80,
	0x7d, 0x62, 0x2e, 0x4f, 0x67, 0x26, 0xa7, 0xce, 0x4f, 0x19, 0xee, 0x0f, 0x31, 0xe7, 0x13, 0x16,
	0x39, 0x43, 0x7c, 0xed, 0x31, 0xec, 0xa0, 0x6d, 0x90, 0x4b, 0x6a, 0x95, 0xa9, 0x83, 0x5e, 0x42,
	0x3d, 0xe6, 0x24, 0x4a, 0xa6, 0xb5, 0xe5, 0x32, 0xfe, 0xa6, 0xe8, 0x84, 0x19, 0xe6, 0x3f, 0x5d,
	0xca, 0xdd, 0x0c, 0xfd, 0xe7, 0x52, 0x2b, 0xff, 0xb5, 0xd4, 0x37, 0x50, 0xdc, 0x46, 0xbb, 0x5a,
	0x82, 0x0c, 0x19, 0x41, 0x4f, 0x34, 0xbf, 0x83, 0x2a, 0x4f, 0x72, 0x6d, 0xd7, 0x52, 0xe2, 0x96,
	0x72, 0x73, 0xe5, 0x94, 0x79, 0x13, 0xcc, 0x8c, 0xd8, 0xf9, 0x22, 0xc1, 0x72, 0xfa, 0xed, 0x74,
	0xdd, 0x6f, 0xa1, 0x9e, 0xf6, 0xa7, 0x64, 0x41, 0xf6, 0x6b, 0x3f, 0xbe, 0x3f, 0x94, 0x37, 0x25,
	0x73, 0x29, 0x65, 0x69, 0xce, 0x5c, 0x93, 0x7c, 0x57, 0x4d, 0xdf, 0x24, 0x58, 0x57, 0xc3, 0xd0,
	0xa3, 0x36, 0x16, 0x94, 0x05, 0x07, 0x11, 0x49, 0xb1, 0xd8, 0xbb, 0x5b, 0x25, 0x9e, 0x42, 0xa5,
	0x74, 0x1d, 0x52, 0x24, 0x7a, 0x0e, 0x35, 0x4e, 0xec, 0x88, 0x88, 0x52, 0x45, 0xc8, 0xb1, 0x9d,
	0x5f, 0x32, 0xac, 0x68, 0xc9, 0xbf, 0x40, 0xea, 0xc8, 0x24, 0x9f, 0x63, 0xc2, 0x05, 0x3a, 0x82,
	0x9a, 0x4f, 0xc4, 0x05, 0xcb, 0xf4, 0xde, 0xdb, 0x7d, 0x72, 0xdb, 0x3e, 0xd4, 0x53, 0x6b, 0x30,
	0x3e, 0xe9, 0x5b, 0x03, 0xa3, 0x37, 0x5b, 0x6e, 0x3e, 0x02, 0x9d, 0x14, 0x3a, 0x9a, 0xd9, 0xe9,
	0xde, 0x36, 0xee, 0xaf, 0xe7, 0x34, 0x58, 0x28, 0x14, 0xb7, 0x07, 0xd5, 0x34, 0xb5, 0xdc, 0xe6,
	0x76, 0xa9, 0xa8, 0xe6, 0x83, 0x32, 0x32, 0x8a, 0x61, 0x15, 0xcf, 0xd3, 0x1a, 0xdb, 0xb3, 0xb8,
	0xf2, 0xb7, 0xf0, 0xfa, 0x56, 0xc7, 0x37, 0x64, 0x3d, 0x58, 0x30, 0x1f, 0xe0, 0x7f, 0xdd, 0xef,
	0x37, 0x60, 0x29, 0xcc, 0x30, 0x9d, 0xf7, 0x80, 0x8a, 0x8b, 0xe7, 0x21, 0x0b, 0x38, 0x41, 0x7b,
	0x53, 0x77, 0x59, 0x51, 0x1e, 0x95, 0x72, 0x97, 0x9b, 0xda, 0x32, 0xa0, 0x59, 0x08, 0x02, 0x35,
	0x61, 0xe9, 0x54, 0x3f, 0xd2, 0x8d, 0x33, 0xbd, 0xb5, 0x80, 0x96, 0xa1, 0x3e, 0x54, 0x47, 0xa3,
	0x33, 0xc3, 0xec, 0xb5, 0x24, 0xd4, 0x80, 0xaa, 0x65, 0x1c, 0xf5, 0xf5, 0x96, 0x8c, 0xd6, 0x60,
	0x55, 0x1d, 0x0e, 0x8f, 0xb5, 0x03, 0xd5, 0xd2, 0x0c, 0x7d, 0x7c, 0x60, 0xf6, 0x7b, 0x7d, 0xdd,
	0xd2, 0xd4, 0xe3, 0xd6, 0xe2, 0x79, 0x2d, 0xed, 0xce, 0xb3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x79, 0x7f, 0xa4, 0x65, 0x29, 0x06, 0x00, 0x00,
}
