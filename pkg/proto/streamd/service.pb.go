// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package streamd

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x4e, 0x02, 0x31,
	0x10, 0xc6, 0x49, 0x94, 0x35, 0x14, 0xf5, 0x50, 0x13, 0x0f, 0x18, 0x2f, 0xdc, 0x14, 0x2c, 0x11,
	0xdf, 0xc0, 0x7f, 0x5c, 0x3c, 0x10, 0x37, 0x5e, 0x3c, 0x48, 0x0a, 0x3b, 0x2c, 0x9b, 0x00, 0x5d,
	0x3b, 0x03, 0x89, 0x0f, 0xe6, 0xfb, 0x99, 0xb6, 0xdb, 0xc6, 0x93, 0xad, 0xb7, 0x99, 0xdd, 0xdf,
	0x37, 0xdf, 0xf4, 0x6b, 0xd9, 0x09, 0x82, 0xde, 0x57, 0x0b, 0x10, 0xb5, 0x56, 0xa4, 0xf8, 0xa5,
	0xac, 0xc4, 0x06, 0x48, 0xd2, 0xaa, 0xda, 0x96, 0x28, 0xfc, 0x4f, 0x24, 0x0d, 0x72, 0x53, 0xf4,
	0x2e, 0x4a, 0xa5, 0xca, 0x35, 0x8c, 0x2c, 0x3c, 0xdf, 0x2d, 0x47, 0xb0, 0xa9, 0xe9, 0xcb, 0x69,
	0x7b, 0xc7, 0x0b, 0x0d, 0x92, 0xc0, 0x77, 0x05, 0xac, 0x21, 0x74, 0xdd, 0x5a, 0xd2, 0x62, 0xd5,
	0x34, 0x9d, 0x12, 0xa8, 0x29, 0xd9, 0xba, 0x42, 0x5f, 0x9f, 0x99, 0x7a, 0xb6, 0x54, 0x7a, 0xb6,
	0x43, 0xd0, 0x5e, 0x88, 0x24, 0x75, 0xa0, 0x91, 0x54, 0xed, 0xea, 0xf1, 0x77, 0xc6, 0x4e, 0x73,
	0xb7, 0x56, 0xee, 0xb6, 0xe4, 0x25, 0xcb, 0x1e, 0xec, 0x0a, 0x7c, 0x28, 0xfe, 0x3c, 0x87, 0x70,
	0xd8, 0x2b, 0x7c, 0xee, 0x00, 0xa9, 0x77, 0x93, 0x48, 0x63, 0xad, 0xb6, 0x08, 0xfd, 0x16, 0x9f,
	0xb2, 0xec, 0xd1, 0x9e, 0x2e, 0x6a, 0xe4, 0x30, 0x6f, 0x74, 0x2e, 0x5c, 0x7e, 0xc2, 0xe7, 0x27,
	0x9e, 0x4c, 0x7e, 0xfd, 0x16, 0x2f, 0x58, 0x7b, 0x6a, 0x12, 0xe2, 0x83, 0xc8, 0x40, 0x4b, 0xf9,
	0x79, 0xc3, 0x34, 0x38, 0xec, 0xfd, 0xc1, 0x0e, 0x26, 0x40, 0xfc, 0x2a, 0x22, 0x9b, 0x00, 0x79,
	0x87, 0xeb, 0x14, 0x34, 0xcc, 0x97, 0xec, 0xf0, 0xa5, 0x42, 0xe2, 0x31, 0x95, 0x81, 0xbc, 0xc3,
	0x20, 0x89, 0x0d, 0x16, 0x7b, 0xd6, 0x35, 0x5f, 0x9e, 0x95, 0x7e, 0x43, 0xd0, 0xfc, 0x36, 0x41,
	0xdd, 0xb0, 0xde, 0x70, 0xfc, 0x1f, 0x49, 0xf0, 0x2d, 0x58, 0x3b, 0x37, 0x2f, 0x31, 0x7a, 0x41,
	0x96, 0x4a, 0xbd, 0xa0, 0x06, 0xfe, 0x1d, 0x60, 0x4e, 0xaa, 0x8e, 0x06, 0x68, 0xa0, 0xd4, 0x00,
	0x1d, 0xeb, 0x2d, 0xee, 0x3b, 0xef, 0x47, 0xcd, 0x9f, 0x79, 0x66, 0x9f, 0xe1, 0xdd, 0x4f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x27, 0x9a, 0xa4, 0x98, 0x04, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamdServiceClient is the client API for StreamdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamdServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Patch(ctx context.Context, in *PatchRequest, opts ...grpc.CallOption) (*PatchResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	ListForUser(ctx context.Context, in *ListForUserRequest, opts ...grpc.CallOption) (*ListForUserResponse, error)
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
}

type streamdServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamdServiceClient(cc *grpc.ClientConn) StreamdServiceClient {
	return &streamdServiceClient{cc}
}

func (c *streamdServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.streamd.StreamdService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamdServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.streamd.StreamdService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamdServiceClient) Patch(ctx context.Context, in *PatchRequest, opts ...grpc.CallOption) (*PatchResponse, error) {
	out := new(PatchResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.streamd.StreamdService/Patch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamdServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.streamd.StreamdService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamdServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.streamd.StreamdService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamdServiceClient) ListForUser(ctx context.Context, in *ListForUserRequest, opts ...grpc.CallOption) (*ListForUserResponse, error) {
	out := new(ListForUserResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.streamd.StreamdService/ListForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamdServiceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.streamd.StreamdService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamdServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.streamd.StreamdService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamdServiceServer is the server API for StreamdService service.
type StreamdServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Delete(context.Context, *DeleteRequest) (*empty.Empty, error)
	Patch(context.Context, *PatchRequest) (*PatchResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	ListForUser(context.Context, *ListForUserRequest) (*ListForUserResponse, error)
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
}

func RegisterStreamdServiceServer(s *grpc.Server, srv StreamdServiceServer) {
	s.RegisterService(&_StreamdService_serviceDesc, srv)
}

func _StreamdService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamdServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.streamd.StreamdService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamdServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamdService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamdServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.streamd.StreamdService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamdServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamdService_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamdServiceServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.streamd.StreamdService/Patch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamdServiceServer).Patch(ctx, req.(*PatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamdService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamdServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.streamd.StreamdService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamdServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamdService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamdServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.streamd.StreamdService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamdServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamdService_ListForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamdServiceServer).ListForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.streamd.StreamdService/ListForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamdServiceServer).ListForUser(ctx, req.(*ListForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamdService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamdServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.streamd.StreamdService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamdServiceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamdService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamdServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.streamd.StreamdService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamdServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StreamdService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.streamd.StreamdService",
	HandlerType: (*StreamdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _StreamdService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StreamdService_Delete_Handler,
		},
		{
			MethodName: "Patch",
			Handler:    _StreamdService_Patch_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _StreamdService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _StreamdService_List_Handler,
		},
		{
			MethodName: "ListForUser",
			Handler:    _StreamdService_ListForUser_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _StreamdService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _StreamdService_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
