// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package streamd

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StreamdService service

type StreamdServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	ListForUser(ctx context.Context, in *ListForUserRequest, opts ...grpc.CallOption) (*ListForUserResponse, error)
}

type streamdServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamdServiceClient(cc *grpc.ClientConn) StreamdServiceClient {
	return &streamdServiceClient{cc}
}

func (c *streamdServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.streamd.StreamdService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamdServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.streamd.StreamdService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamdServiceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.streamd.StreamdService/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamdServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.streamd.StreamdService/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamdServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.streamd.StreamdService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamdServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.streamd.StreamdService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamdServiceClient) ListForUser(ctx context.Context, in *ListForUserRequest, opts ...grpc.CallOption) (*ListForUserResponse, error) {
	out := new(ListForUserResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.streamd.StreamdService/ListForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StreamdService service

type StreamdServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Delete(context.Context, *DeleteRequest) (*empty.Empty, error)
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	ListForUser(context.Context, *ListForUserRequest) (*ListForUserResponse, error)
}

func RegisterStreamdServiceServer(s *grpc.Server, srv StreamdServiceServer) {
	s.RegisterService(&_StreamdService_serviceDesc, srv)
}

func _StreamdService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamdServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.streamd.StreamdService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamdServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamdService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamdServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.streamd.StreamdService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamdServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamdService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamdServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.streamd.StreamdService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamdServiceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamdService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamdServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.streamd.StreamdService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamdServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamdService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamdServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.streamd.StreamdService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamdServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamdService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamdServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.streamd.StreamdService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamdServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamdService_ListForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamdServiceServer).ListForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.streamd.StreamdService/ListForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamdServiceServer).ListForUser(ctx, req.(*ListForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StreamdService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.streamd.StreamdService",
	HandlerType: (*StreamdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _StreamdService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StreamdService_Delete_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _StreamdService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _StreamdService_Stop_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _StreamdService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _StreamdService_List_Handler,
		},
		{
			MethodName: "ListForUser",
			Handler:    _StreamdService_ListForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_service_8e61d03d0a669abd) }

var fileDescriptor_service_8e61d03d0a669abd = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x2b, 0x41, 0x83, 0xea, 0x02, 0x83, 0x91, 0x18, 0x82, 0x58, 0xba, 0xd1, 0x16, 0x57,
	0x94, 0x37, 0xe0, 0x5f, 0x17, 0x06, 0x44, 0xc4, 0xc2, 0x40, 0xe5, 0x36, 0xd7, 0x10, 0x29, 0xa9,
	0x8d, 0xef, 0x52, 0x89, 0xa7, 0xe4, 0x95, 0x50, 0xe2, 0xd8, 0x62, 0x22, 0xee, 0x76, 0x77, 0xf9,
	0x7d, 0xfe, 0xee, 0x3b, 0x85, 0x9d, 0x20, 0x98, 0x5d, 0xbe, 0x06, 0xa1, 0x8d, 0x22, 0xc5, 0x2f,
	0x65, 0x2e, 0x4a, 0x20, 0x49, 0x9f, 0xf9, 0x36, 0x43, 0xe1, 0x3e, 0x22, 0x19, 0x90, 0x65, 0x1a,
	0x5f, 0x64, 0x4a, 0x65, 0x05, 0xcc, 0x1a, 0x78, 0x55, 0x6d, 0x66, 0x50, 0x6a, 0xfa, 0xb6, 0xda,
	0xf8, 0x78, 0x6d, 0x40, 0x12, 0xb8, 0x2e, 0x85, 0x02, 0x7c, 0x37, 0x44, 0x92, 0x86, 0xda, 0x86,
	0x21, 0x29, 0xdd, 0xd6, 0x83, 0x0c, 0xfc, 0xb8, 0xc8, 0xd1, 0xd5, 0x67, 0x75, 0xbd, 0xdc, 0x28,
	0xb3, 0xac, 0x10, 0x8c, 0x1d, 0xce, 0x7f, 0xfa, 0xec, 0x34, 0xb1, 0x9b, 0x24, 0x76, 0x31, 0x9e,
	0xb1, 0xe8, 0xbe, 0x71, 0xe5, 0x53, 0xf1, 0xef, 0xea, 0xc2, 0x62, 0xaf, 0xf0, 0x55, 0x01, 0x52,
	0x7c, 0x1d, 0x48, 0xa3, 0x56, 0x5b, 0x84, 0x51, 0x8f, 0xbf, 0xb0, 0xe8, 0xa1, 0x09, 0xd4, 0x69,
	0x64, 0x31, 0x67, 0x74, 0x2e, 0xec, 0xc9, 0x84, 0x3b, 0x99, 0x78, 0xac, 0x4f, 0x36, 0xea, 0xf1,
	0x94, 0xf5, 0x93, 0xfa, 0x28, 0x7c, 0xd2, 0xf1, 0x60, 0x43, 0xb9, 0xf7, 0xa6, 0x61, 0xb0, 0xdf,
	0x5b, 0xb2, 0xc3, 0x84, 0x94, 0xe6, 0xe3, 0x4e, 0x9d, 0xd2, 0xce, 0x63, 0x12, 0xc4, 0x7a, 0x8b,
	0x0f, 0x76, 0xb0, 0x00, 0xe2, 0x57, 0x1d, 0xaa, 0x05, 0xf8, 0x10, 0xe3, 0x10, 0xf4, 0x6f, 0x84,
	0xe7, 0x1c, 0xa9, 0x33, 0x42, 0x0d, 0x85, 0x46, 0xb0, 0xac, 0xb7, 0xd8, 0xb1, 0x61, 0x3d, 0x79,
	0x52, 0xe6, 0x0d, 0xc1, 0xf0, 0x9b, 0x00, 0x75, 0xcb, 0x3a, 0xc3, 0xf9, 0x3e, 0x12, 0xe7, 0x7b,
	0x37, 0x78, 0x3f, 0x6a, 0x81, 0x55, 0xd4, 0xfc, 0x20, 0xb7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xe1, 0x07, 0x28, 0xf2, 0x91, 0x03, 0x00, 0x00,
}
