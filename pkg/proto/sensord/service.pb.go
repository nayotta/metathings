// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package sensord

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcb, 0x4e, 0xf3, 0x30,
	0x10, 0x85, 0x5b, 0xfd, 0x3f, 0xa9, 0xea, 0x52, 0x90, 0x8c, 0xc4, 0x22, 0x88, 0x4d, 0x57, 0x40,
	0x8b, 0x7b, 0xe1, 0x0d, 0xb8, 0x75, 0xc3, 0xa2, 0xa2, 0x62, 0xc3, 0x82, 0x2a, 0x49, 0xa7, 0xa9,
	0xa5, 0x34, 0x0e, 0x1e, 0xa7, 0x12, 0x2f, 0xca, 0xf3, 0xa0, 0xc4, 0x76, 0x04, 0x1b, 0x6c, 0x76,
	0x1e, 0xe7, 0x3b, 0xe7, 0x8c, 0x27, 0x43, 0xfa, 0x08, 0x72, 0xcf, 0x13, 0x60, 0x85, 0x14, 0x4a,
	0xd0, 0xf3, 0x88, 0xb3, 0x1d, 0xa8, 0x48, 0x6d, 0x79, 0x9e, 0x22, 0xb3, 0x1f, 0x11, 0x72, 0x14,
	0x72, 0x1d, 0x9e, 0xa5, 0x42, 0xa4, 0x19, 0x8c, 0x6b, 0x38, 0x2e, 0x37, 0x63, 0xd8, 0x15, 0xea,
	0x43, 0x6b, 0xc3, 0xc3, 0x44, 0x42, 0xa4, 0xc0, 0x56, 0x6b, 0xc8, 0xa0, 0xa9, 0x7a, 0x45, 0xa4,
	0x92, 0xad, 0x29, 0xba, 0x29, 0x28, 0x73, 0x24, 0x19, 0x47, 0x7b, 0x3e, 0xa9, 0xce, 0xab, 0x8d,
	0x90, 0xab, 0x12, 0x41, 0x9a, 0xcb, 0x63, 0x2c, 0x63, 0x4c, 0x24, 0x8f, 0xad, 0x53, 0xbf, 0x28,
	0xe3, 0x8c, 0xa3, 0xf1, 0x9a, 0x7d, 0x06, 0xe4, 0x68, 0xa9, 0xbb, 0x5b, 0xea, 0x66, 0x69, 0x4a,
	0x82, 0xbb, 0xba, 0x13, 0x3a, 0x62, 0xbf, 0x3e, 0x87, 0x69, 0xec, 0x19, 0xde, 0x4b, 0x40, 0x15,
	0x5e, 0x7b, 0xd2, 0x58, 0x88, 0x1c, 0x61, 0xd0, 0xa2, 0x0b, 0x12, 0xdc, 0xd7, 0x8f, 0x74, 0x06,
	0x69, 0xcc, 0x06, 0x9d, 0x32, 0x3d, 0x46, 0x66, 0xc7, 0xc8, 0x1e, 0xaa, 0x31, 0x0e, 0x5a, 0x74,
	0x4d, 0x0e, 0x16, 0xd5, 0xa0, 0xe8, 0xd0, 0x61, 0x58, 0x53, 0xd6, 0x6f, 0xe4, 0x07, 0x37, 0x7d,
	0xbf, 0x91, 0x7f, 0x73, 0x50, 0xf4, 0xd2, 0x21, 0x9b, 0x83, 0xb2, 0x09, 0x57, 0x3e, 0x68, 0xe3,
	0x1f, 0x91, 0xff, 0x4f, 0x1c, 0x15, 0x75, 0xa9, 0x2a, 0xc8, 0x26, 0x0c, 0xbd, 0xd8, 0x26, 0x62,
	0x4f, 0x7a, 0xd5, 0xcd, 0xa3, 0x90, 0x2f, 0x08, 0x92, 0x4e, 0x3d, 0xd4, 0x86, 0xb5, 0x81, 0xb3,
	0xbf, 0x48, 0xbe, 0xe5, 0x76, 0x97, 0x76, 0x21, 0xe9, 0xc4, 0x61, 0xd1, 0x90, 0x26, 0x13, 0xc3,
	0xa9, 0xbf, 0x42, 0x47, 0xe2, 0xa0, 0x75, 0xd1, 0x9e, 0xb4, 0x69, 0x41, 0x3a, 0x0b, 0xbd, 0xf7,
	0x94, 0xb9, 0xfe, 0xb6, 0xe6, 0x9a, 0xcc, 0xb1, 0x2f, 0xff, 0x23, 0xf1, 0xb6, 0xfb, 0xda, 0x31,
	0x44, 0x1c, 0xd4, 0x7b, 0x7a, 0xf3, 0x15, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x9e, 0xc0, 0xd4, 0x2c,
	0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SensordServiceClient is the client API for SensordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SensordServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Patch(ctx context.Context, in *PatchRequest, opts ...grpc.CallOption) (*PatchResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	ListForUser(ctx context.Context, in *ListForUserRequest, opts ...grpc.CallOption) (*ListForUserResponse, error)
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (SensordService_SubscribeClient, error)
	Publish(ctx context.Context, opts ...grpc.CallOption) (SensordService_PublishClient, error)
}

type sensordServiceClient struct {
	cc *grpc.ClientConn
}

func NewSensordServiceClient(cc *grpc.ClientConn) SensordServiceClient {
	return &sensordServiceClient{cc}
}

func (c *sensordServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.sensord.SensordService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensordServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.sensord.SensordService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensordServiceClient) Patch(ctx context.Context, in *PatchRequest, opts ...grpc.CallOption) (*PatchResponse, error) {
	out := new(PatchResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.sensord.SensordService/Patch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensordServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.sensord.SensordService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensordServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.sensord.SensordService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensordServiceClient) ListForUser(ctx context.Context, in *ListForUserRequest, opts ...grpc.CallOption) (*ListForUserResponse, error) {
	out := new(ListForUserResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.service.sensord.SensordService/ListForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensordServiceClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (SensordService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SensordService_serviceDesc.Streams[0], "/ai.metathings.service.sensord.SensordService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &sensordServiceSubscribeClient{stream}
	return x, nil
}

type SensordService_SubscribeClient interface {
	Send(*SubscribeRequests) error
	Recv() (*SubscribeResponses, error)
	grpc.ClientStream
}

type sensordServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *sensordServiceSubscribeClient) Send(m *SubscribeRequests) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sensordServiceSubscribeClient) Recv() (*SubscribeResponses, error) {
	m := new(SubscribeResponses)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sensordServiceClient) Publish(ctx context.Context, opts ...grpc.CallOption) (SensordService_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SensordService_serviceDesc.Streams[1], "/ai.metathings.service.sensord.SensordService/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &sensordServicePublishClient{stream}
	return x, nil
}

type SensordService_PublishClient interface {
	Send(*PublishRequests) error
	Recv() (*PublishResponses, error)
	grpc.ClientStream
}

type sensordServicePublishClient struct {
	grpc.ClientStream
}

func (x *sensordServicePublishClient) Send(m *PublishRequests) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sensordServicePublishClient) Recv() (*PublishResponses, error) {
	m := new(PublishResponses)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SensordServiceServer is the server API for SensordService service.
type SensordServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Delete(context.Context, *DeleteRequest) (*empty.Empty, error)
	Patch(context.Context, *PatchRequest) (*PatchResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	ListForUser(context.Context, *ListForUserRequest) (*ListForUserResponse, error)
	Subscribe(SensordService_SubscribeServer) error
	Publish(SensordService_PublishServer) error
}

func RegisterSensordServiceServer(s *grpc.Server, srv SensordServiceServer) {
	s.RegisterService(&_SensordService_serviceDesc, srv)
}

func _SensordService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensordServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.sensord.SensordService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensordServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensordService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensordServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.sensord.SensordService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensordServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensordService_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensordServiceServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.sensord.SensordService/Patch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensordServiceServer).Patch(ctx, req.(*PatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensordService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensordServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.sensord.SensordService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensordServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensordService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensordServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.sensord.SensordService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensordServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensordService_ListForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensordServiceServer).ListForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.sensord.SensordService/ListForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensordServiceServer).ListForUser(ctx, req.(*ListForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensordService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SensordServiceServer).Subscribe(&sensordServiceSubscribeServer{stream})
}

type SensordService_SubscribeServer interface {
	Send(*SubscribeResponses) error
	Recv() (*SubscribeRequests, error)
	grpc.ServerStream
}

type sensordServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *sensordServiceSubscribeServer) Send(m *SubscribeResponses) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sensordServiceSubscribeServer) Recv() (*SubscribeRequests, error) {
	m := new(SubscribeRequests)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SensordService_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SensordServiceServer).Publish(&sensordServicePublishServer{stream})
}

type SensordService_PublishServer interface {
	Send(*PublishResponses) error
	Recv() (*PublishRequests, error)
	grpc.ServerStream
}

type sensordServicePublishServer struct {
	grpc.ServerStream
}

func (x *sensordServicePublishServer) Send(m *PublishResponses) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sensordServicePublishServer) Recv() (*PublishRequests, error) {
	m := new(PublishRequests)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SensordService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.sensord.SensordService",
	HandlerType: (*SensordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SensordService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SensordService_Delete_Handler,
		},
		{
			MethodName: "Patch",
			Handler:    _SensordService_Patch_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SensordService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SensordService_List_Handler,
		},
		{
			MethodName: "ListForUser",
			Handler:    _SensordService_ListForUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _SensordService_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Publish",
			Handler:       _SensordService_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
