// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: publish.proto

package sensord

import fmt "fmt"
import go_proto_validators "github.com/mwitkow/go-proto-validators"
import proto "github.com/golang/protobuf/proto"
import math "math"
import _ "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/mwitkow/go-proto-validators"
import _ "github.com/nayotta/metathings/pkg/proto/sensor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *PublishDataRequest) Validate() error {
	if nil == this.Data {
		return go_proto_validators.FieldError("Data", fmt.Errorf("message must exist"))
	}
	if this.Data != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.Data); err != nil {
			return go_proto_validators.FieldError("Data", err)
		}
	}
	return nil
}
func (this *PublishRequest) Validate() error {
	if nil == this.Session {
		return go_proto_validators.FieldError("Session", fmt.Errorf("message must exist"))
	}
	if this.Session != nil {
		if err := go_proto_validators.CallValidatorIfExists(this.Session); err != nil {
			return go_proto_validators.FieldError("Session", err)
		}
	}
	if oneOfNester, ok := this.GetPayload().(*PublishRequest_Data); ok {
		if oneOfNester.Data != nil {
			if err := go_proto_validators.CallValidatorIfExists(oneOfNester.Data); err != nil {
				return go_proto_validators.FieldError("Data", err)
			}
		}
	}
	return nil
}
func (this *PublishRequests) Validate() error {
	for _, item := range this.Requests {
		if item != nil {
			if err := go_proto_validators.CallValidatorIfExists(item); err != nil {
				return go_proto_validators.FieldError("Requests", err)
			}
		}
	}
	return nil
}
func (this *PublishResponse) Validate() error {
	return nil
}
func (this *PublishResponses) Validate() error {
	for _, item := range this.Responses {
		if item != nil {
			if err := go_proto_validators.CallValidatorIfExists(item); err != nil {
				return go_proto_validators.FieldError("Responses", err)
			}
		}
	}
	return nil
}
