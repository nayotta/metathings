// Code generated by protoc-gen-go. DO NOT EDIT.
// source: subscribe.proto

package sensord

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/mwitkow/go-proto-validators"
import _ "github.com/nayotta/metathings/pkg/proto/sensor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SubscribeByIdRequest struct {
	Id                   *wrappers.StringValue `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SubscribeByIdRequest) Reset()         { *m = SubscribeByIdRequest{} }
func (m *SubscribeByIdRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeByIdRequest) ProtoMessage()    {}
func (*SubscribeByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscribe_9e0adf85cc69f665, []int{0}
}
func (m *SubscribeByIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeByIdRequest.Unmarshal(m, b)
}
func (m *SubscribeByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeByIdRequest.Marshal(b, m, deterministic)
}
func (dst *SubscribeByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeByIdRequest.Merge(dst, src)
}
func (m *SubscribeByIdRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeByIdRequest.Size(m)
}
func (m *SubscribeByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeByIdRequest proto.InternalMessageInfo

func (m *SubscribeByIdRequest) GetId() *wrappers.StringValue {
	if m != nil {
		return m.Id
	}
	return nil
}

type SubscribeByUserIdRequest struct {
	UserId               *wrappers.StringValue `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SubscribeByUserIdRequest) Reset()         { *m = SubscribeByUserIdRequest{} }
func (m *SubscribeByUserIdRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeByUserIdRequest) ProtoMessage()    {}
func (*SubscribeByUserIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscribe_9e0adf85cc69f665, []int{1}
}
func (m *SubscribeByUserIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeByUserIdRequest.Unmarshal(m, b)
}
func (m *SubscribeByUserIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeByUserIdRequest.Marshal(b, m, deterministic)
}
func (dst *SubscribeByUserIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeByUserIdRequest.Merge(dst, src)
}
func (m *SubscribeByUserIdRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeByUserIdRequest.Size(m)
}
func (m *SubscribeByUserIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeByUserIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeByUserIdRequest proto.InternalMessageInfo

func (m *SubscribeByUserIdRequest) GetUserId() *wrappers.StringValue {
	if m != nil {
		return m.UserId
	}
	return nil
}

type SubscribeByCoreIdRequest struct {
	CoreId               *wrappers.StringValue `protobuf:"bytes,1,opt,name=core_id,json=coreId" json:"core_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SubscribeByCoreIdRequest) Reset()         { *m = SubscribeByCoreIdRequest{} }
func (m *SubscribeByCoreIdRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeByCoreIdRequest) ProtoMessage()    {}
func (*SubscribeByCoreIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscribe_9e0adf85cc69f665, []int{2}
}
func (m *SubscribeByCoreIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeByCoreIdRequest.Unmarshal(m, b)
}
func (m *SubscribeByCoreIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeByCoreIdRequest.Marshal(b, m, deterministic)
}
func (dst *SubscribeByCoreIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeByCoreIdRequest.Merge(dst, src)
}
func (m *SubscribeByCoreIdRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeByCoreIdRequest.Size(m)
}
func (m *SubscribeByCoreIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeByCoreIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeByCoreIdRequest proto.InternalMessageInfo

func (m *SubscribeByCoreIdRequest) GetCoreId() *wrappers.StringValue {
	if m != nil {
		return m.CoreId
	}
	return nil
}

type SubscribeRequest struct {
	Session *wrappers.UInt64Value `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*SubscribeRequest_SubscribeById
	//	*SubscribeRequest_SubscribeByUserId
	//	*SubscribeRequest_SubscribeByCoreId
	Payload              isSubscribeRequest_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscribe_9e0adf85cc69f665, []int{3}
}
func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (dst *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(dst, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

type isSubscribeRequest_Payload interface {
	isSubscribeRequest_Payload()
}

type SubscribeRequest_SubscribeById struct {
	SubscribeById *SubscribeByIdRequest `protobuf:"bytes,2,opt,name=subscribe_by_id,json=subscribeById,oneof"`
}
type SubscribeRequest_SubscribeByUserId struct {
	SubscribeByUserId *SubscribeByUserIdRequest `protobuf:"bytes,3,opt,name=subscribe_by_user_id,json=subscribeByUserId,oneof"`
}
type SubscribeRequest_SubscribeByCoreId struct {
	SubscribeByCoreId *SubscribeByCoreIdRequest `protobuf:"bytes,4,opt,name=subscribe_by_core_id,json=subscribeByCoreId,oneof"`
}

func (*SubscribeRequest_SubscribeById) isSubscribeRequest_Payload()     {}
func (*SubscribeRequest_SubscribeByUserId) isSubscribeRequest_Payload() {}
func (*SubscribeRequest_SubscribeByCoreId) isSubscribeRequest_Payload() {}

func (m *SubscribeRequest) GetPayload() isSubscribeRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SubscribeRequest) GetSession() *wrappers.UInt64Value {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *SubscribeRequest) GetSubscribeById() *SubscribeByIdRequest {
	if x, ok := m.GetPayload().(*SubscribeRequest_SubscribeById); ok {
		return x.SubscribeById
	}
	return nil
}

func (m *SubscribeRequest) GetSubscribeByUserId() *SubscribeByUserIdRequest {
	if x, ok := m.GetPayload().(*SubscribeRequest_SubscribeByUserId); ok {
		return x.SubscribeByUserId
	}
	return nil
}

func (m *SubscribeRequest) GetSubscribeByCoreId() *SubscribeByCoreIdRequest {
	if x, ok := m.GetPayload().(*SubscribeRequest_SubscribeByCoreId); ok {
		return x.SubscribeByCoreId
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SubscribeRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SubscribeRequest_OneofMarshaler, _SubscribeRequest_OneofUnmarshaler, _SubscribeRequest_OneofSizer, []interface{}{
		(*SubscribeRequest_SubscribeById)(nil),
		(*SubscribeRequest_SubscribeByUserId)(nil),
		(*SubscribeRequest_SubscribeByCoreId)(nil),
	}
}

func _SubscribeRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SubscribeRequest)
	// payload
	switch x := m.Payload.(type) {
	case *SubscribeRequest_SubscribeById:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SubscribeById); err != nil {
			return err
		}
	case *SubscribeRequest_SubscribeByUserId:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SubscribeByUserId); err != nil {
			return err
		}
	case *SubscribeRequest_SubscribeByCoreId:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SubscribeByCoreId); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SubscribeRequest.Payload has unexpected type %T", x)
	}
	return nil
}

func _SubscribeRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SubscribeRequest)
	switch tag {
	case 2: // payload.subscribe_by_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SubscribeByIdRequest)
		err := b.DecodeMessage(msg)
		m.Payload = &SubscribeRequest_SubscribeById{msg}
		return true, err
	case 3: // payload.subscribe_by_user_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SubscribeByUserIdRequest)
		err := b.DecodeMessage(msg)
		m.Payload = &SubscribeRequest_SubscribeByUserId{msg}
		return true, err
	case 4: // payload.subscribe_by_core_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SubscribeByCoreIdRequest)
		err := b.DecodeMessage(msg)
		m.Payload = &SubscribeRequest_SubscribeByCoreId{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SubscribeRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SubscribeRequest)
	// payload
	switch x := m.Payload.(type) {
	case *SubscribeRequest_SubscribeById:
		s := proto.Size(x.SubscribeById)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SubscribeRequest_SubscribeByUserId:
		s := proto.Size(x.SubscribeByUserId)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SubscribeRequest_SubscribeByCoreId:
		s := proto.Size(x.SubscribeByCoreId)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SubscribeRequests struct {
	Requests             []*SubscribeRequest `protobuf:"bytes,1,rep,name=requests" json:"requests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SubscribeRequests) Reset()         { *m = SubscribeRequests{} }
func (m *SubscribeRequests) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequests) ProtoMessage()    {}
func (*SubscribeRequests) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscribe_9e0adf85cc69f665, []int{4}
}
func (m *SubscribeRequests) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequests.Unmarshal(m, b)
}
func (m *SubscribeRequests) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequests.Marshal(b, m, deterministic)
}
func (dst *SubscribeRequests) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequests.Merge(dst, src)
}
func (m *SubscribeRequests) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequests.Size(m)
}
func (m *SubscribeRequests) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequests.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequests proto.InternalMessageInfo

func (m *SubscribeRequests) GetRequests() []*SubscribeRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

type SubscribeResponse struct {
	Session              uint64      `protobuf:"varint,1,opt,name=session" json:"session,omitempty"`
	Data                 *SensorData `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscribe_9e0adf85cc69f665, []int{5}
}
func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeResponse.Unmarshal(m, b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
}
func (dst *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(dst, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_SubscribeResponse.Size(m)
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

func (m *SubscribeResponse) GetSession() uint64 {
	if m != nil {
		return m.Session
	}
	return 0
}

func (m *SubscribeResponse) GetData() *SensorData {
	if m != nil {
		return m.Data
	}
	return nil
}

type SubscribeResponses struct {
	Responses            []*SubscribeResponse `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SubscribeResponses) Reset()         { *m = SubscribeResponses{} }
func (m *SubscribeResponses) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponses) ProtoMessage()    {}
func (*SubscribeResponses) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscribe_9e0adf85cc69f665, []int{6}
}
func (m *SubscribeResponses) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeResponses.Unmarshal(m, b)
}
func (m *SubscribeResponses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeResponses.Marshal(b, m, deterministic)
}
func (dst *SubscribeResponses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponses.Merge(dst, src)
}
func (m *SubscribeResponses) XXX_Size() int {
	return xxx_messageInfo_SubscribeResponses.Size(m)
}
func (m *SubscribeResponses) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponses.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponses proto.InternalMessageInfo

func (m *SubscribeResponses) GetResponses() []*SubscribeResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

func init() {
	proto.RegisterType((*SubscribeByIdRequest)(nil), "ai.metathings.service.sensord.SubscribeByIdRequest")
	proto.RegisterType((*SubscribeByUserIdRequest)(nil), "ai.metathings.service.sensord.SubscribeByUserIdRequest")
	proto.RegisterType((*SubscribeByCoreIdRequest)(nil), "ai.metathings.service.sensord.SubscribeByCoreIdRequest")
	proto.RegisterType((*SubscribeRequest)(nil), "ai.metathings.service.sensord.SubscribeRequest")
	proto.RegisterType((*SubscribeRequests)(nil), "ai.metathings.service.sensord.SubscribeRequests")
	proto.RegisterType((*SubscribeResponse)(nil), "ai.metathings.service.sensord.SubscribeResponse")
	proto.RegisterType((*SubscribeResponses)(nil), "ai.metathings.service.sensord.SubscribeResponses")
}

func init() { proto.RegisterFile("subscribe.proto", fileDescriptor_subscribe_9e0adf85cc69f665) }

var fileDescriptor_subscribe_9e0adf85cc69f665 = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcb, 0x6e, 0xd4, 0x30,
	0x14, 0x86, 0x3b, 0x17, 0xcd, 0x50, 0x17, 0x04, 0xb5, 0xba, 0x18, 0x55, 0x5c, 0x46, 0x59, 0x95,
	0x45, 0x6d, 0xd4, 0x56, 0x65, 0x81, 0xca, 0x62, 0x60, 0xd1, 0x0a, 0xc4, 0x22, 0x55, 0x91, 0x58,
	0xa0, 0xe2, 0xc4, 0x87, 0xd4, 0x34, 0x13, 0x07, 0x1f, 0xa7, 0xa3, 0xbc, 0x07, 0xef, 0x87, 0xc4,
	0x93, 0x20, 0x9c, 0x64, 0x72, 0x29, 0xd0, 0x99, 0x95, 0xed, 0x38, 0xff, 0xf7, 0x9f, 0xe3, 0xff,
	0x90, 0x87, 0x98, 0x05, 0x18, 0x1a, 0x15, 0x00, 0x4b, 0x8d, 0xb6, 0x9a, 0x3e, 0x11, 0x8a, 0xcd,
	0xc1, 0x0a, 0x7b, 0xa5, 0x92, 0x08, 0x19, 0x82, 0xb9, 0x51, 0x21, 0x30, 0x84, 0x04, 0xb5, 0x91,
	0xbb, 0x4f, 0x23, 0xad, 0xa3, 0x18, 0xb8, 0xfb, 0x39, 0xc8, 0xbe, 0xf2, 0x85, 0x11, 0x69, 0x0a,
	0x06, 0x0b, 0xf9, 0xee, 0x71, 0xa4, 0xec, 0x55, 0x16, 0xb0, 0x50, 0xcf, 0xf9, 0x7c, 0xa1, 0xec,
	0xb5, 0x5e, 0xf0, 0x48, 0xef, 0xbb, 0xcb, 0xfd, 0x1b, 0x11, 0x2b, 0x29, 0xac, 0x36, 0xc8, 0x97,
	0xdb, 0x52, 0xf7, 0xaa, 0xa1, 0x4b, 0x44, 0xae, 0xad, 0x15, 0xbc, 0x2e, 0x83, 0xa7, 0xd7, 0x51,
	0x61, 0xc9, 0x8b, 0x42, 0xca, 0xa5, 0x14, 0xdf, 0x6f, 0x9e, 0xbc, 0xf7, 0x64, 0xe7, 0xbc, 0x6a,
	0x6a, 0x96, 0x9f, 0x49, 0x1f, 0xbe, 0x67, 0x80, 0x96, 0x1e, 0x91, 0xbe, 0x92, 0x93, 0xde, 0xb4,
	0xb7, 0xb7, 0x75, 0xf0, 0x98, 0x15, 0x7d, 0xb0, 0xaa, 0x0f, 0x76, 0x6e, 0x8d, 0x4a, 0xa2, 0x8f,
	0x22, 0xce, 0x60, 0x36, 0xfa, 0xf5, 0xf3, 0x59, 0x7f, 0xda, 0xf3, 0xfb, 0x4a, 0x7a, 0x9f, 0xc8,
	0xa4, 0x41, 0xbb, 0x40, 0x30, 0x35, 0xf1, 0x84, 0x8c, 0x33, 0x04, 0x73, 0xb9, 0x26, 0x76, 0x94,
	0x39, 0x4a, 0x07, 0xfd, 0x46, 0x1b, 0x68, 0xa1, 0x43, 0x6d, 0x60, 0x6d, 0x74, 0xe8, 0x28, 0xde,
	0x8f, 0x01, 0x79, 0xb4, 0x64, 0x57, 0xcc, 0xd7, 0x64, 0x8c, 0x80, 0xa8, 0x74, 0xf2, 0x4f, 0xe6,
	0xc5, 0x59, 0x62, 0x8f, 0x8f, 0xda, 0xcc, 0x4a, 0x44, 0x3f, 0x37, 0xa6, 0xe5, 0x32, 0xc8, 0xff,
	0xd4, 0xd6, 0x77, 0x9c, 0x43, 0xf6, 0xdf, 0xa1, 0x61, 0x7f, 0x8b, 0xe3, 0x74, 0xc3, 0x7f, 0x80,
	0xcd, 0xef, 0xf4, 0x1b, 0xd9, 0x69, 0xe1, 0xab, 0xa7, 0x1d, 0x38, 0x8f, 0x97, 0xab, 0x7b, 0xb4,
	0x42, 0x3a, 0xdd, 0xf0, 0xb7, 0xb1, 0x7b, 0x77, 0xcb, 0xab, 0x7a, 0xeb, 0xe1, 0xba, 0x5e, 0xad,
	0xd4, 0x3a, 0x5e, 0xc5, 0xdd, 0x6c, 0x93, 0x8c, 0x53, 0x91, 0xc7, 0x5a, 0x48, 0xef, 0x0b, 0xd9,
	0xee, 0xa6, 0x82, 0xf4, 0x1d, 0xb9, 0x67, 0xca, 0xfd, 0xa4, 0x37, 0x1d, 0xec, 0x6d, 0x1d, 0xf0,
	0x55, 0xfd, 0x4b, 0x86, 0xbf, 0x04, 0x78, 0x71, 0xcb, 0x01, 0x53, 0x9d, 0x20, 0xd0, 0x49, 0x3b,
	0xf8, 0x61, 0x1d, 0xe9, 0x09, 0x19, 0x4a, 0x61, 0x45, 0x99, 0xe3, 0xf3, 0xbb, 0x7c, 0xdd, 0xfa,
	0x56, 0x58, 0xe1, 0x3b, 0x99, 0x27, 0x09, 0xbd, 0xe5, 0x86, 0xf4, 0x03, 0xd9, 0x34, 0xd5, 0xa1,
	0xec, 0xe8, 0xc5, 0xea, 0x1d, 0x15, 0x42, 0xbf, 0x46, 0x04, 0x23, 0x37, 0x9e, 0x87, 0xbf, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xa6, 0x3e, 0x6f, 0xf7, 0xac, 0x04, 0x00, 0x00,
}
