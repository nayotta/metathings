// Code generated by protoc-gen-go. DO NOT EDIT.
// source: get_core.proto

package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/mwitkow/go-proto-validators"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetCoreRequest struct {
	Id *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetCoreRequest) Reset()                    { *m = GetCoreRequest{} }
func (m *GetCoreRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCoreRequest) ProtoMessage()               {}
func (*GetCoreRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *GetCoreRequest) GetId() *google_protobuf.StringValue {
	if m != nil {
		return m.Id
	}
	return nil
}

type GetCoreResponse struct {
	Core *Core `protobuf:"bytes,1,opt,name=core" json:"core,omitempty"`
}

func (m *GetCoreResponse) Reset()                    { *m = GetCoreResponse{} }
func (m *GetCoreResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCoreResponse) ProtoMessage()               {}
func (*GetCoreResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *GetCoreResponse) GetCore() *Core {
	if m != nil {
		return m.Core
	}
	return nil
}

func init() {
	proto.RegisterType((*GetCoreRequest)(nil), "ai.metathings.service.core.GetCoreRequest")
	proto.RegisterType((*GetCoreResponse)(nil), "ai.metathings.service.core.GetCoreResponse")
}

func init() { proto.RegisterFile("get_core.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x49, 0x90, 0x1e, 0x56, 0xa8, 0x90, 0x93, 0x04, 0xd1, 0xd0, 0x93, 0x97, 0xce, 0x82,
	0x16, 0x1f, 0x40, 0xc1, 0xde, 0x2b, 0x78, 0x95, 0x4d, 0x32, 0x6e, 0x07, 0x93, 0x4c, 0x9c, 0x9d,
	0x6d, 0x1e, 0x57, 0xf0, 0x49, 0xa4, 0xdb, 0x5a, 0x4f, 0xde, 0x16, 0xf6, 0xff, 0xfe, 0xef, 0x1f,
	0x33, 0xf7, 0xa8, 0x6f, 0x0d, 0x0b, 0xc2, 0x28, 0xac, 0x5c, 0x94, 0x8e, 0xa0, 0x47, 0x75, 0xba,
	0xa5, 0xc1, 0x07, 0x08, 0x28, 0x3b, 0x6a, 0x10, 0xf6, 0x89, 0xf2, 0xda, 0x33, 0xfb, 0x0e, 0x6d,
	0x4a, 0xd6, 0xf1, 0xdd, 0x4e, 0xe2, 0xc6, 0x11, 0x25, 0x1c, 0xd8, 0xf2, 0xc1, 0x93, 0x6e, 0x63,
	0x0d, 0x0d, 0xf7, 0xb6, 0x9f, 0x48, 0x3f, 0x78, 0xb2, 0x9e, 0x97, 0xe9, 0x73, 0xb9, 0x73, 0x1d,
	0xb5, 0x4e, 0x59, 0x82, 0x3d, 0x3d, 0x8f, 0x9c, 0xf9, 0xf3, 0x2f, 0x9e, 0xcd, 0x7c, 0x8d, 0xfa,
	0xc4, 0x82, 0x1b, 0xfc, 0x8c, 0x18, 0xb4, 0x58, 0x99, 0x9c, 0xda, 0xcb, 0xac, 0xca, 0x6e, 0xcf,
	0xef, 0xae, 0xe0, 0x30, 0x01, 0x7e, 0x27, 0xc0, 0x8b, 0x0a, 0x0d, 0xfe, 0xd5, 0x75, 0x11, 0x1f,
	0x67, 0xdf, 0x5f, 0x37, 0x79, 0x95, 0x6d, 0x72, 0x6a, 0x17, 0x6b, 0x73, 0x71, 0xea, 0x09, 0x23,
	0x0f, 0x01, 0x8b, 0x95, 0x39, 0xdb, 0x8b, 0x8e, 0x55, 0x15, 0xfc, 0x7f, 0x29, 0x24, 0x2e, 0xa5,
	0xeb, 0x59, 0x52, 0xdd, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x41, 0x94, 0x9e, 0x29, 0x01,
	0x00, 0x00,
}
