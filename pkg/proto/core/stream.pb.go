// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream.proto

package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/mwitkow/go-proto-validators"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StreamMessageType int32

const (
	StreamMessageType_STREAM_MESSAGE_TYPE_UNKNOWN StreamMessageType = 0
	StreamMessageType_STREAM_MESSAGE_TYPE_SYSTEM  StreamMessageType = 1
	StreamMessageType_STREAM_MESSAGE_TYPE_USER    StreamMessageType = 2
)

var StreamMessageType_name = map[int32]string{
	0: "STREAM_MESSAGE_TYPE_UNKNOWN",
	1: "STREAM_MESSAGE_TYPE_SYSTEM",
	2: "STREAM_MESSAGE_TYPE_USER",
}
var StreamMessageType_value = map[string]int32{
	"STREAM_MESSAGE_TYPE_UNKNOWN": 0,
	"STREAM_MESSAGE_TYPE_SYSTEM":  1,
	"STREAM_MESSAGE_TYPE_USER":    2,
}

func (x StreamMessageType) String() string {
	return proto.EnumName(StreamMessageType_name, int32(x))
}
func (StreamMessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

type StreamErrorResponsePayload struct {
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	MethodName  string `protobuf:"bytes,2,opt,name=method_name,json=methodName" json:"method_name,omitempty"`
	Context     string `protobuf:"bytes,3,opt,name=context" json:"context,omitempty"`
}

func (m *StreamErrorResponsePayload) Reset()                    { *m = StreamErrorResponsePayload{} }
func (m *StreamErrorResponsePayload) String() string            { return proto.CompactTextString(m) }
func (*StreamErrorResponsePayload) ProtoMessage()               {}
func (*StreamErrorResponsePayload) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *StreamErrorResponsePayload) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *StreamErrorResponsePayload) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *StreamErrorResponsePayload) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

type StreamResponse struct {
	SessionId   string            `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	MessageType StreamMessageType `protobuf:"varint,2,opt,name=message_type,json=messageType,enum=ai.metathings.service.core.StreamMessageType" json:"message_type,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*StreamResponse_Err
	//	*StreamResponse_UnaryCall
	Payload isStreamResponse_Payload `protobuf_oneof:"payload"`
}

func (m *StreamResponse) Reset()                    { *m = StreamResponse{} }
func (m *StreamResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()               {}
func (*StreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

type isStreamResponse_Payload interface {
	isStreamResponse_Payload()
}

type StreamResponse_Err struct {
	Err *StreamErrorResponsePayload `protobuf:"bytes,3,opt,name=err,oneof"`
}
type StreamResponse_UnaryCall struct {
	UnaryCall *UnaryCallResponsePayload `protobuf:"bytes,4,opt,name=unary_call,json=unaryCall,oneof"`
}

func (*StreamResponse_Err) isStreamResponse_Payload()       {}
func (*StreamResponse_UnaryCall) isStreamResponse_Payload() {}

func (m *StreamResponse) GetPayload() isStreamResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *StreamResponse) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *StreamResponse) GetMessageType() StreamMessageType {
	if m != nil {
		return m.MessageType
	}
	return StreamMessageType_STREAM_MESSAGE_TYPE_UNKNOWN
}

func (m *StreamResponse) GetErr() *StreamErrorResponsePayload {
	if x, ok := m.GetPayload().(*StreamResponse_Err); ok {
		return x.Err
	}
	return nil
}

func (m *StreamResponse) GetUnaryCall() *UnaryCallResponsePayload {
	if x, ok := m.GetPayload().(*StreamResponse_UnaryCall); ok {
		return x.UnaryCall
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StreamResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StreamResponse_OneofMarshaler, _StreamResponse_OneofUnmarshaler, _StreamResponse_OneofSizer, []interface{}{
		(*StreamResponse_Err)(nil),
		(*StreamResponse_UnaryCall)(nil),
	}
}

func _StreamResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StreamResponse)
	// payload
	switch x := m.Payload.(type) {
	case *StreamResponse_Err:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Err); err != nil {
			return err
		}
	case *StreamResponse_UnaryCall:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnaryCall); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StreamResponse.Payload has unexpected type %T", x)
	}
	return nil
}

func _StreamResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StreamResponse)
	switch tag {
	case 3: // payload.err
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StreamErrorResponsePayload)
		err := b.DecodeMessage(msg)
		m.Payload = &StreamResponse_Err{msg}
		return true, err
	case 4: // payload.unary_call
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UnaryCallResponsePayload)
		err := b.DecodeMessage(msg)
		m.Payload = &StreamResponse_UnaryCall{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StreamResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StreamResponse)
	// payload
	switch x := m.Payload.(type) {
	case *StreamResponse_Err:
		s := proto.Size(x.Err)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamResponse_UnaryCall:
		s := proto.Size(x.UnaryCall)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type StreamRequest struct {
	SessionId   *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	MessageType StreamMessageType            `protobuf:"varint,2,opt,name=message_type,json=messageType,enum=ai.metathings.service.core.StreamMessageType" json:"message_type,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*StreamRequest_UnaryCall
	Payload isStreamRequest_Payload `protobuf_oneof:"payload"`
}

func (m *StreamRequest) Reset()                    { *m = StreamRequest{} }
func (m *StreamRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()               {}
func (*StreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

type isStreamRequest_Payload interface {
	isStreamRequest_Payload()
}

type StreamRequest_UnaryCall struct {
	UnaryCall *UnaryCallRequestPayload `protobuf:"bytes,3,opt,name=unary_call,json=unaryCall,oneof"`
}

func (*StreamRequest_UnaryCall) isStreamRequest_Payload() {}

func (m *StreamRequest) GetPayload() isStreamRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *StreamRequest) GetSessionId() *google_protobuf.StringValue {
	if m != nil {
		return m.SessionId
	}
	return nil
}

func (m *StreamRequest) GetMessageType() StreamMessageType {
	if m != nil {
		return m.MessageType
	}
	return StreamMessageType_STREAM_MESSAGE_TYPE_UNKNOWN
}

func (m *StreamRequest) GetUnaryCall() *UnaryCallRequestPayload {
	if x, ok := m.GetPayload().(*StreamRequest_UnaryCall); ok {
		return x.UnaryCall
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StreamRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StreamRequest_OneofMarshaler, _StreamRequest_OneofUnmarshaler, _StreamRequest_OneofSizer, []interface{}{
		(*StreamRequest_UnaryCall)(nil),
	}
}

func _StreamRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StreamRequest)
	// payload
	switch x := m.Payload.(type) {
	case *StreamRequest_UnaryCall:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnaryCall); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StreamRequest.Payload has unexpected type %T", x)
	}
	return nil
}

func _StreamRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StreamRequest)
	switch tag {
	case 3: // payload.unary_call
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UnaryCallRequestPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &StreamRequest_UnaryCall{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StreamRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StreamRequest)
	// payload
	switch x := m.Payload.(type) {
	case *StreamRequest_UnaryCall:
		s := proto.Size(x.UnaryCall)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*StreamErrorResponsePayload)(nil), "ai.metathings.service.core.StreamErrorResponsePayload")
	proto.RegisterType((*StreamResponse)(nil), "ai.metathings.service.core.StreamResponse")
	proto.RegisterType((*StreamRequest)(nil), "ai.metathings.service.core.StreamRequest")
	proto.RegisterEnum("ai.metathings.service.core.StreamMessageType", StreamMessageType_name, StreamMessageType_value)
}

func init() { proto.RegisterFile("stream.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0x9b, 0x14, 0xb5, 0xca, 0x75, 0xa8, 0xc2, 0xac, 0x2c, 0x53, 0x9a, 0x92, 0x15, 0x42,
	0x8a, 0x2d, 0xa5, 0xa8, 0xfb, 0xb6, 0xb2, 0xf8, 0x53, 0x42, 0x64, 0x3b, 0x40, 0x57, 0xd6, 0xc4,
	0xbe, 0x38, 0x16, 0xb6, 0xc7, 0xcc, 0x8c, 0x1b, 0xc2, 0x4b, 0xf0, 0x28, 0x3c, 0x12, 0x12, 0x4f,
	0x82, 0x32, 0x63, 0xb7, 0x54, 0x09, 0x94, 0x45, 0x77, 0x9e, 0x3b, 0xe7, 0x9e, 0x73, 0xfc, 0x69,
	0xa0, 0x2b, 0x24, 0x47, 0x9a, 0xdb, 0x25, 0x67, 0x92, 0x11, 0x8b, 0xa6, 0x76, 0x8e, 0x92, 0xca,
	0x45, 0x5a, 0x24, 0xc2, 0x16, 0xc8, 0xaf, 0xd2, 0x08, 0xed, 0x88, 0x71, 0xb4, 0x8e, 0x12, 0xc6,
	0x92, 0x0c, 0x1d, 0xa5, 0x9c, 0x57, 0x9f, 0x9c, 0x25, 0xa7, 0x65, 0x89, 0x5c, 0xe8, 0x5d, 0xeb,
	0x34, 0x49, 0xe5, 0xa2, 0x9a, 0xdb, 0x11, 0xcb, 0x9d, 0x7c, 0x99, 0xca, 0xcf, 0x6c, 0xe9, 0x24,
	0x6c, 0xa8, 0x2e, 0x87, 0x57, 0x34, 0x4b, 0x63, 0x2a, 0x19, 0x17, 0xce, 0xf5, 0x67, 0xbd, 0xd7,
	0xab, 0x0a, 0xca, 0x57, 0x61, 0x44, 0xb3, 0x4c, 0x4f, 0x06, 0xdf, 0xc0, 0xf2, 0x55, 0x2b, 0x97,
	0x73, 0xc6, 0x3d, 0x14, 0x25, 0x2b, 0x04, 0x4e, 0xe9, 0x2a, 0x63, 0x34, 0x26, 0x4f, 0xa1, 0x5b,
	0xf7, 0x0a, 0x0b, 0x9a, 0xa3, 0xd9, 0x3a, 0x6e, 0x3d, 0xeb, 0x78, 0x46, 0x3d, 0x9b, 0xd0, 0x1c,
	0x49, 0x1f, 0x8c, 0x1c, 0xe5, 0x82, 0xc5, 0x5a, 0xd1, 0x56, 0x0a, 0xd0, 0x23, 0x25, 0x30, 0x61,
	0x3f, 0x62, 0x85, 0xc4, 0xaf, 0xd2, 0xdc, 0x55, 0x97, 0xcd, 0x71, 0xf0, 0xa3, 0x0d, 0x07, 0x3a,
	0xbc, 0xc9, 0x25, 0x4f, 0x00, 0x04, 0x0a, 0x91, 0xb2, 0x22, 0x4c, 0xe3, 0x3a, 0xae, 0x53, 0x4f,
	0x5e, 0xc7, 0x64, 0x0a, 0xdd, 0x1c, 0x85, 0xa0, 0x09, 0x86, 0x72, 0x55, 0xea, 0xb4, 0x83, 0xd1,
	0xd0, 0xfe, 0x3b, 0x4a, 0x5b, 0x07, 0x8c, 0xf5, 0x56, 0xb0, 0x2a, 0xd1, 0x33, 0xf2, 0x9b, 0x03,
	0x79, 0x03, 0xbb, 0xc8, 0xb9, 0x6a, 0x66, 0x8c, 0x4e, 0xef, 0x36, 0xda, 0x86, 0xe9, 0xd5, 0x8e,
	0xb7, 0x36, 0x21, 0x33, 0x80, 0x1b, 0xbe, 0xe6, 0x03, 0x65, 0xf9, 0xe2, 0x5f, 0x96, 0xb3, 0xb5,
	0xfa, 0x82, 0x66, 0xd9, 0xa6, 0x61, 0xa7, 0x6a, 0xee, 0xce, 0x3b, 0xb0, 0x5f, 0xea, 0xf9, 0xe0,
	0x7b, 0x1b, 0x1e, 0x36, 0xc4, 0xbe, 0x54, 0x28, 0x24, 0xb9, 0xd8, 0x00, 0x66, 0x8c, 0x0e, 0x6d,
	0xfd, 0x7c, 0xec, 0xe6, 0xf9, 0xac, 0xbb, 0xa7, 0x45, 0xf2, 0x9e, 0x66, 0x15, 0x9e, 0xef, 0xfd,
	0xfa, 0xd9, 0x6f, 0x1f, 0xb7, 0xfe, 0xc4, 0xfa, 0xf1, 0x1e, 0xb0, 0x5e, 0xfb, 0xde, 0xc2, 0x1b,
	0xdc, 0x42, 0xa2, 0x29, 0x9f, 0xfc, 0x27, 0x12, 0xf5, 0x83, 0x77, 0x10, 0x79, 0xce, 0xe1, 0xd1,
	0x46, 0x15, 0xd2, 0x87, 0xc7, 0x7e, 0xe0, 0xb9, 0x67, 0xe3, 0x70, 0xec, 0xfa, 0xfe, 0xd9, 0x4b,
	0x37, 0x0c, 0x2e, 0xa7, 0x6e, 0x38, 0x9b, 0xbc, 0x9d, 0xbc, 0xfb, 0x30, 0xe9, 0xed, 0x90, 0x23,
	0xb0, 0xb6, 0x09, 0xfc, 0x4b, 0x3f, 0x70, 0xc7, 0xbd, 0x16, 0x39, 0x04, 0x73, 0xab, 0x81, 0xef,
	0x7a, 0xbd, 0xf6, 0x7c, 0x4f, 0x71, 0x3d, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x5d, 0x2f,
	0xd1, 0xd0, 0x03, 0x00, 0x00,
}
