// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream.proto

package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/mwitkow/go-proto-validators"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StreamMessageType int32

const (
	StreamMessageType_STREAM_MESSAGE_TYPE_UNKNOWN StreamMessageType = 0
	StreamMessageType_STREAM_MESSAGE_TYPE_SYSTEM  StreamMessageType = 1
	StreamMessageType_STREAM_MESSAGE_TYPE_USER    StreamMessageType = 2
)

var StreamMessageType_name = map[int32]string{
	0: "STREAM_MESSAGE_TYPE_UNKNOWN",
	1: "STREAM_MESSAGE_TYPE_SYSTEM",
	2: "STREAM_MESSAGE_TYPE_USER",
}
var StreamMessageType_value = map[string]int32{
	"STREAM_MESSAGE_TYPE_UNKNOWN": 0,
	"STREAM_MESSAGE_TYPE_SYSTEM":  1,
	"STREAM_MESSAGE_TYPE_USER":    2,
}

func (x StreamMessageType) String() string {
	return proto.EnumName(StreamMessageType_name, int32(x))
}
func (StreamMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stream_84d6a3a6523a65d9, []int{0}
}

type StreamResponse struct {
	SessionId   string            `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	MessageType StreamMessageType `protobuf:"varint,2,opt,name=message_type,json=messageType,enum=ai.metathings.service.core.StreamMessageType" json:"message_type,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*StreamResponse_Err
	//	*StreamResponse_UnaryCall
	//	*StreamResponse_StreamCall
	Payload              isStreamResponse_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *StreamResponse) Reset()         { *m = StreamResponse{} }
func (m *StreamResponse) String() string { return proto.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()    {}
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_84d6a3a6523a65d9, []int{0}
}
func (m *StreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamResponse.Unmarshal(m, b)
}
func (m *StreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamResponse.Marshal(b, m, deterministic)
}
func (dst *StreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamResponse.Merge(dst, src)
}
func (m *StreamResponse) XXX_Size() int {
	return xxx_messageInfo_StreamResponse.Size(m)
}
func (m *StreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamResponse proto.InternalMessageInfo

type isStreamResponse_Payload interface {
	isStreamResponse_Payload()
}

type StreamResponse_Err struct {
	Err *StreamErrorResponsePayload `protobuf:"bytes,3,opt,name=err,oneof"`
}
type StreamResponse_UnaryCall struct {
	UnaryCall *UnaryCallResponsePayload `protobuf:"bytes,4,opt,name=unary_call,json=unaryCall,oneof"`
}
type StreamResponse_StreamCall struct {
	StreamCall *StreamCallResponsePayload `protobuf:"bytes,5,opt,name=stream_call,json=streamCall,oneof"`
}

func (*StreamResponse_Err) isStreamResponse_Payload()        {}
func (*StreamResponse_UnaryCall) isStreamResponse_Payload()  {}
func (*StreamResponse_StreamCall) isStreamResponse_Payload() {}

func (m *StreamResponse) GetPayload() isStreamResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *StreamResponse) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *StreamResponse) GetMessageType() StreamMessageType {
	if m != nil {
		return m.MessageType
	}
	return StreamMessageType_STREAM_MESSAGE_TYPE_UNKNOWN
}

func (m *StreamResponse) GetErr() *StreamErrorResponsePayload {
	if x, ok := m.GetPayload().(*StreamResponse_Err); ok {
		return x.Err
	}
	return nil
}

func (m *StreamResponse) GetUnaryCall() *UnaryCallResponsePayload {
	if x, ok := m.GetPayload().(*StreamResponse_UnaryCall); ok {
		return x.UnaryCall
	}
	return nil
}

func (m *StreamResponse) GetStreamCall() *StreamCallResponsePayload {
	if x, ok := m.GetPayload().(*StreamResponse_StreamCall); ok {
		return x.StreamCall
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StreamResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StreamResponse_OneofMarshaler, _StreamResponse_OneofUnmarshaler, _StreamResponse_OneofSizer, []interface{}{
		(*StreamResponse_Err)(nil),
		(*StreamResponse_UnaryCall)(nil),
		(*StreamResponse_StreamCall)(nil),
	}
}

func _StreamResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StreamResponse)
	// payload
	switch x := m.Payload.(type) {
	case *StreamResponse_Err:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Err); err != nil {
			return err
		}
	case *StreamResponse_UnaryCall:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnaryCall); err != nil {
			return err
		}
	case *StreamResponse_StreamCall:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StreamCall); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StreamResponse.Payload has unexpected type %T", x)
	}
	return nil
}

func _StreamResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StreamResponse)
	switch tag {
	case 3: // payload.err
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StreamErrorResponsePayload)
		err := b.DecodeMessage(msg)
		m.Payload = &StreamResponse_Err{msg}
		return true, err
	case 4: // payload.unary_call
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UnaryCallResponsePayload)
		err := b.DecodeMessage(msg)
		m.Payload = &StreamResponse_UnaryCall{msg}
		return true, err
	case 5: // payload.stream_call
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StreamCallResponsePayload)
		err := b.DecodeMessage(msg)
		m.Payload = &StreamResponse_StreamCall{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StreamResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StreamResponse)
	// payload
	switch x := m.Payload.(type) {
	case *StreamResponse_Err:
		s := proto.Size(x.Err)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamResponse_UnaryCall:
		s := proto.Size(x.UnaryCall)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamResponse_StreamCall:
		s := proto.Size(x.StreamCall)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type StreamRequest struct {
	SessionId   *wrappers.StringValue `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	MessageType StreamMessageType     `protobuf:"varint,2,opt,name=message_type,json=messageType,enum=ai.metathings.service.core.StreamMessageType" json:"message_type,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*StreamRequest_UnaryCall
	//	*StreamRequest_StreamCall
	Payload              isStreamRequest_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_84d6a3a6523a65d9, []int{1}
}
func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamRequest.Unmarshal(m, b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
}
func (dst *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(dst, src)
}
func (m *StreamRequest) XXX_Size() int {
	return xxx_messageInfo_StreamRequest.Size(m)
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

type isStreamRequest_Payload interface {
	isStreamRequest_Payload()
}

type StreamRequest_UnaryCall struct {
	UnaryCall *UnaryCallRequestPayload `protobuf:"bytes,3,opt,name=unary_call,json=unaryCall,oneof"`
}
type StreamRequest_StreamCall struct {
	StreamCall *StreamCallRequestPayload `protobuf:"bytes,4,opt,name=stream_call,json=streamCall,oneof"`
}

func (*StreamRequest_UnaryCall) isStreamRequest_Payload()  {}
func (*StreamRequest_StreamCall) isStreamRequest_Payload() {}

func (m *StreamRequest) GetPayload() isStreamRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *StreamRequest) GetSessionId() *wrappers.StringValue {
	if m != nil {
		return m.SessionId
	}
	return nil
}

func (m *StreamRequest) GetMessageType() StreamMessageType {
	if m != nil {
		return m.MessageType
	}
	return StreamMessageType_STREAM_MESSAGE_TYPE_UNKNOWN
}

func (m *StreamRequest) GetUnaryCall() *UnaryCallRequestPayload {
	if x, ok := m.GetPayload().(*StreamRequest_UnaryCall); ok {
		return x.UnaryCall
	}
	return nil
}

func (m *StreamRequest) GetStreamCall() *StreamCallRequestPayload {
	if x, ok := m.GetPayload().(*StreamRequest_StreamCall); ok {
		return x.StreamCall
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StreamRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StreamRequest_OneofMarshaler, _StreamRequest_OneofUnmarshaler, _StreamRequest_OneofSizer, []interface{}{
		(*StreamRequest_UnaryCall)(nil),
		(*StreamRequest_StreamCall)(nil),
	}
}

func _StreamRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StreamRequest)
	// payload
	switch x := m.Payload.(type) {
	case *StreamRequest_UnaryCall:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnaryCall); err != nil {
			return err
		}
	case *StreamRequest_StreamCall:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StreamCall); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StreamRequest.Payload has unexpected type %T", x)
	}
	return nil
}

func _StreamRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StreamRequest)
	switch tag {
	case 3: // payload.unary_call
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UnaryCallRequestPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &StreamRequest_UnaryCall{msg}
		return true, err
	case 4: // payload.stream_call
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StreamCallRequestPayload)
		err := b.DecodeMessage(msg)
		m.Payload = &StreamRequest_StreamCall{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StreamRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StreamRequest)
	// payload
	switch x := m.Payload.(type) {
	case *StreamRequest_UnaryCall:
		s := proto.Size(x.UnaryCall)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamRequest_StreamCall:
		s := proto.Size(x.StreamCall)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*StreamResponse)(nil), "ai.metathings.service.core.StreamResponse")
	proto.RegisterType((*StreamRequest)(nil), "ai.metathings.service.core.StreamRequest")
	proto.RegisterEnum("ai.metathings.service.core.StreamMessageType", StreamMessageType_name, StreamMessageType_value)
}

func init() { proto.RegisterFile("stream.proto", fileDescriptor_stream_84d6a3a6523a65d9) }

var fileDescriptor_stream_84d6a3a6523a65d9 = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xdf, 0x6e, 0xda, 0x30,
	0x14, 0x87, 0x1b, 0xd8, 0x3a, 0x71, 0x68, 0x2b, 0xe6, 0xab, 0x88, 0x75, 0x2d, 0xea, 0x15, 0x9a,
	0x84, 0x23, 0xd1, 0xad, 0xf7, 0x6d, 0x15, 0xed, 0x9f, 0x60, 0x28, 0x09, 0x6b, 0x7b, 0x15, 0x19,
	0x38, 0x4b, 0xad, 0x25, 0x71, 0x66, 0x3b, 0x45, 0x3c, 0xc2, 0x9e, 0x72, 0xd2, 0xae, 0xf6, 0x18,
	0x13, 0x31, 0xb0, 0x32, 0xb2, 0x95, 0x8b, 0xde, 0xc5, 0xb1, 0xcf, 0xe7, 0x73, 0x7e, 0x9f, 0x61,
	0x4f, 0x69, 0x89, 0x2c, 0xa1, 0x99, 0x14, 0x5a, 0x90, 0x26, 0xe3, 0x34, 0x41, 0xcd, 0xf4, 0x2d,
	0x4f, 0x23, 0x45, 0x15, 0xca, 0x3b, 0x3e, 0x46, 0x3a, 0x16, 0x12, 0x9b, 0x47, 0x91, 0x10, 0x51,
	0x8c, 0x4e, 0x71, 0x72, 0x94, 0x7f, 0x71, 0xa6, 0x92, 0x65, 0x19, 0x4a, 0x65, 0x6a, 0x9b, 0x67,
	0x11, 0xd7, 0xb7, 0xf9, 0x88, 0x8e, 0x45, 0xe2, 0x24, 0x53, 0xae, 0xbf, 0x8a, 0xa9, 0x13, 0x89,
	0x4e, 0xb1, 0xd9, 0xb9, 0x63, 0x31, 0x9f, 0x30, 0x2d, 0xa4, 0x72, 0x56, 0x9f, 0x8b, 0xba, 0xfd,
	0x8c, 0xcd, 0x62, 0xc1, 0x26, 0x66, 0x79, 0xf2, 0xbd, 0x0a, 0x07, 0x7e, 0xd1, 0x93, 0x87, 0x2a,
	0x13, 0xa9, 0x42, 0xf2, 0x12, 0x40, 0xa1, 0x52, 0x5c, 0xa4, 0x21, 0x9f, 0xd8, 0x56, 0xcb, 0x6a,
	0xd7, 0xbc, 0xda, 0xe2, 0xcf, 0xfb, 0x09, 0x19, 0xc0, 0x5e, 0x82, 0x4a, 0xb1, 0x08, 0x43, 0x3d,
	0xcb, 0xd0, 0xae, 0xb4, 0xac, 0xf6, 0x41, 0xb7, 0x43, 0xff, 0x3d, 0x0b, 0x35, 0x17, 0xf4, 0x4c,
	0x55, 0x30, 0xcb, 0xd0, 0xab, 0x27, 0x7f, 0x16, 0xe4, 0x03, 0x54, 0x51, 0x4a, 0xbb, 0xda, 0xb2,
	0xda, 0xf5, 0xee, 0xd9, 0xc3, 0x20, 0x57, 0x4a, 0x21, 0x97, 0xed, 0x0e, 0xcc, 0x38, 0xef, 0x76,
	0xbc, 0x39, 0x84, 0x0c, 0x01, 0xf2, 0x94, 0xc9, 0x59, 0x38, 0x66, 0x71, 0x6c, 0x3f, 0x29, 0x90,
	0xaf, 0xff, 0x87, 0x1c, 0xce, 0x4f, 0x5f, 0xb2, 0x38, 0xde, 0x04, 0xd6, 0xf2, 0xe5, 0x1e, 0xb9,
	0x86, 0xba, 0x31, 0x67, 0xb8, 0x4f, 0x0b, 0xee, 0x9b, 0x87, 0x5b, 0x2d, 0x07, 0x83, 0x5a, 0x6d,
	0x5e, 0xd4, 0xe0, 0xd9, 0xc2, 0xc8, 0xc9, 0xaf, 0x0a, 0xec, 0x2f, 0x5d, 0x7c, 0xcb, 0x51, 0x69,
	0x72, 0xb9, 0xa1, 0xa2, 0xde, 0x3d, 0xa4, 0xe6, 0x65, 0xd0, 0xe5, 0xcb, 0x98, 0x5f, 0xc5, 0xd3,
	0xe8, 0x33, 0x8b, 0x73, 0xbc, 0xd8, 0xfd, 0xf9, 0xe3, 0xb8, 0xd2, 0xb2, 0xee, 0x0b, 0xbb, 0x7e,
	0x04, 0x61, 0x2b, 0xee, 0x9a, 0xb8, 0x60, 0x2d, 0x6c, 0xe3, 0xef, 0x74, 0xcb, 0xb0, 0x8b, 0x01,
	0x4b, 0xb3, 0xbe, 0x5a, 0xcf, 0x7a, 0x0b, 0x87, 0xf7, 0xb3, 0xfe, 0x8b, 0x5b, 0x1e, 0xf5, 0x2b,
	0x09, 0xcf, 0x37, 0x66, 0x24, 0xc7, 0xf0, 0xc2, 0x0f, 0x3c, 0xf7, 0xbc, 0x17, 0xf6, 0x5c, 0xdf,
	0x3f, 0x7f, 0xeb, 0x86, 0xc1, 0xcd, 0xc0, 0x0d, 0x87, 0xfd, 0x8f, 0xfd, 0x4f, 0x57, 0xfd, 0xc6,
	0x0e, 0x39, 0x82, 0x66, 0xd9, 0x01, 0xff, 0xc6, 0x0f, 0xdc, 0x5e, 0xc3, 0x22, 0x87, 0x60, 0x97,
	0x02, 0x7c, 0xd7, 0x6b, 0x54, 0x46, 0xbb, 0x85, 0xb0, 0xd3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xcf, 0x99, 0x53, 0x00, 0x04, 0x04, 0x00, 0x00,
}
