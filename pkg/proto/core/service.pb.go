// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf3 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CoreService service

type CoreServiceClient interface {
	CreateCore(ctx context.Context, in *CreateCoreRequest, opts ...grpc.CallOption) (*CreateCoreResponse, error)
	DeleteCore(ctx context.Context, in *DeleteCoreRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	PatchCore(ctx context.Context, in *PatchCoreRequest, opts ...grpc.CallOption) (*PatchCoreResponse, error)
	GetCore(ctx context.Context, in *GetCoreRequest, opts ...grpc.CallOption) (*GetCoreResponse, error)
	ListCores(ctx context.Context, in *ListCoresRequest, opts ...grpc.CallOption) (*ListCoresResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// NOTE: input is response body form core agentd,
	//       output is request body to core agentd.
	Stream(ctx context.Context, opts ...grpc.CallOption) (CoreService_StreamClient, error)
	ListCoresForUser(ctx context.Context, in *ListCoresForUserRequest, opts ...grpc.CallOption) (*ListCoresForUserResponse, error)
	SendUnaryCall(ctx context.Context, in *SendUnaryCallRequest, opts ...grpc.CallOption) (*SendUnaryCallResponse, error)
}

type coreServiceClient struct {
	cc *grpc.ClientConn
}

func NewCoreServiceClient(cc *grpc.ClientConn) CoreServiceClient {
	return &coreServiceClient{cc}
}

func (c *coreServiceClient) CreateCore(ctx context.Context, in *CreateCoreRequest, opts ...grpc.CallOption) (*CreateCoreResponse, error) {
	out := new(CreateCoreResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.core.CoreService/CreateCore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) DeleteCore(ctx context.Context, in *DeleteCoreRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.core.CoreService/DeleteCore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) PatchCore(ctx context.Context, in *PatchCoreRequest, opts ...grpc.CallOption) (*PatchCoreResponse, error) {
	out := new(PatchCoreResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.core.CoreService/PatchCore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetCore(ctx context.Context, in *GetCoreRequest, opts ...grpc.CallOption) (*GetCoreResponse, error) {
	out := new(GetCoreResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.core.CoreService/GetCore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ListCores(ctx context.Context, in *ListCoresRequest, opts ...grpc.CallOption) (*ListCoresResponse, error) {
	out := new(ListCoresResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.core.CoreService/ListCores", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/ai.metathings.service.core.CoreService/Heartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (CoreService_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreService_serviceDesc.Streams[0], c.cc, "/ai.metathings.service.core.CoreService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreServiceStreamClient{stream}
	return x, nil
}

type CoreService_StreamClient interface {
	Send(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ClientStream
}

type coreServiceStreamClient struct {
	grpc.ClientStream
}

func (x *coreServiceStreamClient) Send(m *StreamResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *coreServiceStreamClient) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreServiceClient) ListCoresForUser(ctx context.Context, in *ListCoresForUserRequest, opts ...grpc.CallOption) (*ListCoresForUserResponse, error) {
	out := new(ListCoresForUserResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.core.CoreService/ListCoresForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) SendUnaryCall(ctx context.Context, in *SendUnaryCallRequest, opts ...grpc.CallOption) (*SendUnaryCallResponse, error) {
	out := new(SendUnaryCallResponse)
	err := grpc.Invoke(ctx, "/ai.metathings.service.core.CoreService/SendUnaryCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CoreService service

type CoreServiceServer interface {
	CreateCore(context.Context, *CreateCoreRequest) (*CreateCoreResponse, error)
	DeleteCore(context.Context, *DeleteCoreRequest) (*google_protobuf3.Empty, error)
	PatchCore(context.Context, *PatchCoreRequest) (*PatchCoreResponse, error)
	GetCore(context.Context, *GetCoreRequest) (*GetCoreResponse, error)
	ListCores(context.Context, *ListCoresRequest) (*ListCoresResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*google_protobuf3.Empty, error)
	// NOTE: input is response body form core agentd,
	//       output is request body to core agentd.
	Stream(CoreService_StreamServer) error
	ListCoresForUser(context.Context, *ListCoresForUserRequest) (*ListCoresForUserResponse, error)
	SendUnaryCall(context.Context, *SendUnaryCallRequest) (*SendUnaryCallResponse, error)
}

func RegisterCoreServiceServer(s *grpc.Server, srv CoreServiceServer) {
	s.RegisterService(&_CoreService_serviceDesc, srv)
}

func _CoreService_CreateCore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).CreateCore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.core.CoreService/CreateCore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).CreateCore(ctx, req.(*CreateCoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_DeleteCore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).DeleteCore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.core.CoreService/DeleteCore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).DeleteCore(ctx, req.(*DeleteCoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_PatchCore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchCoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).PatchCore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.core.CoreService/PatchCore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).PatchCore(ctx, req.(*PatchCoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetCore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetCore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.core.CoreService/GetCore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetCore(ctx, req.(*GetCoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ListCores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ListCores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.core.CoreService/ListCores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ListCores(ctx, req.(*ListCoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.core.CoreService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoreServiceServer).Stream(&coreServiceStreamServer{stream})
}

type CoreService_StreamServer interface {
	Send(*StreamRequest) error
	Recv() (*StreamResponse, error)
	grpc.ServerStream
}

type coreServiceStreamServer struct {
	grpc.ServerStream
}

func (x *coreServiceStreamServer) Send(m *StreamRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *coreServiceStreamServer) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CoreService_ListCoresForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCoresForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ListCoresForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.core.CoreService/ListCoresForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ListCoresForUser(ctx, req.(*ListCoresForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_SendUnaryCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendUnaryCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).SendUnaryCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.service.core.CoreService/SendUnaryCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).SendUnaryCall(ctx, req.(*SendUnaryCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.service.core.CoreService",
	HandlerType: (*CoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCore",
			Handler:    _CoreService_CreateCore_Handler,
		},
		{
			MethodName: "DeleteCore",
			Handler:    _CoreService_DeleteCore_Handler,
		},
		{
			MethodName: "PatchCore",
			Handler:    _CoreService_PatchCore_Handler,
		},
		{
			MethodName: "GetCore",
			Handler:    _CoreService_GetCore_Handler,
		},
		{
			MethodName: "ListCores",
			Handler:    _CoreService_ListCores_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _CoreService_Heartbeat_Handler,
		},
		{
			MethodName: "ListCoresForUser",
			Handler:    _CoreService_ListCoresForUser_Handler,
		},
		{
			MethodName: "SendUnaryCall",
			Handler:    _CoreService_SendUnaryCall_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _CoreService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcd, 0x6e, 0xe2, 0x30,
	0x14, 0x85, 0x41, 0x1a, 0x81, 0xf0, 0x0c, 0x33, 0x8c, 0xa5, 0x56, 0x6a, 0xba, 0x63, 0xd5, 0x3f,
	0x0c, 0x2d, 0x7d, 0x82, 0xd2, 0xbf, 0x45, 0x17, 0x55, 0x23, 0x36, 0xdd, 0x44, 0x26, 0xb9, 0x84,
	0x20, 0x27, 0x4e, 0x6d, 0x07, 0x89, 0x55, 0xdf, 0xae, 0xcf, 0x55, 0xc5, 0x89, 0x0d, 0x2c, 0x1a,
	0xc2, 0x92, 0xe3, 0xef, 0xfa, 0xe4, 0x9c, 0x6b, 0x50, 0x57, 0x82, 0x58, 0x45, 0x3e, 0x90, 0x54,
	0x70, 0xc5, 0xb1, 0x43, 0x23, 0x12, 0x83, 0xa2, 0x6a, 0x11, 0x25, 0xa1, 0x24, 0xe6, 0xd0, 0xe7,
	0x02, 0x9c, 0xd3, 0x90, 0xf3, 0x90, 0xc1, 0x50, 0x93, 0xb3, 0x6c, 0x3e, 0x84, 0x38, 0x55, 0xeb,
	0x62, 0xd0, 0xf9, 0xef, 0x0b, 0xa0, 0x0a, 0xbc, 0x9c, 0x34, 0x52, 0x00, 0x0c, 0x76, 0xa5, 0x5e,
	0x4a, 0x95, 0xbf, 0xd8, 0x56, 0xfe, 0x86, 0xa0, 0x76, 0x08, 0x16, 0xc9, 0x42, 0x90, 0xa5, 0xf2,
	0x6f, 0x01, 0x54, 0xa8, 0x19, 0x50, 0x55, 0x0a, 0x7f, 0xa4, 0x12, 0x40, 0xe3, 0xf2, 0xd7, 0xc9,
	0x66, 0xc0, 0x9b, 0x73, 0xe1, 0x65, 0x12, 0x44, 0x79, 0x74, 0x24, 0x21, 0x09, 0xbc, 0x2c, 0xa1,
	0x62, 0xed, 0xf9, 0x94, 0xb1, 0x42, 0xbe, 0xf9, 0x6a, 0xa3, 0xdf, 0x13, 0x2e, 0xc0, 0x2d, 0xc2,
	0xe1, 0x18, 0xa1, 0x89, 0xfe, 0xf8, 0x5c, 0xc4, 0x03, 0xf2, 0x73, 0x05, 0x64, 0xc3, 0xbd, 0xc1,
	0x47, 0x06, 0x52, 0x39, 0xa4, 0x2e, 0x2e, 0x53, 0x9e, 0x48, 0xe8, 0x37, 0xf0, 0x14, 0xa1, 0x7b,
	0x5d, 0xcc, 0x7e, 0xbb, 0x0d, 0x67, 0xec, 0x8e, 0x49, 0xb1, 0x04, 0x62, 0x96, 0x40, 0x1e, 0xf2,
	0x25, 0xf4, 0x1b, 0x78, 0x89, 0x3a, 0xaf, 0x79, 0xb9, 0xfa, 0xd6, 0xab, 0xaa, 0x5b, 0x2d, 0x66,
	0x2e, 0x1d, 0xd4, 0xa4, 0x6d, 0x84, 0x00, 0xb5, 0x9f, 0x40, 0x69, 0xa7, 0x8b, 0xaa, 0xd9, 0x12,
	0x32, 0x3e, 0x97, 0xb5, 0x58, 0xeb, 0xb2, 0x44, 0x9d, 0x97, 0x48, 0x6a, 0x55, 0x56, 0x27, 0xb2,
	0x58, 0xad, 0x44, 0x5b, 0xb4, 0xf5, 0x72, 0x51, 0xe7, 0xd9, 0x3c, 0xb3, 0x6a, 0x2f, 0x8b, 0xed,
	0x5f, 0x09, 0xa0, 0x96, 0xab, 0x9f, 0x6a, 0x75, 0x4b, 0x05, 0x63, 0x3e, 0xc6, 0x39, 0xaf, 0xc3,
	0x6a, 0xeb, 0x7e, 0xe3, 0xac, 0x39, 0x6a, 0xe2, 0x4f, 0xd4, 0xb3, 0x91, 0x1e, 0xb9, 0x98, 0x4a,
	0x10, 0x78, 0x5c, 0xab, 0x80, 0x92, 0x36, 0x49, 0x6e, 0x0f, 0x1b, 0xb2, 0xe5, 0xad, 0x50, 0xd7,
	0x85, 0x24, 0x98, 0xe6, 0x7f, 0xb4, 0x09, 0x65, 0x0c, 0x8f, 0x2a, 0x23, 0x6c, 0xa3, 0xc6, 0xfa,
	0xfa, 0x80, 0x09, 0xe3, 0x7b, 0xd7, 0x7a, 0xff, 0x95, 0x9f, 0xcf, 0x5a, 0xba, 0xf9, 0xf1, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0x39, 0xa7, 0xac, 0xcc, 0x04, 0x00, 0x00,
}
