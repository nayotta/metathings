syntax = "proto3";

package ai.metathings.service.core;
option go_package = "core";

import "google/protobuf/empty.proto";

import "create_core.proto";
import "delete_core.proto";
import "patch_core.proto";
import "get_core.proto";
import "list_cores.proto";
import "show_core.proto";

import "create_entity.proto";
import "delete_entity.proto";
import "patch_entity.proto";
import "get_entity.proto";
import "list_entities.proto";
import "list_entities_for_core.proto";

import "heartbeat.proto";
import "stream.proto";

import "list_cores_for_user.proto";
import "unary_call.proto";
import "stream_call.proto";

service CoreService {
	rpc CreateCore(CreateCoreRequest) returns (CreateCoreResponse) {}
	rpc DeleteCore(DeleteCoreRequest) returns (google.protobuf.Empty) {}
	rpc PatchCore(PatchCoreRequest) returns (PatchCoreResponse) {}
	rpc GetCore(GetCoreRequest) returns (GetCoreResponse) {}
	rpc ListCores(ListCoresRequest) returns (ListCoresResponse) {}
	rpc ShowCore(google.protobuf.Empty) returns (ShowCoreResponse) {}

	rpc CreateEntity(CreateEntityRequest) returns (CreateEntityResponse) {}
	rpc DeleteEntity(DeleteEntityRequest) returns (google.protobuf.Empty) {}
	rpc PatchEntity(PatchEntityRequest) returns (PatchEntityResponse) {}
	rpc GetEntity(GetEntityRequest) returns (GetEntityResponse) {}
	rpc ListEntities(ListEntitiesRequest) returns (ListEntitiesResponse) {}
	rpc ListEntitiesForCore(ListEntitiesForCoreRequest) returns (ListEntitiesForCoreResponse) {}

	rpc Heartbeat(HeartbeatRequest) returns (google.protobuf.Empty) {}
	// NOTE: input is response body form core agentd,
	//       output is request body to core agentd.
	rpc Stream(stream StreamResponse) returns (stream StreamRequest) {}

	rpc ListCoresForUser(ListCoresForUserRequest) returns (ListCoresForUserResponse) {}
	rpc UnaryCall(UnaryCallRequest) returns (UnaryCallResponse) {}
	rpc StreamCall(stream StreamCallRequest) returns (stream StreamCallResponse) {}
}
