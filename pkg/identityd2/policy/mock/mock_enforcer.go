// Code generated by MockGen. DO NOT EDIT.
// Source: enforcer.go

// Package mock_metathings_identityd2_policy is a generated GoMock package.
package mock_metathings_identityd2_policy

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEnforcer is a mock of Enforcer interface
type MockEnforcer struct {
	ctrl     *gomock.Controller
	recorder *MockEnforcerMockRecorder
}

// MockEnforcerMockRecorder is the mock recorder for MockEnforcer
type MockEnforcerMockRecorder struct {
	mock *MockEnforcer
}

// NewMockEnforcer creates a new mock instance
func NewMockEnforcer(ctrl *gomock.Controller) *MockEnforcer {
	mock := &MockEnforcer{ctrl: ctrl}
	mock.recorder = &MockEnforcerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEnforcer) EXPECT() *MockEnforcerMockRecorder {
	return m.recorder
}

// Enforce mocks base method
func (m *MockEnforcer) Enforce(domain, group, subject, object, action interface{}) error {
	ret := m.ctrl.Call(m, "Enforce", domain, group, subject, object, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enforce indicates an expected call of Enforce
func (mr *MockEnforcerMockRecorder) Enforce(domain, group, subject, object, action interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enforce", reflect.TypeOf((*MockEnforcer)(nil).Enforce), domain, group, subject, object, action)
}

// AddGroup mocks base method
func (m *MockEnforcer) AddGroup(domain, group string) error {
	ret := m.ctrl.Call(m, "AddGroup", domain, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGroup indicates an expected call of AddGroup
func (mr *MockEnforcerMockRecorder) AddGroup(domain, group interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroup", reflect.TypeOf((*MockEnforcer)(nil).AddGroup), domain, group)
}

// RemoveGroup mocks base method
func (m *MockEnforcer) RemoveGroup(domain, group string) error {
	ret := m.ctrl.Call(m, "RemoveGroup", domain, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveGroup indicates an expected call of RemoveGroup
func (mr *MockEnforcerMockRecorder) RemoveGroup(domain, group interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGroup", reflect.TypeOf((*MockEnforcer)(nil).RemoveGroup), domain, group)
}

// AddSubjectToRole mocks base method
func (m *MockEnforcer) AddSubjectToRole(subject, role string) error {
	ret := m.ctrl.Call(m, "AddSubjectToRole", subject, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSubjectToRole indicates an expected call of AddSubjectToRole
func (mr *MockEnforcerMockRecorder) AddSubjectToRole(subject, role interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubjectToRole", reflect.TypeOf((*MockEnforcer)(nil).AddSubjectToRole), subject, role)
}

// RemoveSubjectFromRole mocks base method
func (m *MockEnforcer) RemoveSubjectFromRole(subject, role string) error {
	ret := m.ctrl.Call(m, "RemoveSubjectFromRole", subject, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSubjectFromRole indicates an expected call of RemoveSubjectFromRole
func (mr *MockEnforcerMockRecorder) RemoveSubjectFromRole(subject, role interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSubjectFromRole", reflect.TypeOf((*MockEnforcer)(nil).RemoveSubjectFromRole), subject, role)
}

// AddObjectToKind mocks base method
func (m *MockEnforcer) AddObjectToKind(object, kind string) error {
	ret := m.ctrl.Call(m, "AddObjectToKind", object, kind)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddObjectToKind indicates an expected call of AddObjectToKind
func (mr *MockEnforcerMockRecorder) AddObjectToKind(object, kind interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddObjectToKind", reflect.TypeOf((*MockEnforcer)(nil).AddObjectToKind), object, kind)
}

// RemoveObjectFromKind mocks base method
func (m *MockEnforcer) RemoveObjectFromKind(object, kind string) error {
	ret := m.ctrl.Call(m, "RemoveObjectFromKind", object, kind)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveObjectFromKind indicates an expected call of RemoveObjectFromKind
func (mr *MockEnforcerMockRecorder) RemoveObjectFromKind(object, kind interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveObjectFromKind", reflect.TypeOf((*MockEnforcer)(nil).RemoveObjectFromKind), object, kind)
}
